{"version":3,"file":"less.min.js","sources":["../src/less-browser/utils.js","../src/less-browser/browser.js","../src/less/logger.js","../src/less/environment/environment.js","../src/less/data/colors.js","../src/less/data/unit-conversions.js","../src/less/data/index.js","../src/less/tree/node.js","../src/less/tree/color.js","../src/less/tree/paren.js","../src/less/tree/combinator.js","../src/less/tree/element.js","../src/less/constants.js","../node_modules/tslib/tslib.es6.mjs","../node_modules/is-what/dist/index.esm.js","../node_modules/copy-anything/dist/index.es.js","../src/less/utils.js","../src/less/less-error.js","../src/less/visitors/visitor.js","../src/less/contexts.js","../src/less/visitors/import-sequencer.js","../src/less/visitors/import-visitor.js","../src/less/visitors/set-tree-visibility-visitor.js","../src/less/visitors/extend-visitor.js","../src/less/visitors/join-selector-visitor.js","../src/less/visitors/to-css-visitor.js","../src/less/visitors/index.js","../src/less/parser/parser-input.js","../src/less/parser/chunker.js","../src/less/functions/function-registry.js","../src/less/tree/atrule-syntax.js","../src/less/parser/parser.js","../src/less/tree/selector.js","../src/less/tree/value.js","../src/less/tree/keyword.js","../src/less/tree/anonymous.js","../src/less/tree/declaration.js","../src/less/tree/debug-info.js","../src/less/tree/comment.js","../src/less/functions/default.js","../src/less/tree/ruleset.js","../src/less/tree/atrule.js","../src/less/tree/detached-ruleset.js","../src/less/tree/unit.js","../src/less/tree/dimension.js","../src/less/tree/operation.js","../src/less/tree/expression.js","../src/less/functions/function-caller.js","../src/less/tree/call.js","../src/less/tree/variable.js","../src/less/tree/property.js","../src/less/tree/attribute.js","../src/less/tree/quoted.js","../src/less/tree/url.js","../src/less/tree/nested-at-rule.js","../src/less/tree/media.js","../src/less/tree/import.js","../src/less/tree/js-eval-node.js","../src/less/tree/javascript.js","../src/less/tree/assignment.js","../src/less/tree/condition.js","../src/less/tree/query-in-parens.js","../src/less/tree/container.js","../src/less/tree/scope.js","../src/less/tree/unicode-descriptor.js","../src/less/tree/negative.js","../src/less/tree/extend.js","../src/less/tree/variable-call.js","../src/less/tree/namespace-value.js","../src/less/tree/starting-style.js","../src/less/tree/mixin-definition.js","../src/less/tree/mixin-call.js","../src/less/tree/index.js","../src/less/environment/abstract-file-manager.js","../src/less/environment/abstract-plugin-loader.js","../src/less/functions/boolean.js","../src/less/functions/color.js","../src/less/functions/color-blending.js","../src/less/functions/data-uri.js","../src/less/functions/list.js","../src/less/functions/math-helper.js","../src/less/functions/math.js","../src/less/functions/number.js","../src/less/functions/string.js","../src/less/functions/types.js","../src/less/functions/style.js","../src/less/functions/index.js","../src/less/functions/svg.js","../src/less/transform-tree.js","../src/less/plugin-manager.js","../node_modules/parse-node-version/index.js","../src/less-browser/file-manager.js","../src/less/index.js","../src/less/parse-tree.js","../src/less/source-map-builder.js","../src/less/source-map-output.js","../src/less/import-manager.js","../src/less/render.js","../src/less/parse.js","../src/less-browser/plugin-loader.js","../src/less-browser/log-listener.js","../src/less-browser/error-reporting.js","../src/less-browser/bootstrap.js","../src/less/default-options.js","../src/less-browser/add-default-options.js","../src/less-browser/index.js","../src/less-browser/cache.js","../src/less-browser/image-size.js"],"sourcesContent":["\nexport function extractId(href) {\n    return href.replace(/^[a-z-]+:\\/+?[^/]+/, '')  // Remove protocol & domain\n        .replace(/[?&]livereload=\\w+/, '')        // Remove LiveReload cachebuster\n        .replace(/^\\//, '')                         // Remove root /\n        .replace(/\\.[a-zA-Z]+$/, '')                // Remove simple extension\n        .replace(/[^.\\w-]+/g, '-')                 // Replace illegal characters\n        .replace(/\\./g, ':');                       // Replace dots with colons(for valid id)\n}\n\nexport function addDataAttr(options, tag) {\n    if (!tag) {return;} // in case of tag is null or undefined\n    for (const opt in tag.dataset) {\n        if (Object.prototype.hasOwnProperty.call(tag.dataset, opt)) {\n            if (opt === 'env' || opt === 'dumpLineNumbers' || opt === 'rootpath' || opt === 'errorReporting') {\n                options[opt] = tag.dataset[opt];\n            } else {\n                try {\n                    options[opt] = JSON.parse(tag.dataset[opt]);\n                }\n                catch (_) {}\n            }\n        }\n    }\n}\n","import * as utils from './utils';\n\nexport default {\n    createCSS: function (document, styles, sheet) {\n        // Strip the query-string\n        const href = sheet.href || '';\n\n        // If there is no title set, use the filename, minus the extension\n        const id = `less:${sheet.title || utils.extractId(href)}`;\n\n        // If this has already been inserted into the DOM, we may need to replace it\n        const oldStyleNode = document.getElementById(id);\n        let keepOldStyleNode = false;\n\n        // Create a new stylesheet node for insertion or (if necessary) replacement\n        const styleNode = document.createElement('style');\n        styleNode.setAttribute('type', 'text/css');\n        if (sheet.media) {\n            styleNode.setAttribute('media', sheet.media);\n        }\n        styleNode.id = id;\n\n        if (!styleNode.styleSheet) {\n            styleNode.appendChild(document.createTextNode(styles));\n\n            // If new contents match contents of oldStyleNode, don't replace oldStyleNode\n            keepOldStyleNode = (oldStyleNode !== null && oldStyleNode.childNodes.length > 0 && styleNode.childNodes.length > 0 &&\n                oldStyleNode.firstChild.nodeValue === styleNode.firstChild.nodeValue);\n        }\n\n        const head = document.getElementsByTagName('head')[0];\n\n        // If there is no oldStyleNode, just append; otherwise, only append if we need\n        // to replace oldStyleNode with an updated stylesheet\n        if (oldStyleNode === null || keepOldStyleNode === false) {\n            const nextEl = sheet && sheet.nextSibling || null;\n            if (nextEl) {\n                nextEl.parentNode.insertBefore(styleNode, nextEl);\n            } else {\n                head.appendChild(styleNode);\n            }\n        }\n        if (oldStyleNode && keepOldStyleNode === false) {\n            oldStyleNode.parentNode.removeChild(oldStyleNode);\n        }\n\n        // For IE.\n        // This needs to happen *after* the style element is added to the DOM, otherwise IE 7 and 8 may crash.\n        // See http://social.msdn.microsoft.com/Forums/en-US/7e081b65-878a-4c22-8e68-c10d39c2ed32/internet-explorer-crashes-appending-style-element-to-head\n        if (styleNode.styleSheet) {\n            try {\n                styleNode.styleSheet.cssText = styles;\n            } catch (e) {\n                throw new Error('Couldn\\'t reassign styleSheet.cssText.');\n            }\n        }\n    },\n    currentScript: function(window) {\n        const document = window.document;\n        return document.currentScript || (() => {\n            const scripts = document.getElementsByTagName('script');\n            return scripts[scripts.length - 1];\n        })();\n    }\n};\n","export default {\n    error: function(msg) {\n        this._fireEvent('error', msg);\n    },\n    warn: function(msg) {\n        this._fireEvent('warn', msg);\n    },\n    info: function(msg) {\n        this._fireEvent('info', msg);\n    },\n    debug: function(msg) {\n        this._fireEvent('debug', msg);\n    },\n    addListener: function(listener) {\n        this._listeners.push(listener);\n    },\n    removeListener: function(listener) {\n        for (let i = 0; i < this._listeners.length; i++) {\n            if (this._listeners[i] === listener) {\n                this._listeners.splice(i, 1);\n                return;\n            }\n        }\n    },\n    _fireEvent: function(type, msg) {\n        for (let i = 0; i < this._listeners.length; i++) {\n            const logFunction = this._listeners[i][type];\n            if (logFunction) {\n                logFunction(msg);\n            }\n        }\n    },\n    _listeners: []\n};\n","/**\n * @todo Document why this abstraction exists, and the relationship between\n *       environment, file managers, and plugin manager\n */\n\nimport logger from '../logger';\n\nclass Environment {\n    constructor(externalEnvironment, fileManagers) {\n        this.fileManagers = fileManagers || [];\n        externalEnvironment = externalEnvironment || {};\n\n        const optionalFunctions = ['encodeBase64', 'mimeLookup', 'charsetLookup', 'getSourceMapGenerator'];\n        const requiredFunctions = [];\n        const functions = requiredFunctions.concat(optionalFunctions);\n\n        for (let i = 0; i < functions.length; i++) {\n            const propName = functions[i];\n            const environmentFunc = externalEnvironment[propName];\n            if (environmentFunc) {\n                this[propName] = environmentFunc.bind(externalEnvironment);\n            } else if (i < requiredFunctions.length) {\n                this.warn(`missing required function in environment - ${propName}`);\n            }\n        }\n    }\n\n    getFileManager(filename, currentDirectory, options, environment, isSync) {\n\n        if (!filename) {\n            logger.warn('getFileManager called with no filename.. Please report this issue. continuing.');\n        }\n        if (currentDirectory === undefined) {\n            logger.warn('getFileManager called with null directory.. Please report this issue. continuing.');\n        }\n\n        let fileManagers = this.fileManagers;\n        if (options.pluginManager) {\n            fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());\n        }\n        for (let i = fileManagers.length - 1; i >= 0 ; i--) {\n            const fileManager = fileManagers[i];\n            if (fileManager[isSync ? 'supportsSync' : 'supports'](filename, currentDirectory, options, environment)) {\n                return fileManager;\n            }\n        }\n        return null;\n    }\n\n    addFileManager(fileManager) {\n        this.fileManagers.push(fileManager);\n    }\n\n    clearFileManagers() {\n        this.fileManagers = [];\n    }\n}\n\nexport default Environment;\n","export default {\n    'aliceblue':'#f0f8ff',\n    'antiquewhite':'#faebd7',\n    'aqua':'#00ffff',\n    'aquamarine':'#7fffd4',\n    'azure':'#f0ffff',\n    'beige':'#f5f5dc',\n    'bisque':'#ffe4c4',\n    'black':'#000000',\n    'blanchedalmond':'#ffebcd',\n    'blue':'#0000ff',\n    'blueviolet':'#8a2be2',\n    'brown':'#a52a2a',\n    'burlywood':'#deb887',\n    'cadetblue':'#5f9ea0',\n    'chartreuse':'#7fff00',\n    'chocolate':'#d2691e',\n    'coral':'#ff7f50',\n    'cornflowerblue':'#6495ed',\n    'cornsilk':'#fff8dc',\n    'crimson':'#dc143c',\n    'cyan':'#00ffff',\n    'darkblue':'#00008b',\n    'darkcyan':'#008b8b',\n    'darkgoldenrod':'#b8860b',\n    'darkgray':'#a9a9a9',\n    'darkgrey':'#a9a9a9',\n    'darkgreen':'#006400',\n    'darkkhaki':'#bdb76b',\n    'darkmagenta':'#8b008b',\n    'darkolivegreen':'#556b2f',\n    'darkorange':'#ff8c00',\n    'darkorchid':'#9932cc',\n    'darkred':'#8b0000',\n    'darksalmon':'#e9967a',\n    'darkseagreen':'#8fbc8f',\n    'darkslateblue':'#483d8b',\n    'darkslategray':'#2f4f4f',\n    'darkslategrey':'#2f4f4f',\n    'darkturquoise':'#00ced1',\n    'darkviolet':'#9400d3',\n    'deeppink':'#ff1493',\n    'deepskyblue':'#00bfff',\n    'dimgray':'#696969',\n    'dimgrey':'#696969',\n    'dodgerblue':'#1e90ff',\n    'firebrick':'#b22222',\n    'floralwhite':'#fffaf0',\n    'forestgreen':'#228b22',\n    'fuchsia':'#ff00ff',\n    'gainsboro':'#dcdcdc',\n    'ghostwhite':'#f8f8ff',\n    'gold':'#ffd700',\n    'goldenrod':'#daa520',\n    'gray':'#808080',\n    'grey':'#808080',\n    'green':'#008000',\n    'greenyellow':'#adff2f',\n    'honeydew':'#f0fff0',\n    'hotpink':'#ff69b4',\n    'indianred':'#cd5c5c',\n    'indigo':'#4b0082',\n    'ivory':'#fffff0',\n    'khaki':'#f0e68c',\n    'lavender':'#e6e6fa',\n    'lavenderblush':'#fff0f5',\n    'lawngreen':'#7cfc00',\n    'lemonchiffon':'#fffacd',\n    'lightblue':'#add8e6',\n    'lightcoral':'#f08080',\n    'lightcyan':'#e0ffff',\n    'lightgoldenrodyellow':'#fafad2',\n    'lightgray':'#d3d3d3',\n    'lightgrey':'#d3d3d3',\n    'lightgreen':'#90ee90',\n    'lightpink':'#ffb6c1',\n    'lightsalmon':'#ffa07a',\n    'lightseagreen':'#20b2aa',\n    'lightskyblue':'#87cefa',\n    'lightslategray':'#778899',\n    'lightslategrey':'#778899',\n    'lightsteelblue':'#b0c4de',\n    'lightyellow':'#ffffe0',\n    'lime':'#00ff00',\n    'limegreen':'#32cd32',\n    'linen':'#faf0e6',\n    'magenta':'#ff00ff',\n    'maroon':'#800000',\n    'mediumaquamarine':'#66cdaa',\n    'mediumblue':'#0000cd',\n    'mediumorchid':'#ba55d3',\n    'mediumpurple':'#9370d8',\n    'mediumseagreen':'#3cb371',\n    'mediumslateblue':'#7b68ee',\n    'mediumspringgreen':'#00fa9a',\n    'mediumturquoise':'#48d1cc',\n    'mediumvioletred':'#c71585',\n    'midnightblue':'#191970',\n    'mintcream':'#f5fffa',\n    'mistyrose':'#ffe4e1',\n    'moccasin':'#ffe4b5',\n    'navajowhite':'#ffdead',\n    'navy':'#000080',\n    'oldlace':'#fdf5e6',\n    'olive':'#808000',\n    'olivedrab':'#6b8e23',\n    'orange':'#ffa500',\n    'orangered':'#ff4500',\n    'orchid':'#da70d6',\n    'palegoldenrod':'#eee8aa',\n    'palegreen':'#98fb98',\n    'paleturquoise':'#afeeee',\n    'palevioletred':'#d87093',\n    'papayawhip':'#ffefd5',\n    'peachpuff':'#ffdab9',\n    'peru':'#cd853f',\n    'pink':'#ffc0cb',\n    'plum':'#dda0dd',\n    'powderblue':'#b0e0e6',\n    'purple':'#800080',\n    'rebeccapurple':'#663399',\n    'red':'#ff0000',\n    'rosybrown':'#bc8f8f',\n    'royalblue':'#4169e1',\n    'saddlebrown':'#8b4513',\n    'salmon':'#fa8072',\n    'sandybrown':'#f4a460',\n    'seagreen':'#2e8b57',\n    'seashell':'#fff5ee',\n    'sienna':'#a0522d',\n    'silver':'#c0c0c0',\n    'skyblue':'#87ceeb',\n    'slateblue':'#6a5acd',\n    'slategray':'#708090',\n    'slategrey':'#708090',\n    'snow':'#fffafa',\n    'springgreen':'#00ff7f',\n    'steelblue':'#4682b4',\n    'tan':'#d2b48c',\n    'teal':'#008080',\n    'thistle':'#d8bfd8',\n    'tomato':'#ff6347',\n    'turquoise':'#40e0d0',\n    'violet':'#ee82ee',\n    'wheat':'#f5deb3',\n    'white':'#ffffff',\n    'whitesmoke':'#f5f5f5',\n    'yellow':'#ffff00',\n    'yellowgreen':'#9acd32'\n};","export default {\n    length: {\n        'm': 1,\n        'cm': 0.01,\n        'mm': 0.001,\n        'in': 0.0254,\n        'px': 0.0254 / 96,\n        'pt': 0.0254 / 72,\n        'pc': 0.0254 / 72 * 12\n    },\n    duration: {\n        's': 1,\n        'ms': 0.001\n    },\n    angle: {\n        'rad': 1 / (2 * Math.PI),\n        'deg': 1 / 360,\n        'grad': 1 / 400,\n        'turn': 1\n    }\n};","import colors from './colors';\nimport unitConversions from './unit-conversions';\n\nexport default { colors, unitConversions };\n","/**\n * The reason why Node is a class and other nodes simply do not extend\n * from Node (since we're transpiling) is due to this issue:\n * \n * @see https://github.com/less/less.js/issues/3434\n */\nclass Node {\n    constructor() {\n        this.parent = null;\n        this.visibilityBlocks = undefined;\n        this.nodeVisible = undefined;\n        this.rootNode = null;\n        this.parsed = null;\n    }\n\n    get currentFileInfo() {\n        return this.fileInfo();\n    }\n\n    get index() {\n        return this.getIndex();\n    }\n\n    setParent(nodes, parent) {\n        function set(node) {\n            if (node && node instanceof Node) {\n                node.parent = parent;\n            }\n        }\n        if (Array.isArray(nodes)) {\n            nodes.forEach(set);\n        }\n        else {\n            set(nodes);\n        }\n    }\n\n    getIndex() {\n        return this._index || (this.parent && this.parent.getIndex()) || 0;\n    }\n\n    fileInfo() {\n        return this._fileInfo || (this.parent && this.parent.fileInfo()) || {};\n    }\n\n    isRulesetLike() { return false; }\n\n    toCSS(context) {\n        const strs = [];\n        this.genCSS(context, {\n            // remove when genCSS has JSDoc types\n            // eslint-disable-next-line no-unused-vars\n            add: function(chunk, fileInfo, index) {\n                strs.push(chunk);\n            },\n            isEmpty: function () {\n                return strs.length === 0;\n            }\n        });\n        return strs.join('');\n    }\n\n    genCSS(context, output) {\n        output.add(this.value);\n    }\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    }\n\n    eval() { return this; }\n\n    _operate(context, op, a, b) {\n        switch (op) {\n            case '+': return a + b;\n            case '-': return a - b;\n            case '*': return a * b;\n            case '/': return a / b;\n        }\n    }\n\n    fround(context, value) {\n        const precision = context && context.numPrecision;\n        // add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999...) are properly rounded:\n        return (precision) ? Number((value + 2e-16).toFixed(precision)) : value;\n    }\n\n    static compare(a, b) {\n        /* returns:\n         -1: a < b\n         0: a = b\n         1: a > b\n         and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\n\n        if ((a.compare) &&\n            // for \"symmetric results\" force toCSS-based comparison\n            // of Quoted or Anonymous if either value is one of those\n            !(b.type === 'Quoted' || b.type === 'Anonymous')) {\n            return a.compare(b);\n        } else if (b.compare) {\n            return -b.compare(a);\n        } else if (a.type !== b.type) {\n            return undefined;\n        }\n\n        a = a.value;\n        b = b.value;\n        if (!Array.isArray(a)) {\n            return a === b ? 0 : undefined;\n        }\n        if (a.length !== b.length) {\n            return undefined;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (Node.compare(a[i], b[i]) !== 0) {\n                return undefined;\n            }\n        }\n        return 0;\n    }\n\n    static numericCompare(a, b) {\n        return a  <  b ? -1\n            : a === b ?  0\n                : a  >  b ?  1 : undefined;\n    }\n\n    // Returns true if this node represents root of ast imported by reference\n    blocksVisibility() {\n        if (this.visibilityBlocks === undefined) {\n            this.visibilityBlocks = 0;\n        }\n        return this.visibilityBlocks !== 0;\n    }\n\n    addVisibilityBlock() {\n        if (this.visibilityBlocks === undefined) {\n            this.visibilityBlocks = 0;\n        }\n        this.visibilityBlocks = this.visibilityBlocks + 1;\n    }\n\n    removeVisibilityBlock() {\n        if (this.visibilityBlocks === undefined) {\n            this.visibilityBlocks = 0;\n        }\n        this.visibilityBlocks = this.visibilityBlocks - 1;\n    }\n\n    // Turns on node visibility - if called node will be shown in output regardless\n    // of whether it comes from import by reference or not\n    ensureVisibility() {\n        this.nodeVisible = true;\n    }\n\n    // Turns off node visibility - if called node will NOT be shown in output regardless\n    // of whether it comes from import by reference or not\n    ensureInvisibility() {\n        this.nodeVisible = false;\n    }\n\n    // return values:\n    // false - the node must not be visible\n    // true - the node must be visible\n    // undefined or null - the node has the same visibility as its parent\n    isVisible() {\n        return this.nodeVisible;\n    }\n\n    visibilityInfo() {\n        return {\n            visibilityBlocks: this.visibilityBlocks,\n            nodeVisible: this.nodeVisible\n        };\n    }\n\n    copyVisibilityInfo(info) {\n        if (!info) {\n            return;\n        }\n        this.visibilityBlocks = info.visibilityBlocks;\n        this.nodeVisible = info.nodeVisible;\n    }\n}\n\nexport default Node;\n","import Node from './node';\nimport colors from '../data/colors';\n\n//\n// RGB Colors - #ff0014, #eee\n//\nconst Color = function(rgb, a, originalForm) {\n    const self = this;\n    //\n    // The end goal here, is to parse the arguments\n    // into an integer triplet, such as `128, 255, 0`\n    //\n    // This facilitates operations and conversions.\n    //\n    if (Array.isArray(rgb)) {\n        this.rgb = rgb;\n    } else if (rgb.length >= 6) {\n        this.rgb = [];\n        rgb.match(/.{2}/g).map(function (c, i) {\n            if (i < 3) {\n                self.rgb.push(parseInt(c, 16));\n            } else {\n                self.alpha = (parseInt(c, 16)) / 255;\n            }\n        });\n    } else {\n        this.rgb = [];\n        rgb.split('').map(function (c, i) {\n            if (i < 3) {\n                self.rgb.push(parseInt(c + c, 16));\n            } else {\n                self.alpha = (parseInt(c + c, 16)) / 255;\n            }\n        });\n    }\n    this.alpha = this.alpha || (typeof a === 'number' ? a : 1);\n    if (typeof originalForm !== 'undefined') {\n        this.value = originalForm;\n    }\n}\n\nColor.prototype = Object.assign(new Node(), {\n    type: 'Color',\n\n    luma() {\n        let r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255;\n\n        r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);\n        g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);\n        b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);\n\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n    },\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context));\n    },\n\n    toCSS(context, doNotCompress) {\n        const compress = context && context.compress && !doNotCompress;\n        let color;\n        let alpha;\n        let colorFunction;\n        let args = [];\n\n        // `value` is set if this color was originally\n        // converted from a named color string so we need\n        // to respect this and try to output named color too.\n        alpha = this.fround(context, this.alpha);\n\n        if (this.value) {\n            if (this.value.indexOf('rgb') === 0) {\n                if (alpha < 1) {\n                    colorFunction = 'rgba';\n                }\n            } else if (this.value.indexOf('hsl') === 0) {\n                if (alpha < 1) {\n                    colorFunction = 'hsla';\n                } else {\n                    colorFunction = 'hsl';\n                }\n            } else {\n                return this.value;\n            }\n        } else {\n            if (alpha < 1) {\n                colorFunction = 'rgba';\n            }\n        }\n\n        switch (colorFunction) {\n            case 'rgba':\n                args = this.rgb.map(function (c) {\n                    return clamp(Math.round(c), 255);\n                }).concat(clamp(alpha, 1));\n                break;\n            case 'hsla':\n                args.push(clamp(alpha, 1));\n            // eslint-disable-next-line no-fallthrough\n            case 'hsl':\n                color = this.toHSL();\n                args = [\n                    this.fround(context, color.h),\n                    `${this.fround(context, color.s * 100)}%`,\n                    `${this.fround(context, color.l * 100)}%`\n                ].concat(args);\n        }\n\n        if (colorFunction) {\n            // Values are capped between `0` and `255`, rounded and zero-padded.\n            return `${colorFunction}(${args.join(`,${compress ? '' : ' '}`)})`;\n        }\n\n        color = this.toRGB();\n\n        if (compress) {\n            const splitcolor = color.split('');\n\n            // Convert color to short format\n            if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {\n                color = `#${splitcolor[1]}${splitcolor[3]}${splitcolor[5]}`;\n            }\n        }\n\n        return color;\n    },\n\n    //\n    // Operations have to be done per-channel, if not,\n    // channels will spill onto each other. Once we have\n    // our result, in the form of an integer triplet,\n    // we create a new Color node to hold the result.\n    //\n    operate(context, op, other) {\n        const rgb = new Array(3);\n        const alpha = this.alpha * (1 - other.alpha) + other.alpha;\n        for (let c = 0; c < 3; c++) {\n            rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);\n        }\n        return new Color(rgb, alpha);\n    },\n\n    toRGB() {\n        return toHex(this.rgb);\n    },\n\n    toHSL() {\n        const r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255, a = this.alpha;\n\n        const max = Math.max(r, g, b), min = Math.min(r, g, b);\n        let h;\n        let s;\n        const l = (max + min) / 2;\n        const d = max - min;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2;               break;\n                case b: h = (r - g) / d + 4;               break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s, l, a };\n    },\n\n    // Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n    toHSV() {\n        const r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255, a = this.alpha;\n\n        const max = Math.max(r, g, b), min = Math.min(r, g, b);\n        let h;\n        let s;\n        const v = max;\n\n        const d = max - min;\n        if (max === 0) {\n            s = 0;\n        } else {\n            s = d / max;\n        }\n\n        if (max === min) {\n            h = 0;\n        } else {\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s, v, a };\n    },\n\n    toARGB() {\n        return toHex([this.alpha * 255].concat(this.rgb));\n    },\n\n    compare(x) {\n        return (x.rgb &&\n            x.rgb[0] === this.rgb[0] &&\n            x.rgb[1] === this.rgb[1] &&\n            x.rgb[2] === this.rgb[2] &&\n            x.alpha  === this.alpha) ? 0 : undefined;\n    }\n});\n\nColor.fromKeyword = function(keyword) {\n    let c;\n    const key = keyword.toLowerCase();\n    // eslint-disable-next-line no-prototype-builtins\n    if (colors.hasOwnProperty(key)) {\n        c = new Color(colors[key].slice(1));\n    }\n    else if (key === 'transparent') {\n        c = new Color([0, 0, 0], 0);\n    }\n\n    if (c) {\n        c.value = keyword;\n        return c;\n    }\n};\n\nfunction clamp(v, max) {\n    return Math.min(Math.max(v, 0), max);\n}\n\nfunction toHex(v) {\n    return `#${v.map(function (c) {\n        c = clamp(Math.round(c), 255);\n        return (c < 16 ? '0' : '') + c.toString(16);\n    }).join('')}`;\n}\n\nexport default Color;\n","import Node from './node';\n\nconst Paren = function(node) {\n    this.value = node;\n};\n\nParen.prototype = Object.assign(new Node(), {\n    type: 'Paren',\n\n    genCSS(context, output) {\n        output.add('(');\n        this.value.genCSS(context, output);\n        output.add(')');\n    },\n\n    eval(context) {\n        return new Paren(this.value.eval(context));\n    }\n});\n\nexport default Paren;\n","import Node from './node';\nconst _noSpaceCombinators = {\n    '': true,\n    ' ': true,\n    '|': true\n};\n\nconst Combinator = function(value) {\n    if (value === ' ') {\n        this.value = ' ';\n        this.emptyOrWhitespace = true;\n    } else {\n        this.value = value ? value.trim() : '';\n        this.emptyOrWhitespace = this.value === '';\n    }\n}\n\nCombinator.prototype = Object.assign(new Node(), {\n    type: 'Combinator',\n\n    genCSS(context, output) {\n        const spaceOrEmpty = (context.compress || _noSpaceCombinators[this.value]) ? '' : ' ';\n        output.add(spaceOrEmpty + this.value + spaceOrEmpty);\n    }\n});\n\nexport default Combinator;\n","import Node from './node';\nimport Paren from './paren';\nimport Combinator from './combinator';\n\nconst Element = function(combinator, value, isVariable, index, currentFileInfo, visibilityInfo) {\n    this.combinator = combinator instanceof Combinator ?\n        combinator : new Combinator(combinator);\n\n    if (typeof value === 'string') {\n        this.value = value.trim();\n    } else if (value) {\n        this.value = value;\n    } else {\n        this.value = '';\n    }\n    this.isVariable = isVariable;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.setParent(this.combinator, this);\n}\n\nElement.prototype = Object.assign(new Node(), {\n    type: 'Element',\n\n    accept(visitor) {\n        const value = this.value;\n        this.combinator = visitor.visit(this.combinator);\n        if (typeof value === 'object') {\n            this.value = visitor.visit(value);\n        }\n    },\n\n    eval(context) {\n        return new Element(this.combinator,\n            this.value.eval ? this.value.eval(context) : this.value,\n            this.isVariable,\n            this.getIndex(),\n            this.fileInfo(), this.visibilityInfo());\n    },\n\n    clone() {\n        return new Element(this.combinator,\n            this.value,\n            this.isVariable,\n            this.getIndex(),\n            this.fileInfo(), this.visibilityInfo());\n    },\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context), this.fileInfo(), this.getIndex());\n    },\n\n    toCSS(context) {\n        context = context || {};\n        let value = this.value;\n        const firstSelector = context.firstSelector;\n        if (value instanceof Paren) {\n            // selector in parens should not be affected by outer selector\n            // flags (breaks only interpolated selectors - see #1973)\n            context.firstSelector = true;\n        }\n        value = value.toCSS ? value.toCSS(context) : value;\n        context.firstSelector = firstSelector;\n        if (value === '' && this.combinator.value.charAt(0) === '&') {\n            return '';\n        } else {\n            return this.combinator.toCSS(context) + value;\n        }\n    }\n});\n\nexport default Element;\n","\nexport const Math = {\n    ALWAYS: 0,\n    PARENS_DIVISION: 1,\n    PARENS: 2\n    // removed - STRICT_LEGACY: 3\n};\n\nexport const RewriteUrls = {\n    OFF: 0,\n    LOCAL: 1,\n    ALL: 2\n};","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","/**\r\n * Returns the object type of the given payload\r\n *\r\n * @param {*} payload\r\n * @returns {string}\r\n */\r\nfunction getType(payload) {\r\n    return Object.prototype.toString.call(payload).slice(8, -1);\r\n}\r\n/**\r\n * Returns whether the payload is undefined\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\r\nfunction isUndefined(payload) {\r\n    return getType(payload) === 'Undefined';\r\n}\r\n/**\r\n * Returns whether the payload is null\r\n *\r\n * @param {*} payload\r\n * @returns {payload is null}\r\n */\r\nfunction isNull(payload) {\r\n    return getType(payload) === 'Null';\r\n}\r\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is PlainObject}\r\n */\r\nfunction isPlainObject(payload) {\r\n    if (getType(payload) !== 'Object')\r\n        return false;\r\n    return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\r\n}\r\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is PlainObject}\r\n */\r\nfunction isObject(payload) {\r\n    return isPlainObject(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is { [K in any]: never }}\r\n */\r\nfunction isEmptyObject(payload) {\r\n    return isPlainObject(payload) && Object.keys(payload).length === 0;\r\n}\r\n/**\r\n * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is PlainObject}\r\n */\r\nfunction isFullObject(payload) {\r\n    return isPlainObject(payload) && Object.keys(payload).length > 0;\r\n}\r\n/**\r\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is PlainObject}\r\n */\r\nfunction isAnyObject(payload) {\r\n    return getType(payload) === 'Object';\r\n}\r\n/**\r\n * Returns whether the payload is an object like a type passed in < >\r\n *\r\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\r\n *\r\n * @template T this must be passed in < >\r\n * @param {*} payload\r\n * @returns {payload is T}\r\n */\r\nfunction isObjectLike(payload) {\r\n    return isAnyObject(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a function (regular or async)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is AnyFunction}\r\n */\r\nfunction isFunction(payload) {\r\n    return typeof payload === 'function';\r\n}\r\n/**\r\n * Returns whether the payload is an array\r\n *\r\n * @param {any} payload\r\n * @returns {payload is any[]}\r\n */\r\nfunction isArray(payload) {\r\n    return getType(payload) === 'Array';\r\n}\r\n/**\r\n * Returns whether the payload is a an array with at least 1 item\r\n *\r\n * @param {*} payload\r\n * @returns {payload is any[]}\r\n */\r\nfunction isFullArray(payload) {\r\n    return isArray(payload) && payload.length > 0;\r\n}\r\n/**\r\n * Returns whether the payload is a an empty array\r\n *\r\n * @param {*} payload\r\n * @returns {payload is []}\r\n */\r\nfunction isEmptyArray(payload) {\r\n    return isArray(payload) && payload.length === 0;\r\n}\r\n/**\r\n * Returns whether the payload is a string\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isString(payload) {\r\n    return getType(payload) === 'String';\r\n}\r\n/**\r\n * Returns whether the payload is a string, BUT returns false for ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isFullString(payload) {\r\n    return isString(payload) && payload !== '';\r\n}\r\n/**\r\n * Returns whether the payload is ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isEmptyString(payload) {\r\n    return payload === '';\r\n}\r\n/**\r\n * Returns whether the payload is a number (but not NaN)\r\n *\r\n * This will return `false` for `NaN`!!\r\n *\r\n * @param {*} payload\r\n * @returns {payload is number}\r\n */\r\nfunction isNumber(payload) {\r\n    return getType(payload) === 'Number' && !isNaN(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a boolean\r\n *\r\n * @param {*} payload\r\n * @returns {payload is boolean}\r\n */\r\nfunction isBoolean(payload) {\r\n    return getType(payload) === 'Boolean';\r\n}\r\n/**\r\n * Returns whether the payload is a regular expression (RegExp)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is RegExp}\r\n */\r\nfunction isRegExp(payload) {\r\n    return getType(payload) === 'RegExp';\r\n}\r\n/**\r\n * Returns whether the payload is a Map\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Map<any, any>}\r\n */\r\nfunction isMap(payload) {\r\n    return getType(payload) === 'Map';\r\n}\r\n/**\r\n * Returns whether the payload is a WeakMap\r\n *\r\n * @param {*} payload\r\n * @returns {payload is WeakMap<any, any>}\r\n */\r\nfunction isWeakMap(payload) {\r\n    return getType(payload) === 'WeakMap';\r\n}\r\n/**\r\n * Returns whether the payload is a Set\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Set<any>}\r\n */\r\nfunction isSet(payload) {\r\n    return getType(payload) === 'Set';\r\n}\r\n/**\r\n * Returns whether the payload is a WeakSet\r\n *\r\n * @param {*} payload\r\n * @returns {payload is WeakSet<any>}\r\n */\r\nfunction isWeakSet(payload) {\r\n    return getType(payload) === 'WeakSet';\r\n}\r\n/**\r\n * Returns whether the payload is a Symbol\r\n *\r\n * @param {*} payload\r\n * @returns {payload is symbol}\r\n */\r\nfunction isSymbol(payload) {\r\n    return getType(payload) === 'Symbol';\r\n}\r\n/**\r\n * Returns whether the payload is a Date, and that the date is valid\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Date}\r\n */\r\nfunction isDate(payload) {\r\n    return getType(payload) === 'Date' && !isNaN(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a Blob\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Blob}\r\n */\r\nfunction isBlob(payload) {\r\n    return getType(payload) === 'Blob';\r\n}\r\n/**\r\n * Returns whether the payload is a File\r\n *\r\n * @param {*} payload\r\n * @returns {payload is File}\r\n */\r\nfunction isFile(payload) {\r\n    return getType(payload) === 'File';\r\n}\r\n/**\r\n * Returns whether the payload is a Promise\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Promise<any>}\r\n */\r\nfunction isPromise(payload) {\r\n    return getType(payload) === 'Promise';\r\n}\r\n/**\r\n * Returns whether the payload is an Error\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Error}\r\n */\r\nfunction isError(payload) {\r\n    return getType(payload) === 'Error';\r\n}\r\n/**\r\n * Returns whether the payload is literally the value `NaN` (it's `NaN` and also a `number`)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is typeof NaN}\r\n */\r\nfunction isNaNValue(payload) {\r\n    return getType(payload) === 'Number' && isNaN(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is boolean | null | undefined | number | string | symbol)}\r\n */\r\nfunction isPrimitive(payload) {\r\n    return (isBoolean(payload) ||\r\n        isNull(payload) ||\r\n        isUndefined(payload) ||\r\n        isNumber(payload) ||\r\n        isString(payload) ||\r\n        isSymbol(payload));\r\n}\r\n/**\r\n * Returns true whether the payload is null or undefined\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is null | undefined)}\r\n */\r\nvar isNullOrUndefined = isOneOf(isNull, isUndefined);\r\nfunction isOneOf(a, b, c, d, e) {\r\n    return function (value) {\r\n        return a(value) || b(value) || (!!c && c(value)) || (!!d && d(value)) || (!!e && e(value));\r\n    };\r\n}\r\n/**\r\n * Does a generic check to check that the given payload is of a given type.\r\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\r\n * It will, however, differentiate between object and null\r\n *\r\n * @template T\r\n * @param {*} payload\r\n * @param {T} type\r\n * @throws {TypeError} Will throw type error if type is an invalid type\r\n * @returns {payload is T}\r\n */\r\nfunction isType(payload, type) {\r\n    if (!(type instanceof Function)) {\r\n        throw new TypeError('Type must be a function');\r\n    }\r\n    if (!Object.prototype.hasOwnProperty.call(type, 'prototype')) {\r\n        throw new TypeError('Type is not a class');\r\n    }\r\n    // Classes usually have names (as functions usually have names)\r\n    var name = type.name;\r\n    return getType(payload) === name || Boolean(payload && payload.constructor === type);\r\n}\n\nexport { getType, isAnyObject, isArray, isBlob, isBoolean, isDate, isEmptyArray, isEmptyObject, isEmptyString, isError, isFile, isFullArray, isFullObject, isFullString, isFunction, isMap, isNaNValue, isNull, isNullOrUndefined, isNumber, isObject, isObjectLike, isOneOf, isPlainObject, isPrimitive, isPromise, isRegExp, isSet, isString, isSymbol, isType, isUndefined, isWeakMap, isWeakSet };\n","import { isArray, isPlainObject } from 'is-what';\n\nfunction assignProp(carry, key, newVal, originalObject, includeNonenumerable) {\r\n    const propType = {}.propertyIsEnumerable.call(originalObject, key)\r\n        ? 'enumerable'\r\n        : 'nonenumerable';\r\n    if (propType === 'enumerable')\r\n        carry[key] = newVal;\r\n    if (includeNonenumerable && propType === 'nonenumerable') {\r\n        Object.defineProperty(carry, key, {\r\n            value: newVal,\r\n            enumerable: false,\r\n            writable: true,\r\n            configurable: true,\r\n        });\r\n    }\r\n}\r\n/**\r\n * Copy (clone) an object and all its props recursively to get rid of any prop referenced of the original object. Arrays are also cloned, however objects inside arrays are still linked.\r\n *\r\n * @export\r\n * @template T\r\n * @param {T} target Target can be anything\r\n * @param {Options} [options = {}] Options can be `props` or `nonenumerable`\r\n * @returns {T} the target with replaced values\r\n * @export\r\n */\r\nfunction copy(target, options = {}) {\r\n    if (isArray(target)) {\r\n        return target.map((item) => copy(item, options));\r\n    }\r\n    if (!isPlainObject(target)) {\r\n        return target;\r\n    }\r\n    const props = Object.getOwnPropertyNames(target);\r\n    const symbols = Object.getOwnPropertySymbols(target);\r\n    return [...props, ...symbols].reduce((carry, key) => {\r\n        if (isArray(options.props) && !options.props.includes(key)) {\r\n            return carry;\r\n        }\r\n        const val = target[key];\r\n        const newVal = copy(val, options);\r\n        assignProp(carry, key, newVal, target, options.nonenumerable);\r\n        return carry;\r\n    }, {});\r\n}\n\nexport { copy };\n","/* jshint proto: true */\nimport * as Constants from './constants';\nimport { copy } from 'copy-anything';\n\nexport function getLocation(index, inputStream) {\n    let n = index + 1;\n    let line = null;\n    let column = -1;\n\n    while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\n        column++;\n    }\n\n    if (typeof index === 'number') {\n        line = (inputStream.slice(0, index).match(/\\n/g) || '').length;\n    }\n\n    return {\n        line,\n        column\n    };\n}\n\nexport function copyArray(arr) {\n    let i;\n    const length = arr.length;\n    const copy = new Array(length);\n\n    for (i = 0; i < length; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\n\nexport function clone(obj) {\n    const cloned = {};\n    for (const prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n            cloned[prop] = obj[prop];\n        }\n    }\n    return cloned;\n}\n\nexport function defaults(obj1, obj2) {\n    let newObj = obj2 || {};\n    if (!obj2._defaults) {\n        newObj = {};\n        const defaults = copy(obj1);\n        newObj._defaults = defaults;\n        const cloned = obj2 ? copy(obj2) : {};\n        Object.assign(newObj, defaults, cloned);\n    }\n    return newObj;\n}\n\nexport function copyOptions(obj1, obj2) {\n    if (obj2 && obj2._defaults) {\n        return obj2;\n    }\n    const opts = defaults(obj1, obj2);\n    if (opts.strictMath) {\n        opts.math = Constants.Math.PARENS;\n    }\n    // Back compat with changed relativeUrls option\n    if (opts.relativeUrls) {\n        opts.rewriteUrls = Constants.RewriteUrls.ALL;\n    }\n    if (typeof opts.math === 'string') {\n        switch (opts.math.toLowerCase()) {\n            case 'always':\n                opts.math = Constants.Math.ALWAYS;\n                break;\n            case 'parens-division':\n                opts.math = Constants.Math.PARENS_DIVISION;\n                break;\n            case 'strict':\n            case 'parens':\n                opts.math = Constants.Math.PARENS;\n                break;\n            default:\n                opts.math = Constants.Math.PARENS;\n        }\n    }\n    if (typeof opts.rewriteUrls === 'string') {\n        switch (opts.rewriteUrls.toLowerCase()) {\n            case 'off':\n                opts.rewriteUrls = Constants.RewriteUrls.OFF;\n                break;\n            case 'local':\n                opts.rewriteUrls = Constants.RewriteUrls.LOCAL;\n                break;\n            case 'all':\n                opts.rewriteUrls = Constants.RewriteUrls.ALL;\n                break;\n        }\n    }\n    return opts;\n}\n\nexport function merge(obj1, obj2) {\n    for (const prop in obj2) {\n        if (Object.prototype.hasOwnProperty.call(obj2, prop)) {\n            obj1[prop] = obj2[prop];\n        }\n    }\n    return obj1;\n}\n\nexport function flattenArray(arr, result = []) {\n    for (let i = 0, length = arr.length; i < length; i++) {\n        const value = arr[i];\n        if (Array.isArray(value)) {\n            flattenArray(value, result);\n        } else {\n            if (value !== undefined) {\n                result.push(value);\n            }\n        }\n    }\n    return result;\n}\n\nexport function isNullOrUndefined(val) {\n    return val === null || val === undefined\n}","import * as utils from './utils';\n\nconst anonymousFunc = /(<anonymous>|Function):(\\d+):(\\d+)/;\n\n/**\n * This is a centralized class of any error that could be thrown internally (mostly by the parser).\n * Besides standard .message it keeps some additional data like a path to the file where the error\n * occurred along with line and column numbers.\n *\n * @class\n * @extends Error\n * @type {module.LessError}\n *\n * @prop {string} type\n * @prop {string} filename\n * @prop {number} index\n * @prop {number} line\n * @prop {number} column\n * @prop {number} callLine\n * @prop {number} callExtract\n * @prop {string[]} extract\n *\n * @param {Object} e              - An error object to wrap around or just a descriptive object\n * @param {Object} fileContentMap - An object with file contents in 'contents' property (like importManager) @todo - move to fileManager?\n * @param {string} [currentFilename]\n */\nconst LessError = function(e, fileContentMap, currentFilename) {\n    Error.call(this);\n\n    const filename = e.filename || currentFilename;\n\n    this.message = e.message;\n    this.stack = e.stack;\n\n    if (fileContentMap && filename) {\n        const input = fileContentMap.contents[filename];\n        const loc = utils.getLocation(e.index, input);\n        var line = loc.line;\n        const col  = loc.column;\n        const callLine = e.call && utils.getLocation(e.call, input).line;\n        const lines = input ? input.split('\\n') : '';\n\n        this.type = e.type || 'Syntax';\n        this.filename = filename;\n        this.index = e.index;\n        this.line = typeof line === 'number' ? line + 1 : null;\n        this.column = col;\n\n        if (!this.line && this.stack) {\n            const found = this.stack.match(anonymousFunc);\n\n            /**\n             * We have to figure out how this environment stringifies anonymous functions\n             * so we can correctly map plugin errors.\n             * \n             * Note, in Node 8, the output of anonymous funcs varied based on parameters\n             * being present or not, so we inject dummy params.\n             */\n            const func = new Function('a', 'throw new Error()');\n            let lineAdjust = 0;\n            try {\n                func();\n            } catch (e) {\n                const match = e.stack.match(anonymousFunc);\n                lineAdjust = 1 - parseInt(match[2]);\n            }\n\n            if (found) {\n                if (found[2]) {\n                    this.line = parseInt(found[2]) + lineAdjust;\n                }\n                if (found[3]) {\n                    this.column = parseInt(found[3]);\n                }\n            }\n        }\n\n        this.callLine = callLine + 1;\n        this.callExtract = lines[callLine];\n\n        this.extract = [\n            lines[this.line - 2],\n            lines[this.line - 1],\n            lines[this.line]\n        ];\n    }\n\n};\n\nif (typeof Object.create === 'undefined') {\n    const F = function () {};\n    F.prototype = Error.prototype;\n    LessError.prototype = new F();\n} else {\n    LessError.prototype = Object.create(Error.prototype);\n}\n\nLessError.prototype.constructor = LessError;\n\n/**\n * An overridden version of the default Object.prototype.toString\n * which uses additional information to create a helpful message.\n *\n * @param {Object} options\n * @returns {string}\n */\nLessError.prototype.toString = function(options) {\n    options = options || {};\n\n    let message = '';\n    const extract = this.extract || [];\n    let error = [];\n    let stylize = function (str) { return str; };\n    if (options.stylize) {\n        const type = typeof options.stylize;\n        if (type !== 'function') {\n            throw Error(`options.stylize should be a function, got a ${type}!`);\n        }\n        stylize = options.stylize;\n    }\n\n    if (this.line !== null) {\n        if (typeof extract[0] === 'string') {\n            error.push(stylize(`${this.line - 1} ${extract[0]}`, 'grey'));\n        }\n\n        if (typeof extract[1] === 'string') {\n            let errorTxt = `${this.line} `;\n            if (extract[1]) {\n                errorTxt += extract[1].slice(0, this.column) +\n                    stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') +\n                        extract[1].slice(this.column + 1), 'red'), 'inverse');\n            }\n            error.push(errorTxt);\n        }\n\n        if (typeof extract[2] === 'string') {\n            error.push(stylize(`${this.line + 1} ${extract[2]}`, 'grey'));\n        }\n        error = `${error.join('\\n') + stylize('', 'reset')}\\n`;\n    }\n\n    message += stylize(`${this.type}Error: ${this.message}`, 'red');\n    if (this.filename) {\n        message += stylize(' in ', 'red') + this.filename;\n    }\n    if (this.line) {\n        message += stylize(` on line ${this.line}, column ${this.column + 1}:`, 'grey');\n    }\n\n    message += `\\n${error}`;\n\n    if (this.callLine) {\n        message += `${stylize('from ', 'red') + (this.filename || '')}/n`;\n        message += `${stylize(this.callLine, 'grey')} ${this.callExtract}/n`;\n    }\n\n    return message;\n};\n\nexport default LessError;","import tree from '../tree';\n\nconst _visitArgs = { visitDeeper: true };\nlet _hasIndexed = false;\n\nfunction _noop(node) {\n    return node;\n}\n\nfunction indexNodeTypes(parent, ticker) {\n    // add .typeIndex to tree node types for lookup table\n    let key, child;\n    for (key in parent) { \n        /* eslint guard-for-in: 0 */\n        child = parent[key];\n        switch (typeof child) {\n            case 'function':\n                // ignore bound functions directly on tree which do not have a prototype\n                // or aren't nodes\n                if (child.prototype && child.prototype.type) {\n                    child.prototype.typeIndex = ticker++;\n                }\n                break;\n            case 'object':\n                ticker = indexNodeTypes(child, ticker);\n                break;\n        \n        }\n    }\n    return ticker;\n}\n\nclass Visitor {\n    constructor(implementation) {\n        this._implementation = implementation;\n        this._visitInCache = {};\n        this._visitOutCache = {};\n\n        if (!_hasIndexed) {\n            indexNodeTypes(tree, 1);\n            _hasIndexed = true;\n        }\n    }\n\n    visit(node, syntaxOptions) {\n        if (!node) {\n            return node;\n        }\n\n        const nodeTypeIndex = node.typeIndex;\n        if (!nodeTypeIndex) {\n            // MixinCall args aren't a node type?\n            if (node.value && node.value.typeIndex) {\n                this.visit(node.value);\n            }\n            return node;\n        }\n\n        const impl = this._implementation;\n        let func = this._visitInCache[nodeTypeIndex];\n        let funcOut = this._visitOutCache[nodeTypeIndex];\n        let visitArgs = _visitArgs;\n        if (syntaxOptions) {\n            visitArgs = { ...syntaxOptions, ...visitArgs };\n        } else if (this._visitArgs) {\n            visitArgs = { ...this._visitArgs, ...visitArgs };\n        }\n        this._visitArgs = visitArgs;\n        let fnName;\n\n        visitArgs.visitDeeper = true;\n\n        if (!func) {\n            fnName = `visit${node.type}`;\n            func = impl[fnName] || _noop;\n            funcOut = impl[`${fnName}Out`] || _noop;\n            this._visitInCache[nodeTypeIndex] = func;\n            this._visitOutCache[nodeTypeIndex] = funcOut;\n        }\n\n        if (func !== _noop) {\n            const newNode = func.call(impl, node, visitArgs);\n            if (node && impl.isReplacing) {\n                node = newNode;\n            }\n        }\n\n        if (visitArgs.visitDeeper && node) {\n            if (node.length) {\n                for (let i = 0, cnt = node.length; i < cnt; i++) {\n                    if (node[i].accept) {\n                        node[i].accept(this);\n                    }\n                }\n            } else if (node.accept) {\n                node.accept(this);\n            }\n        }\n\n        if (funcOut != _noop) {\n            funcOut.call(impl, node);\n        }\n\n        return node;\n    }\n\n    visitArray(nodes, nonReplacing, syntaxOptions) {\n        if (!nodes) {\n            return nodes;\n        }\n\n        const cnt = nodes.length;\n        let i;\n\n        // Non-replacing\n        if (nonReplacing || !this._implementation.isReplacing) {\n            for (i = 0; i < cnt; i++) {\n                this.visit(nodes[i], syntaxOptions);\n            }\n            return nodes;\n        }\n\n        // Replacing\n        const out = [];\n        for (i = 0; i < cnt; i++) {\n            const evald = this.visit(nodes[i]);\n            if (evald === undefined) { continue; }\n            if (!evald.splice) {\n                out.push(evald);\n            } else if (evald.length) {\n                this.flatten(evald, out);\n            }\n        }\n        return out;\n    }\n\n    flatten(arr, out) {\n        if (!out) {\n            out = [];\n        }\n\n        let cnt, i, item, nestedCnt, j, nestedItem;\n\n        for (i = 0, cnt = arr.length; i < cnt; i++) {\n            item = arr[i];\n            if (item === undefined) {\n                continue;\n            }\n            if (!item.splice) {\n                out.push(item);\n                continue;\n            }\n\n            for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n                nestedItem = item[j];\n                if (nestedItem === undefined) {\n                    continue;\n                }\n                if (!nestedItem.splice) {\n                    out.push(nestedItem);\n                } else if (nestedItem.length) {\n                    this.flatten(nestedItem, out);\n                }\n            }\n        }\n\n        return out;\n    }\n}\n\nexport default Visitor;\n","const contexts = {};\nexport default contexts;\nimport * as Constants from './constants';\n\nconst copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {\n    if (!original) { return; }\n\n    for (let i = 0; i < propertiesToCopy.length; i++) {\n        if (Object.prototype.hasOwnProperty.call(original, propertiesToCopy[i])) {\n            destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];\n        }\n    }\n};\n\n/*\n parse is used whilst parsing\n */\nconst parseCopyProperties = [\n    // options\n    'paths',            // option - unmodified - paths to search for imports on\n    'rewriteUrls',      // option - whether to adjust URL's to be relative\n    'rootpath',         // option - rootpath to append to URL's\n    'strictImports',    // option -\n    'insecure',         // option - whether to allow imports from insecure ssl hosts\n    'dumpLineNumbers',  // option - whether to dump line numbers\n    'compress',         // option - whether to compress\n    'syncImport',       // option - whether to import synchronously\n    'chunkInput',       // option - whether to chunk input. more performant but causes parse issues.\n    'mime',             // browser only - mime type for sheet import\n    'useFileCache',     // browser only - whether to use the per file session cache\n    // context\n    'processImports',   // option & context - whether to process imports. if false then imports will not be imported.\n    // Used by the import manager to stop multiple import visitors being created.\n    'pluginManager'     // Used as the plugin manager for the session\n];\n\ncontexts.Parse = function(options) {\n    copyFromOriginal(options, this, parseCopyProperties);\n\n    if (typeof this.paths === 'string') { this.paths = [this.paths]; }\n};\n\nconst evalCopyProperties = [\n    'paths',             // additional include paths\n    'compress',          // whether to compress\n    'math',              // whether math has to be within parenthesis\n    'strictUnits',       // whether units need to evaluate correctly\n    'sourceMap',         // whether to output a source map\n    'importMultiple',    // whether we are currently importing multiple copies\n    'urlArgs',           // whether to add args into url tokens\n    'javascriptEnabled', // option - whether Inline JavaScript is enabled. if undefined, defaults to false\n    'pluginManager',     // Used as the plugin manager for the session\n    'importantScope',    // used to bubble up !important statements\n    'rewriteUrls'        // option - whether to adjust URL's to be relative\n];\n\ncontexts.Eval = function(options, frames) {\n    copyFromOriginal(options, this, evalCopyProperties);\n\n    if (typeof this.paths === 'string') { this.paths = [this.paths]; }\n\n    this.frames = frames || [];\n    this.importantScope = this.importantScope || [];\n};\n\ncontexts.Eval.prototype.enterCalc = function () {\n    if (!this.calcStack) {\n        this.calcStack = [];\n    }\n    this.calcStack.push(true);\n    this.inCalc = true;\n};\n\ncontexts.Eval.prototype.exitCalc = function () {\n    this.calcStack.pop();\n    if (!this.calcStack.length) {\n        this.inCalc = false;\n    }\n};\n\ncontexts.Eval.prototype.inParenthesis = function () {\n    if (!this.parensStack) {\n        this.parensStack = [];\n    }\n    this.parensStack.push(true);\n};\n\ncontexts.Eval.prototype.outOfParenthesis = function () {\n    this.parensStack.pop();\n};\n\ncontexts.Eval.prototype.inCalc = false;\ncontexts.Eval.prototype.mathOn = true;\ncontexts.Eval.prototype.isMathOn = function (op) {\n    if (!this.mathOn) {\n        return false;\n    }\n    if (op === '/' && this.math !== Constants.Math.ALWAYS && (!this.parensStack || !this.parensStack.length)) {\n        return false;\n    }\n    if (this.math > Constants.Math.PARENS_DIVISION) {\n        return this.parensStack && this.parensStack.length;\n    }\n    return true;\n};\n\ncontexts.Eval.prototype.pathRequiresRewrite = function (path) {\n    const isRelative = this.rewriteUrls === Constants.RewriteUrls.LOCAL ? isPathLocalRelative : isPathRelative;\n\n    return isRelative(path);\n};\n\ncontexts.Eval.prototype.rewritePath = function (path, rootpath) {\n    let newPath;\n\n    rootpath = rootpath || '';\n    newPath = this.normalizePath(rootpath + path);\n\n    // If a path was explicit relative and the rootpath was not an absolute path\n    // we must ensure that the new path is also explicit relative.\n    if (isPathLocalRelative(path) &&\n        isPathRelative(rootpath) &&\n        isPathLocalRelative(newPath) === false) {\n        newPath = `./${newPath}`;\n    }\n\n    return newPath;\n};\n\ncontexts.Eval.prototype.normalizePath = function (path) {\n    const segments = path.split('/').reverse();\n    let segment;\n\n    path = [];\n    while (segments.length !== 0) {\n        segment = segments.pop();\n        switch ( segment ) {\n            case '.':\n                break;\n            case '..':\n                if ((path.length === 0) || (path[path.length - 1] === '..')) {\n                    path.push( segment );\n                } else {\n                    path.pop();\n                }\n                break;\n            default:\n                path.push(segment);\n                break;\n        }\n    }\n\n    return path.join('/');\n};\n\nfunction isPathRelative(path) {\n    return !/^(?:[a-z-]+:|\\/|#)/i.test(path);\n}\n\nfunction isPathLocalRelative(path) {\n    return path.charAt(0) === '.';\n}\n\n// todo - do the same for the toCSS ?\n","class ImportSequencer {\n    constructor(onSequencerEmpty) {\n        this.imports = [];\n        this.variableImports = [];\n        this._onSequencerEmpty = onSequencerEmpty;\n        this._currentDepth = 0;\n    }\n\n    addImport(callback) {\n        const importSequencer = this,\n            importItem = {\n                callback,\n                args: null,\n                isReady: false\n            };\n        this.imports.push(importItem);\n        return function() {\n            importItem.args = Array.prototype.slice.call(arguments, 0);\n            importItem.isReady = true;\n            importSequencer.tryRun();\n        };\n    }\n\n    addVariableImport(callback) {\n        this.variableImports.push(callback);\n    }\n\n    tryRun() {\n        this._currentDepth++;\n        try {\n            while (true) {\n                while (this.imports.length > 0) {\n                    const importItem = this.imports[0];\n                    if (!importItem.isReady) {\n                        return;\n                    }\n                    this.imports = this.imports.slice(1);\n                    importItem.callback.apply(null, importItem.args);\n                }\n                if (this.variableImports.length === 0) {\n                    break;\n                }\n                const variableImport = this.variableImports[0];\n                this.variableImports = this.variableImports.slice(1);\n                variableImport();\n            }\n        } finally {\n            this._currentDepth--;\n        }\n        if (this._currentDepth === 0 && this._onSequencerEmpty) {\n            this._onSequencerEmpty();\n        }\n    }\n}\n\nexport default ImportSequencer;\n","/* eslint-disable no-unused-vars */\n/**\n * @todo - Remove unused when JSDoc types are added for visitor methods\n */\nimport contexts from '../contexts';\nimport Visitor from './visitor';\nimport ImportSequencer from './import-sequencer';\nimport * as utils from '../utils';\n\nconst ImportVisitor = function(importer, finish) {\n\n    this._visitor = new Visitor(this);\n    this._importer = importer;\n    this._finish = finish;\n    this.context = new contexts.Eval();\n    this.importCount = 0;\n    this.onceFileDetectionMap = {};\n    this.recursionDetector = {};\n    this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));\n};\n\nImportVisitor.prototype = {\n    isReplacing: false,\n    run: function (root) {\n        try {\n            // process the contents\n            this._visitor.visit(root);\n        }\n        catch (e) {\n            this.error = e;\n        }\n\n        this.isFinished = true;\n        this._sequencer.tryRun();\n    },\n    _onSequencerEmpty: function() {\n        if (!this.isFinished) {\n            return;\n        }\n        this._finish(this.error);\n    },\n    visitImport: function (importNode, visitArgs) {\n        const inlineCSS = importNode.options.inline;\n\n        if (!importNode.css || inlineCSS) {\n\n            const context = new contexts.Eval(this.context, utils.copyArray(this.context.frames));\n            const importParent = context.frames[0];\n\n            this.importCount++;\n            if (importNode.isVariableImport()) {\n                this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));\n            } else {\n                this.processImportNode(importNode, context, importParent);\n            }\n        }\n        visitArgs.visitDeeper = false;\n    },\n    processImportNode: function(importNode, context, importParent) {\n        let evaldImportNode;\n        const inlineCSS = importNode.options.inline;\n\n        try {\n            evaldImportNode = importNode.evalForImport(context);\n        } catch (e) {\n            if (!e.filename) { e.index = importNode.getIndex(); e.filename = importNode.fileInfo().filename; }\n            // attempt to eval properly and treat as css\n            importNode.css = true;\n            // if that fails, this error will be thrown\n            importNode.error = e;\n        }\n\n        if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\n\n            if (evaldImportNode.options.multiple) {\n                context.importMultiple = true;\n            }\n\n            // try appending if we haven't determined if it is css or not\n            const tryAppendLessExtension = evaldImportNode.css === undefined;\n\n            for (let i = 0; i < importParent.rules.length; i++) {\n                if (importParent.rules[i] === importNode) {\n                    importParent.rules[i] = evaldImportNode;\n                    break;\n                }\n            }\n\n            const onImported = this.onImported.bind(this, evaldImportNode, context), sequencedOnImported = this._sequencer.addImport(onImported);\n\n            this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.fileInfo(),\n                evaldImportNode.options, sequencedOnImported);\n        } else {\n            this.importCount--;\n            if (this.isFinished) {\n                this._sequencer.tryRun();\n            }\n        }\n    },\n    onImported: function (importNode, context, e, root, importedAtRoot, fullPath) {\n        if (e) {\n            if (!e.filename) {\n                e.index = importNode.getIndex(); e.filename = importNode.fileInfo().filename;\n            }\n            this.error = e;\n        }\n\n        const importVisitor = this,\n            inlineCSS = importNode.options.inline,\n            isPlugin = importNode.options.isPlugin,\n            isOptional = importNode.options.optional,\n            duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;\n\n        if (!context.importMultiple) {\n            if (duplicateImport) {\n                importNode.skip = true;\n            } else {\n                importNode.skip = function() {\n                    if (fullPath in importVisitor.onceFileDetectionMap) {\n                        return true;\n                    }\n                    importVisitor.onceFileDetectionMap[fullPath] = true;\n                    return false;\n                };\n            }\n        }\n\n        if (!fullPath && isOptional) {\n            importNode.skip = true;\n        }\n\n        if (root) {\n            importNode.root = root;\n            importNode.importedFilename = fullPath;\n\n            if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {\n                importVisitor.recursionDetector[fullPath] = true;\n\n                const oldContext = this.context;\n                this.context = context;\n                try {\n                    this._visitor.visit(root);\n                } catch (e) {\n                    this.error = e;\n                }\n                this.context = oldContext;\n            }\n        }\n\n        importVisitor.importCount--;\n\n        if (importVisitor.isFinished) {\n            importVisitor._sequencer.tryRun();\n        }\n    },\n    visitDeclaration: function (declNode, visitArgs) {\n        if (declNode.value.type === 'DetachedRuleset') {\n            this.context.frames.unshift(declNode);\n        } else {\n            visitArgs.visitDeeper = false;\n        }\n    },\n    visitDeclarationOut: function(declNode) {\n        if (declNode.value.type === 'DetachedRuleset') {\n            this.context.frames.shift();\n        }\n    },\n    visitAtRule: function (atRuleNode, visitArgs) {\n        this.context.frames.unshift(atRuleNode);\n    },\n    visitAtRuleOut: function (atRuleNode) {\n        this.context.frames.shift();\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        this.context.frames.unshift(mixinDefinitionNode);\n    },\n    visitMixinDefinitionOut: function (mixinDefinitionNode) {\n        this.context.frames.shift();\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        this.context.frames.unshift(rulesetNode);\n    },\n    visitRulesetOut: function (rulesetNode) {\n        this.context.frames.shift();\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        this.context.frames.unshift(mediaNode.rules[0]);\n    },\n    visitMediaOut: function (mediaNode) {\n        this.context.frames.shift();\n    },\n    visitStartingStyle: function (mediaNode, visitArgs) {\n        this.context.frames.unshift(mediaNode.declarations ? mediaNode.declarations[0] : mediaNode.rules[0]);\n    },\n    visitStartingStyleOut: function (mediaNode) {\n        this.context.frames.shift();\n    }\n};\nexport default ImportVisitor;\n","class SetTreeVisibilityVisitor {\n    constructor(visible) {\n        this.visible = visible;\n    }\n\n    run(root) {\n        this.visit(root);\n    }\n\n    visitArray(nodes) {\n        if (!nodes) {\n            return nodes;\n        }\n\n        const cnt = nodes.length;\n        let i;\n        for (i = 0; i < cnt; i++) {\n            this.visit(nodes[i]);\n        }\n        return nodes;\n    }\n\n    visit(node) {\n        if (!node) {\n            return node;\n        }\n        if (node.constructor === Array) {\n            return this.visitArray(node);\n        }\n\n        if (!node.blocksVisibility || node.blocksVisibility()) {\n            return node;\n        }\n        if (this.visible) {\n            node.ensureVisibility();\n        } else {\n            node.ensureInvisibility();\n        }\n\n        node.accept(this);\n        return node;\n    }\n}\n\nexport default SetTreeVisibilityVisitor;","/* eslint-disable no-unused-vars */\n/**\n * @todo - Remove unused when JSDoc types are added for visitor methods\n */\nimport tree from '../tree';\nimport Visitor from './visitor';\nimport logger from '../logger';\nimport * as utils from '../utils';\n\n/* jshint loopfunc:true */\n\nclass ExtendFinderVisitor {\n    constructor() {\n        this._visitor = new Visitor(this);\n        this.contexts = [];\n        this.allExtendsStack = [[]];\n    }\n\n    run(root) {\n        root = this._visitor.visit(root);\n        root.allExtends = this.allExtendsStack[0];\n        return root;\n    }\n\n    visitDeclaration(declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n\n        let i;\n        let j;\n        let extend;\n        const allSelectorsExtendList = [];\n        let extendList;\n\n        // get &:extend(.a); rules which apply to all selectors in this ruleset\n        const rules = rulesetNode.rules, ruleCnt = rules ? rules.length : 0;\n        for (i = 0; i < ruleCnt; i++) {\n            if (rulesetNode.rules[i] instanceof tree.Extend) {\n                allSelectorsExtendList.push(rules[i]);\n                rulesetNode.extendOnEveryPath = true;\n            }\n        }\n\n        // now find every selector and apply the extends that apply to all extends\n        // and the ones which apply to an individual extend\n        const paths = rulesetNode.paths;\n        for (i = 0; i < paths.length; i++) {\n            const selectorPath = paths[i], selector = selectorPath[selectorPath.length - 1], selExtendList = selector.extendList;\n\n            extendList = selExtendList ? utils.copyArray(selExtendList).concat(allSelectorsExtendList)\n                : allSelectorsExtendList;\n\n            if (extendList) {\n                extendList = extendList.map(function(allSelectorsExtend) {\n                    return allSelectorsExtend.clone();\n                });\n            }\n\n            for (j = 0; j < extendList.length; j++) {\n                this.foundExtends = true;\n                extend = extendList[j];\n                extend.findSelfSelectors(selectorPath);\n                extend.ruleset = rulesetNode;\n                if (j === 0) { extend.firstExtendOnThisSelectorPath = true; }\n                this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\n            }\n        }\n\n        this.contexts.push(rulesetNode.selectors);\n    }\n\n    visitRulesetOut(rulesetNode) {\n        if (!rulesetNode.root) {\n            this.contexts.length = this.contexts.length - 1;\n        }\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        mediaNode.allExtends = [];\n        this.allExtendsStack.push(mediaNode.allExtends);\n    }\n\n    visitMediaOut(mediaNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        atRuleNode.allExtends = [];\n        this.allExtendsStack.push(atRuleNode.allExtends);\n    }\n\n    visitAtRuleOut(atRuleNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n}\n\nclass ProcessExtendsVisitor {\n    constructor() {\n        this._visitor = new Visitor(this);\n    }\n\n    run(root) {\n        const extendFinder = new ExtendFinderVisitor();\n        this.extendIndices = {};\n        extendFinder.run(root);\n        if (!extendFinder.foundExtends) { return root; }\n        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\n        this.allExtendsStack = [root.allExtends];\n        const newRoot = this._visitor.visit(root);\n        this.checkExtendsForNonMatched(root.allExtends);\n        return newRoot;\n    }\n\n    checkExtendsForNonMatched(extendList) {\n        const indices = this.extendIndices;\n        extendList.filter(function(extend) {\n            return !extend.hasFoundMatches && extend.parent_ids.length == 1;\n        }).forEach(function(extend) {\n            let selector = '_unknown_';\n            try {\n                selector = extend.selector.toCSS({});\n            }\n            catch (_) {}\n\n            if (!indices[`${extend.index} ${selector}`]) {\n                indices[`${extend.index} ${selector}`] = true;\n                logger.warn(`extend '${selector}' has no matches`);\n            }\n        });\n    }\n\n    doExtendChaining(extendsList, extendsListTarget, iterationCount) {\n        //\n        // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\n        // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\n        // this means this new extend can then go and alter other extends\n        //\n        // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\n        // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\n        // processed if we look at each selector at a time, as is done in visitRuleset\n\n        let extendIndex;\n\n        let targetExtendIndex;\n        let matches;\n        const extendsToAdd = [];\n        let newSelector;\n        const extendVisitor = this;\n        let selectorPath;\n        let extend;\n        let targetExtend;\n        let newExtend;\n\n        iterationCount = iterationCount || 0;\n\n        // loop through comparing every extend with every target extend.\n        // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\n        // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\n        // and the second is the target.\n        // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\n        // case when processing media queries\n        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n            for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\n\n                extend = extendsList[extendIndex];\n                targetExtend = extendsListTarget[targetExtendIndex];\n\n                // look for circular references\n                if ( extend.parent_ids.indexOf( targetExtend.object_id ) >= 0 ) { continue; }\n\n                // find a match in the target extends self selector (the bit before :extend)\n                selectorPath = [targetExtend.selfSelectors[0]];\n                matches = extendVisitor.findMatch(extend, selectorPath);\n\n                if (matches.length) {\n                    extend.hasFoundMatches = true;\n\n                    // we found a match, so for each self selector..\n                    extend.selfSelectors.forEach(function(selfSelector) {\n                        const info = targetExtend.visibilityInfo();\n\n                        // process the extend as usual\n                        newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\n\n                        // but now we create a new extend from it\n                        newExtend = new(tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\n                        newExtend.selfSelectors = newSelector;\n\n                        // add the extend onto the list of extends for that selector\n                        newSelector[newSelector.length - 1].extendList = [newExtend];\n\n                        // record that we need to add it.\n                        extendsToAdd.push(newExtend);\n                        newExtend.ruleset = targetExtend.ruleset;\n\n                        // remember its parents for circular references\n                        newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\n\n                        // only process the selector once.. if we have :extend(.a,.b) then multiple\n                        // extends will look at the same selector path, so when extending\n                        // we know that any others will be duplicates in terms of what is added to the css\n                        if (targetExtend.firstExtendOnThisSelectorPath) {\n                            newExtend.firstExtendOnThisSelectorPath = true;\n                            targetExtend.ruleset.paths.push(newSelector);\n                        }\n                    });\n                }\n            }\n        }\n\n        if (extendsToAdd.length) {\n            // try to detect circular references to stop a stack overflow.\n            // may no longer be needed.\n            this.extendChainCount++;\n            if (iterationCount > 100) {\n                let selectorOne = '{unable to calculate}';\n                let selectorTwo = '{unable to calculate}';\n                try {\n                    selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\n                    selectorTwo = extendsToAdd[0].selector.toCSS();\n                }\n                catch (e) {}\n                throw { message: `extend circular reference detected. One of the circular extends is currently:${selectorOne}:extend(${selectorTwo})`};\n            }\n\n            // now process the new extends on the existing rules so that we can handle a extending b extending c extending\n            // d extending e...\n            return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\n        } else {\n            return extendsToAdd;\n        }\n    }\n\n    visitDeclaration(ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitSelector(selectorNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n        let matches;\n        let pathIndex;\n        let extendIndex;\n        const allExtends = this.allExtendsStack[this.allExtendsStack.length - 1];\n        const selectorsToAdd = [];\n        const extendVisitor = this;\n        let selectorPath;\n\n        // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\n\n        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n            for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n                selectorPath = rulesetNode.paths[pathIndex];\n\n                // extending extends happens initially, before the main pass\n                if (rulesetNode.extendOnEveryPath) { continue; }\n                const extendList = selectorPath[selectorPath.length - 1].extendList;\n                if (extendList && extendList.length) { continue; }\n\n                matches = this.findMatch(allExtends[extendIndex], selectorPath);\n\n                if (matches.length) {\n                    allExtends[extendIndex].hasFoundMatches = true;\n\n                    allExtends[extendIndex].selfSelectors.forEach(function(selfSelector) {\n                        let extendedSelectors;\n                        extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\n                        selectorsToAdd.push(extendedSelectors);\n                    });\n                }\n            }\n        }\n        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\n    }\n\n    findMatch(extend, haystackSelectorPath) {\n        //\n        // look through the haystack selector path to try and find the needle - extend.selector\n        // returns an array of selector matches that can then be replaced\n        //\n        let haystackSelectorIndex;\n\n        let hackstackSelector;\n        let hackstackElementIndex;\n        let haystackElement;\n        let targetCombinator;\n        let i;\n        const extendVisitor = this;\n        const needleElements = extend.selector.elements;\n        const potentialMatches = [];\n        let potentialMatch;\n        const matches = [];\n\n        // loop through the haystack elements\n        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\n            hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\n\n            for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\n\n                haystackElement = hackstackSelector.elements[hackstackElementIndex];\n\n                // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\n                if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {\n                    potentialMatches.push({pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,\n                        initialCombinator: haystackElement.combinator});\n                }\n\n                for (i = 0; i < potentialMatches.length; i++) {\n                    potentialMatch = potentialMatches[i];\n\n                    // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\n                    // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\n                    // work out what the resulting combinator will be\n                    targetCombinator = haystackElement.combinator.value;\n                    if (targetCombinator === '' && hackstackElementIndex === 0) {\n                        targetCombinator = ' ';\n                    }\n\n                    // if we don't match, null our match to indicate failure\n                    if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||\n                        (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {\n                        potentialMatch = null;\n                    } else {\n                        potentialMatch.matched++;\n                    }\n\n                    // if we are still valid and have finished, test whether we have elements after and whether these are allowed\n                    if (potentialMatch) {\n                        potentialMatch.finished = potentialMatch.matched === needleElements.length;\n                        if (potentialMatch.finished &&\n                            (!extend.allowAfter &&\n                                (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\n                            potentialMatch = null;\n                        }\n                    }\n                    // if null we remove, if not, we are still valid, so either push as a valid match or continue\n                    if (potentialMatch) {\n                        if (potentialMatch.finished) {\n                            potentialMatch.length = needleElements.length;\n                            potentialMatch.endPathIndex = haystackSelectorIndex;\n                            potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\n                            potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\n                            matches.push(potentialMatch);\n                        }\n                    } else {\n                        potentialMatches.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n\n    isElementValuesEqual(elementValue1, elementValue2) {\n        if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\n            return elementValue1 === elementValue2;\n        }\n        if (elementValue1 instanceof tree.Attribute) {\n            if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\n                return false;\n            }\n            if (!elementValue1.value || !elementValue2.value) {\n                if (elementValue1.value || elementValue2.value) {\n                    return false;\n                }\n                return true;\n            }\n            elementValue1 = elementValue1.value.value || elementValue1.value;\n            elementValue2 = elementValue2.value.value || elementValue2.value;\n            return elementValue1 === elementValue2;\n        }\n        elementValue1 = elementValue1.value;\n        elementValue2 = elementValue2.value;\n        if (elementValue1 instanceof tree.Selector) {\n            if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\n                return false;\n            }\n            for (let i = 0; i  < elementValue1.elements.length; i++) {\n                if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\n                    if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\n                        return false;\n                    }\n                }\n                if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    extendSelector(matches, selectorPath, replacementSelector, isVisible) {\n\n        // for a set of matches, replace each match with the replacement selector\n\n        let currentSelectorPathIndex = 0, currentSelectorPathElementIndex = 0, path = [], matchIndex, selector, firstElement, match, newElements;\n\n        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n            match = matches[matchIndex];\n            selector = selectorPath[match.pathIndex];\n            firstElement = new tree.Element(\n                match.initialCombinator,\n                replacementSelector.elements[0].value,\n                replacementSelector.elements[0].isVariable,\n                replacementSelector.elements[0].getIndex(),\n                replacementSelector.elements[0].fileInfo()\n            );\n\n            if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\n                path[path.length - 1].elements = path[path.length - 1]\n                    .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n\n            newElements = selector.elements\n                .slice(currentSelectorPathElementIndex, match.index)\n                .concat([firstElement])\n                .concat(replacementSelector.elements.slice(1));\n\n            if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n                path[path.length - 1].elements =\n                    path[path.length - 1].elements.concat(newElements);\n            } else {\n                path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\n\n                path.push(new tree.Selector(\n                    newElements\n                ));\n            }\n            currentSelectorPathIndex = match.endPathIndex;\n            currentSelectorPathElementIndex = match.endPathElementIndex;\n            if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n        }\n\n        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\n            path[path.length - 1].elements = path[path.length - 1]\n                .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n            currentSelectorPathIndex++;\n        }\n\n        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\n        path = path.map(function (currentValue) {\n            // we can re-use elements here, because the visibility property matters only for selectors\n            const derived = currentValue.createDerived(currentValue.elements);\n            if (isVisible) {\n                derived.ensureVisibility();\n            } else {\n                derived.ensureInvisibility();\n            }\n            return derived;\n        });\n        return path;\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        let newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    }\n\n    visitMediaOut(mediaNode) {\n        const lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        let newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    }\n\n    visitAtRuleOut(atRuleNode) {\n        const lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n}\n\nexport default ProcessExtendsVisitor;\n","/* eslint-disable no-unused-vars */\n/**\n * @todo - Remove unused when JSDoc types are added for visitor methods\n */\nimport Visitor from './visitor';\n\nclass JoinSelectorVisitor {\n    constructor() {\n        this.contexts = [[]];\n        this._visitor = new Visitor(this);\n    }\n\n    run(root) {\n        return this._visitor.visit(root);\n    }\n\n    visitDeclaration(declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        const paths = [];\n        let selectors;\n\n        this.contexts.push(paths);\n\n        if (!rulesetNode.root) {\n            selectors = rulesetNode.selectors;\n            if (selectors) {\n                selectors = selectors.filter(function(selector) { return selector.getIsOutput(); });\n                rulesetNode.selectors = selectors.length ? selectors : (selectors = null);\n                if (selectors) { rulesetNode.joinSelectors(paths, context, selectors, visitArgs); }\n            }\n            if (!selectors) { rulesetNode.rules = null; }\n            rulesetNode.paths = paths;\n        }\n    }\n\n    visitRulesetOut(rulesetNode) {\n        this.contexts.length = this.contexts.length - 1;\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n            atRuleNode.rules[0].root = (atRuleNode.isRooted || context.length === 0 || null);\n        }\n    }\n\n    visitStartingStyle(mediaNode, visitArgs) {\n        let context = this.contexts[this.contexts.length - 1];\n        \n        if (mediaNode.declarations) {\n            mediaNode.declarations[0].root = (context.length === 0 || context[0].multiMedia);\n        } else {\n            mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);\n        }\n    }\n}\n\nexport default JoinSelectorVisitor;\n","/* eslint-disable no-unused-vars */\n/**\n * @todo - Remove unused when JSDoc types are added for visitor methods\n */\nimport tree from '../tree';\nimport Visitor from './visitor';\n\nclass CSSVisitorUtils {\n    constructor(context) {\n        this._visitor = new Visitor(this);\n        this._context = context;\n    }\n\n    containsSilentNonBlockedChild(bodyRules) {\n        let rule;\n        if (!bodyRules) {\n            return false;\n        }\n        for (let r = 0; r < bodyRules.length; r++) {\n            rule = bodyRules[r];\n            if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\n                // the atrule contains something that was referenced (likely by extend)\n                // therefore it needs to be shown in output too\n                return true;\n            }\n        }\n        return false;\n    }\n\n    keepOnlyVisibleChilds(owner) {\n        if (owner && owner.rules) {\n            owner.rules = owner.rules.filter(thing => thing.isVisible());\n        }\n    }\n\n    isEmpty(owner) {\n        return (owner && owner.rules) \n            ? (owner.rules.length === 0) : true;\n    }\n\n    hasVisibleSelector(rulesetNode) {\n        return (rulesetNode && rulesetNode.paths)\n            ? (rulesetNode.paths.length > 0) : false;\n    }\n\n    resolveVisibility(node) {\n        if (!node.blocksVisibility()) {\n            if (this.isEmpty(node)) {\n                return ;\n            }\n\n            return node;\n        }\n\n        const compiledRulesBody = node.rules[0];\n        this.keepOnlyVisibleChilds(compiledRulesBody);\n\n        if (this.isEmpty(compiledRulesBody)) {\n            return ;\n        }\n\n        node.ensureVisibility();\n        node.removeVisibilityBlock();\n\n        return node;\n    }\n\n    isVisibleRuleset(rulesetNode) {\n        if (rulesetNode.firstRoot) {\n            return true;\n        }\n\n        if (this.isEmpty(rulesetNode)) {\n            return false;\n        }\n\n        if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\nconst ToCSSVisitor = function(context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n    this.utils = new CSSVisitorUtils(context);\n};\n\nToCSSVisitor.prototype = {\n    isReplacing: true,\n    run: function (root) {\n        return this._visitor.visit(root);\n    },\n\n    visitDeclaration: function (declNode, visitArgs) {\n        if (declNode.blocksVisibility() || declNode.variable) {\n            return;\n        }\n        return declNode;\n    },\n\n    visitMixinDefinition: function (mixinNode, visitArgs) {\n        // mixin definitions do not get eval'd - this means they keep state\n        // so we have to clear that state here so it isn't used if toCSS is called twice\n        mixinNode.frames = [];\n    },\n\n    visitExtend: function (extendNode, visitArgs) {\n    },\n\n    visitComment: function (commentNode, visitArgs) {\n        if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n            return;\n        }\n        return commentNode;\n    },\n\n    visitMedia: function(mediaNode, visitArgs) {\n        const originalRules = mediaNode.rules[0].rules;\n        mediaNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        return this.utils.resolveVisibility(mediaNode, originalRules);\n    },\n\n    visitImport: function (importNode, visitArgs) {\n        if (importNode.blocksVisibility()) {\n            return ;\n        }\n        return importNode;\n    },\n\n    visitAtRule: function(atRuleNode, visitArgs) {\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n            return this.visitAtRuleWithBody(atRuleNode, visitArgs);\n        } else {\n            return this.visitAtRuleWithoutBody(atRuleNode, visitArgs);\n        }\n    },\n\n    visitAnonymous: function(anonymousNode, visitArgs) {\n        if (!anonymousNode.blocksVisibility()) {\n            anonymousNode.accept(this._visitor);\n            return anonymousNode;\n        }\n    },\n\n    visitAtRuleWithBody: function(atRuleNode, visitArgs) {\n        // if there is only one nested ruleset and that one has no path, then it is\n        // just fake ruleset\n        function hasFakeRuleset(atRuleNode) {\n            const bodyRules = atRuleNode.rules;\n            return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\n        }\n        function getBodyRules(atRuleNode) {\n            const nodeRules = atRuleNode.rules;\n            if (hasFakeRuleset(atRuleNode)) {\n                return nodeRules[0].rules;\n            }\n\n            return nodeRules;\n        }\n        // it is still true that it is only one ruleset in array\n        // this is last such moment\n        // process childs\n        const originalRules = getBodyRules(atRuleNode);\n        atRuleNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        if (!this.utils.isEmpty(atRuleNode)) {\n            this._mergeRules(atRuleNode.rules[0].rules);\n        }\n\n        return this.utils.resolveVisibility(atRuleNode, originalRules);\n    },\n\n    visitAtRuleWithoutBody: function(atRuleNode, visitArgs) {\n        if (atRuleNode.blocksVisibility()) {\n            return;\n        }\n\n        if (atRuleNode.name === '@charset') {\n            // Only output the debug info together with subsequent @charset definitions\n            // a comment (or @media statement) before the actual @charset atrule would\n            // be considered illegal css as it has to be on the first line\n            if (this.charset) {\n                if (atRuleNode.debugInfo) {\n                    const comment = new tree.Comment(`/* ${atRuleNode.toCSS(this._context).replace(/\\n/g, '')} */\\n`);\n                    comment.debugInfo = atRuleNode.debugInfo;\n                    return this._visitor.visit(comment);\n                }\n                return;\n            }\n            this.charset = true;\n        }\n\n        return atRuleNode;\n    },\n\n    checkValidNodes: function(rules, isRoot) {\n        if (!rules) {\n            return;\n        }\n\n        for (let i = 0; i < rules.length; i++) {\n            const ruleNode = rules[i];\n            if (isRoot && ruleNode instanceof tree.Declaration && !ruleNode.variable) {\n                throw { message: 'Properties must be inside selector blocks. They cannot be in the root',\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n            if (ruleNode instanceof tree.Call) {\n                throw { message: `Function '${ruleNode.name}' did not return a root node`,\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n            if (ruleNode.type && !ruleNode.allowRoot) {\n                throw { message: `${ruleNode.type} node returned by a function is not valid here`,\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n        }\n    },\n\n    visitRuleset: function (rulesetNode, visitArgs) {\n        // at this point rulesets are nested into each other\n        let rule;\n\n        const rulesets = [];\n\n        this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\n\n        if (!rulesetNode.root) {\n            // remove invisible paths\n            this._compileRulesetPaths(rulesetNode);\n\n            // remove rulesets from this ruleset body and compile them separately\n            const nodeRules = rulesetNode.rules;\n\n            let nodeRuleCnt = nodeRules ? nodeRules.length : 0;\n            for (let i = 0; i < nodeRuleCnt; ) {\n                rule = nodeRules[i];\n                if (rule && rule.rules) {\n                    // visit because we are moving them out from being a child\n                    rulesets.push(this._visitor.visit(rule));\n                    nodeRules.splice(i, 1);\n                    nodeRuleCnt--;\n                    continue;\n                }\n                i++;\n            }\n            // accept the visitor to remove rules and refactor itself\n            // then we can decide nogw whether we want it or not\n            // compile body\n            if (nodeRuleCnt > 0) {\n                rulesetNode.accept(this._visitor);\n            } else {\n                rulesetNode.rules = null;\n            }\n            visitArgs.visitDeeper = false;\n        } else { // if (! rulesetNode.root) {\n            rulesetNode.accept(this._visitor);\n            visitArgs.visitDeeper = false;\n        }\n\n        if (rulesetNode.rules) {\n            this._mergeRules(rulesetNode.rules);\n            this._removeDuplicateRules(rulesetNode.rules);\n        }\n\n        // now decide whether we keep the ruleset\n        if (this.utils.isVisibleRuleset(rulesetNode)) {\n            rulesetNode.ensureVisibility();\n            rulesets.splice(0, 0, rulesetNode);\n        }\n\n        if (rulesets.length === 1) {\n            return rulesets[0];\n        }\n        return rulesets;\n    },\n\n    _compileRulesetPaths: function(rulesetNode) {\n        if (rulesetNode.paths) {\n            rulesetNode.paths = rulesetNode.paths\n                .filter(p => {\n                    let i;\n                    if (p[0].elements[0].combinator.value === ' ') {\n                        p[0].elements[0].combinator = new(tree.Combinator)('');\n                    }\n                    for (i = 0; i < p.length; i++) {\n                        if (p[i].isVisible() && p[i].getIsOutput()) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n        }\n    },\n\n    _removeDuplicateRules: function(rules) {\n        if (!rules) { return; }\n\n        // remove duplicates\n        const ruleCache = {};\n\n        let ruleList;\n        let rule;\n        let i;\n\n        for (i = rules.length - 1; i >= 0 ; i--) {\n            rule = rules[i];\n            if (rule instanceof tree.Declaration) {\n                if (!ruleCache[rule.name]) {\n                    ruleCache[rule.name] = rule;\n                } else {\n                    ruleList = ruleCache[rule.name];\n                    if (ruleList instanceof tree.Declaration) {\n                        ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\n                    }\n                    const ruleCSS = rule.toCSS(this._context);\n                    if (ruleList.indexOf(ruleCSS) !== -1) {\n                        rules.splice(i, 1);\n                    } else {\n                        ruleList.push(ruleCSS);\n                    }\n                }\n            }\n        }\n    },\n\n    _mergeRules: function(rules) {\n        if (!rules) {\n            return; \n        }\n\n        const groups    = {};\n        const groupsArr = [];\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i];\n            if (rule.merge) {\n                const key = rule.name;\n                groups[key] ? rules.splice(i--, 1) : \n                    groupsArr.push(groups[key] = []);\n                groups[key].push(rule);\n            }\n        }\n\n        groupsArr.forEach(group => {\n            if (group.length > 0) {\n                const result = group[0];\n                let space  = [];\n                const comma  = [new tree.Expression(space)];\n                group.forEach(rule => {\n                    if ((rule.merge === '+') && (space.length > 0)) {\n                        comma.push(new tree.Expression(space = []));\n                    }\n                    space.push(rule.value);\n                    result.important = result.important || rule.important;\n                });\n                result.value = new tree.Value(comma);\n            }\n        });\n    }\n};\n\nexport default ToCSSVisitor;\n","import Visitor from './visitor';\nimport ImportVisitor from './import-visitor';\nimport MarkVisibleSelectorsVisitor from './set-tree-visibility-visitor';\nimport ExtendVisitor from './extend-visitor';\nimport JoinSelectorVisitor from './join-selector-visitor';\nimport ToCSSVisitor from './to-css-visitor';\n\nexport default {\n    Visitor,\n    ImportVisitor,\n    MarkVisibleSelectorsVisitor,\n    ExtendVisitor,\n    JoinSelectorVisitor,\n    ToCSSVisitor\n};\n","import chunker from './chunker';\n\nexport default () => {\n    let // Less input string\n        input;\n\n    let // current chunk\n        j;\n\n    const // holds state for backtracking\n        saveStack = [];\n\n    let // furthest index the parser has gone to\n        furthest;\n\n    let // if this is furthest we got to, this is the probably cause\n        furthestPossibleErrorMessage;\n\n    let // chunkified input\n        chunks;\n\n    let // current chunk\n        current;\n\n    let // index of current chunk, in `input`\n        currentPos;\n\n    const parserInput = {};\n    const CHARCODE_SPACE = 32;\n    const CHARCODE_TAB = 9;\n    const CHARCODE_LF = 10;\n    const CHARCODE_CR = 13;\n    const CHARCODE_PLUS = 43;\n    const CHARCODE_COMMA = 44;\n    const CHARCODE_FORWARD_SLASH = 47;\n    const CHARCODE_9 = 57;\n\n    function skipWhitespace(length) {\n        const oldi = parserInput.i;\n        const oldj = j;\n        const curr = parserInput.i - currentPos;\n        const endIndex = parserInput.i + current.length - curr;\n        const mem = (parserInput.i += length);\n        const inp = input;\n        let c;\n        let nextChar;\n        let comment;\n\n        for (; parserInput.i < endIndex; parserInput.i++) {\n            c = inp.charCodeAt(parserInput.i);\n\n            if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\n                nextChar = inp.charAt(parserInput.i + 1);\n                if (nextChar === '/') {\n                    comment = {index: parserInput.i, isLineComment: true};\n                    let nextNewLine = inp.indexOf('\\n', parserInput.i + 2);\n                    if (nextNewLine < 0) {\n                        nextNewLine = endIndex;\n                    }\n                    parserInput.i = nextNewLine;\n                    comment.text = inp.substr(comment.index, parserInput.i - comment.index);\n                    parserInput.commentStore.push(comment);\n                    continue;\n                } else if (nextChar === '*') {\n                    const nextStarSlash = inp.indexOf('*/', parserInput.i + 2);\n                    if (nextStarSlash >= 0) {\n                        comment = {\n                            index: parserInput.i,\n                            text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),\n                            isLineComment: false\n                        };\n                        parserInput.i += comment.text.length - 1;\n                        parserInput.commentStore.push(comment);\n                        continue;\n                    }\n                }\n                break;\n            }\n\n            if ((c !== CHARCODE_SPACE) && (c !== CHARCODE_LF) && (c !== CHARCODE_TAB) && (c !== CHARCODE_CR)) {\n                break;\n            }\n        }\n\n        current = current.slice(length + parserInput.i - mem + curr);\n        currentPos = parserInput.i;\n\n        if (!current.length) {\n            if (j < chunks.length - 1) {\n                current = chunks[++j];\n                skipWhitespace(0); // skip space at the beginning of a chunk\n                return true; // things changed\n            }\n            parserInput.finished = true;\n        }\n\n        return oldi !== parserInput.i || oldj !== j;\n    }\n\n    parserInput.save = () => {\n        currentPos = parserInput.i;\n        saveStack.push( { current, i: parserInput.i, j });\n    };\n    parserInput.restore = possibleErrorMessage => {\n\n        if (parserInput.i > furthest || (parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage)) {\n            furthest = parserInput.i;\n            furthestPossibleErrorMessage = possibleErrorMessage;\n        }\n        const state = saveStack.pop();\n        current = state.current;\n        currentPos = parserInput.i = state.i;\n        j = state.j;\n    };\n    parserInput.forget = () => {\n        saveStack.pop();\n    };\n    parserInput.isWhitespace = offset => {\n        const pos = parserInput.i + (offset || 0);\n        const code = input.charCodeAt(pos);\n        return (code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF);\n    };\n\n    // Specialization of $(tok)\n    parserInput.$re = tok => {\n        if (parserInput.i > currentPos) {\n            current = current.slice(parserInput.i - currentPos);\n            currentPos = parserInput.i;\n        }\n\n        const m = tok.exec(current);\n        if (!m) {\n            return null;\n        }\n\n        skipWhitespace(m[0].length);\n        if (typeof m === 'string') {\n            return m;\n        }\n\n        return m.length === 1 ? m[0] : m;\n    };\n\n    parserInput.$char = tok => {\n        if (input.charAt(parserInput.i) !== tok) {\n            return null;\n        }\n        skipWhitespace(1);\n        return tok;\n    };\n\n    parserInput.$peekChar = tok => {\n        if (input.charAt(parserInput.i) !== tok) {\n            return null;\n        }\n        return tok;\n    };\n\n    parserInput.$str = tok => {\n        const tokLength = tok.length;\n\n        // https://jsperf.com/string-startswith/21\n        for (let i = 0; i < tokLength; i++) {\n            if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                return null;\n            }\n        }\n\n        skipWhitespace(tokLength);\n        return tok;\n    };\n\n    parserInput.$quoted = loc => {\n        const pos = loc || parserInput.i;\n        const startChar = input.charAt(pos);\n\n        if (startChar !== '\\'' && startChar !== '\"') {\n            return;\n        }\n        const length = input.length;\n        const currentPosition = pos;\n\n        for (let i = 1; i + currentPosition < length; i++) {\n            const nextChar = input.charAt(i + currentPosition);\n            switch (nextChar) {\n                case '\\\\':\n                    i++;\n                    continue;\n                case '\\r':\n                case '\\n':\n                    break;\n                case startChar: {\n                    const str = input.substr(currentPosition, i + 1);\n                    if (!loc && loc !== 0) {\n                        skipWhitespace(i + 1);\n                        return str\n                    }\n                    return [startChar, str];\n                }\n                default:\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Permissive parsing. Ignores everything except matching {} [] () and quotes\n     * until matching token (outside of blocks)\n     */\n    parserInput.$parseUntil = tok => {\n        let quote = '';\n        let returnVal = null;\n        let inComment = false;\n        let blockDepth = 0;\n        const blockStack = [];\n        const parseGroups = [];\n        const length = input.length;\n        const startPos = parserInput.i;\n        let lastPos = parserInput.i;\n        let i = parserInput.i;\n        let loop = true;\n        let testChar;\n\n        if (typeof tok === 'string') {\n            testChar = char => char === tok\n        } else {\n            testChar = char => tok.test(char)\n        }\n\n        do {\n            let nextChar = input.charAt(i);\n            if (blockDepth === 0 && testChar(nextChar)) {\n                returnVal = input.substr(lastPos, i - lastPos);\n                if (returnVal) {\n                    parseGroups.push(returnVal);\n                }\n                else {\n                    parseGroups.push(' ');\n                }\n                returnVal = parseGroups;\n                skipWhitespace(i - startPos);\n                loop = false\n            } else {\n                if (inComment) {\n                    if (nextChar === '*' && \n                        input.charAt(i + 1) === '/') {\n                        i++;\n                        blockDepth--;\n                        inComment = false;\n                    }\n                    i++;\n                    continue;\n                }\n                switch (nextChar) {\n                    case '\\\\':\n                        i++;\n                        nextChar = input.charAt(i);\n                        parseGroups.push(input.substr(lastPos, i - lastPos + 1));\n                        lastPos = i + 1;\n                        break;\n                    case '/':\n                        if (input.charAt(i + 1) === '*') {\n                            i++;\n                            inComment = true;\n                            blockDepth++;\n                        }\n                        break;\n                    case '\\'':\n                    case '\"':\n                        quote = parserInput.$quoted(i);\n                        if (quote) {\n                            parseGroups.push(input.substr(lastPos, i - lastPos), quote);\n                            i += quote[1].length - 1;\n                            lastPos = i + 1;\n                        }\n                        else {\n                            skipWhitespace(i - startPos);\n                            returnVal = nextChar;\n                            loop = false;\n                        }\n                        break;\n                    case '{':\n                        blockStack.push('}');\n                        blockDepth++;\n                        break;\n                    case '(':\n                        blockStack.push(')');\n                        blockDepth++;\n                        break;\n                    case '[':\n                        blockStack.push(']');\n                        blockDepth++;\n                        break;\n                    case '}':\n                    case ')':\n                    case ']': {\n                        const expected = blockStack.pop();\n                        if (nextChar === expected) {\n                            blockDepth--;\n                        } else {\n                            // move the parser to the error and return expected\n                            skipWhitespace(i - startPos);\n                            returnVal = expected;\n                            loop = false;\n                        }\n                    }\n                }\n                i++;\n                if (i > length) {\n                    loop = false;\n                }\n            }\n        } while (loop);\n\n        return returnVal ? returnVal : null;\n    }\n\n    parserInput.autoCommentAbsorb = true;\n    parserInput.commentStore = [];\n    parserInput.finished = false;\n\n    // Same as $(), but don't change the state of the parser,\n    // just return the match.\n    parserInput.peek = tok => {\n        if (typeof tok === 'string') {\n            // https://jsperf.com/string-startswith/21\n            for (let i = 0; i < tok.length; i++) {\n                if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            return tok.test(current);\n        }\n    };\n\n    // Specialization of peek()\n    // TODO remove or change some currentChar calls to peekChar\n    parserInput.peekChar = tok => input.charAt(parserInput.i) === tok;\n\n    parserInput.currentChar = () => input.charAt(parserInput.i);\n\n    parserInput.prevChar = () => input.charAt(parserInput.i - 1);\n\n    parserInput.getInput = () => input;\n\n    parserInput.peekNotNumeric = () => {\n        const c = input.charCodeAt(parserInput.i);\n        // Is the first char of the dimension 0-9, '.', '+' or '-'\n        return (c > CHARCODE_9 || c < CHARCODE_PLUS) || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;\n    };\n\n    parserInput.start = (str, chunkInput, failFunction) => {\n        input = str;\n        parserInput.i = j = currentPos = furthest = 0;\n\n        // chunking apparently makes things quicker (but my tests indicate\n        // it might actually make things slower in node at least)\n        // and it is a non-perfect parse - it can't recognise\n        // unquoted urls, meaning it can't distinguish comments\n        // meaning comments with quotes or {}() in them get 'counted'\n        // and then lead to parse errors.\n        // In addition if the chunking chunks in the wrong place we might\n        // not be able to parse a parser statement in one go\n        // this is officially deprecated but can be switched on via an option\n        // in the case it causes too much performance issues.\n        if (chunkInput) {\n            chunks = chunker(str, failFunction);\n        } else {\n            chunks = [str];\n        }\n\n        current = chunks[0];\n\n        skipWhitespace(0);\n    };\n\n    parserInput.end = () => {\n        let message;\n        const isFinished = parserInput.i >= input.length;\n\n        if (parserInput.i < furthest) {\n            message = furthestPossibleErrorMessage;\n            parserInput.i = furthest;\n        }\n        return {\n            isFinished,\n            furthest: parserInput.i,\n            furthestPossibleErrorMessage: message,\n            furthestReachedEnd: parserInput.i >= input.length - 1,\n            furthestChar: input[parserInput.i]\n        };\n    };\n\n    return parserInput;\n};\n","// Split the input into chunks.\nexport default function (input, fail) {\n    const len = input.length;\n    let level = 0;\n    let parenLevel = 0;\n    let lastOpening;\n    let lastOpeningParen;\n    let lastMultiComment;\n    let lastMultiCommentEndBrace;\n    const chunks = [];\n    let emitFrom = 0;\n    let chunkerCurrentIndex;\n    let currentChunkStartIndex;\n    let cc;\n    let cc2;\n    let matched;\n\n    function emitChunk(force) {\n        const len = chunkerCurrentIndex - emitFrom;\n        if (((len < 512) && !force) || !len) {\n            return;\n        }\n        chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\n        emitFrom = chunkerCurrentIndex + 1;\n    }\n\n    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n        cc = input.charCodeAt(chunkerCurrentIndex);\n        if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {\n            // a-z or whitespace\n            continue;\n        }\n\n        switch (cc) {\n            case 40:                        // (\n                parenLevel++;\n                lastOpeningParen = chunkerCurrentIndex;\n                continue;\n            case 41:                        // )\n                if (--parenLevel < 0) {\n                    return fail('missing opening `(`', chunkerCurrentIndex);\n                }\n                continue;\n            case 59:                        // ;\n                if (!parenLevel) { emitChunk(); }\n                continue;\n            case 123:                       // {\n                level++;\n                lastOpening = chunkerCurrentIndex;\n                continue;\n            case 125:                       // }\n                if (--level < 0) {\n                    return fail('missing opening `{`', chunkerCurrentIndex);\n                }\n                if (!level && !parenLevel) { emitChunk(); }\n                continue;\n            case 92:                        // \\\n                if (chunkerCurrentIndex < len - 1) { chunkerCurrentIndex++; continue; }\n                return fail('unescaped `\\\\`', chunkerCurrentIndex);\n            case 34:\n            case 39:\n            case 96:                        // \", ' and `\n                matched = 0;\n                currentChunkStartIndex = chunkerCurrentIndex;\n                for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                    cc2 = input.charCodeAt(chunkerCurrentIndex);\n                    if (cc2 > 96) { continue; }\n                    if (cc2 == cc) { matched = 1; break; }\n                    if (cc2 == 92) {        // \\\n                        if (chunkerCurrentIndex == len - 1) {\n                            return fail('unescaped `\\\\`', chunkerCurrentIndex);\n                        }\n                        chunkerCurrentIndex++;\n                    }\n                }\n                if (matched) { continue; }\n                return fail(`unmatched \\`${String.fromCharCode(cc)}\\``, currentChunkStartIndex);\n            case 47:                        // /, check for comment\n                if (parenLevel || (chunkerCurrentIndex == len - 1)) { continue; }\n                cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\n                if (cc2 == 47) {\n                    // //, find lnfeed\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) { break; }\n                    }\n                } else if (cc2 == 42) {\n                    // /*, find */\n                    lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if (cc2 == 125) { lastMultiCommentEndBrace = chunkerCurrentIndex; }\n                        if (cc2 != 42) { continue; }\n                        if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) { break; }\n                    }\n                    if (chunkerCurrentIndex == len - 1) {\n                        return fail('missing closing `*/`', currentChunkStartIndex);\n                    }\n                    chunkerCurrentIndex++;\n                }\n                continue;\n            case 42:                       // *, check for unmatched */\n                if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {\n                    return fail('unmatched `/*`', chunkerCurrentIndex);\n                }\n                continue;\n        }\n    }\n\n    if (level !== 0) {\n        if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {\n            return fail('missing closing `}` or `*/`', lastOpening);\n        } else {\n            return fail('missing closing `}`', lastOpening);\n        }\n    } else if (parenLevel !== 0) {\n        return fail('missing closing `)`', lastOpeningParen);\n    }\n\n    emitChunk(true);\n    return chunks;\n}\n","function makeRegistry( base ) {\n    return {\n        _data: {},\n        add: function(name, func) {\n            // precautionary case conversion, as later querying of\n            // the registry by function-caller uses lower case as well.\n            name = name.toLowerCase();\n\n            // eslint-disable-next-line no-prototype-builtins\n            if (this._data.hasOwnProperty(name)) {\n                // TODO warn\n            }\n            this._data[name] = func;\n        },\n        addMultiple: function(functions) {\n            Object.keys(functions).forEach(\n                name => {\n                    this.add(name, functions[name]);\n                });\n        },\n        get: function(name) {\n            return this._data[name] || ( base && base.get( name ));\n        },\n        getLocalFunctions: function() {\n            return this._data;\n        },\n        inherit: function() {\n            return makeRegistry( this );\n        },\n        create: function(base) {\n            return makeRegistry(base);\n        }\n    };\n}\n\nexport default makeRegistry( null );","export const MediaSyntaxOptions = {\n    queryInParens: true\n};\n\nexport const ContainerSyntaxOptions = {\n    queryInParens: true\n};\n\nexport const StartingStyleSyntaxOptions = {\n    queryInParens: false\n};\n\nexport const ScopeSyntaxOptions = {\n    queryInParens: true,\n    scopeAtRule: true\n};\n","import LessError from '../less-error';\nimport tree from '../tree';\nimport visitors from '../visitors';\nimport getParserInput from './parser-input';\nimport * as utils from '../utils';\nimport functionRegistry from '../functions/function-registry';\nimport { ContainerSyntaxOptions, MediaSyntaxOptions, ScopeSyntaxOptions, StartingStyleSyntaxOptions } from '../tree/atrule-syntax';\n\n//\n// less.js - parser\n//\n//    A relatively straight-forward predictive parser.\n//    There is no tokenization/lexing stage, the input is parsed\n//    in one sweep.\n//\n//    To make the parser fast enough to run in the browser, several\n//    optimization had to be made:\n//\n//    - Matching and slicing on a huge input is often cause of slowdowns.\n//      The solution is to chunkify the input into smaller strings.\n//      The chunks are stored in the `chunks` var,\n//      `j` holds the current chunk index, and `currentPos` holds\n//      the index of the current chunk in relation to `input`.\n//      This gives us an almost 4x speed-up.\n//\n//    - In many cases, we don't need to match individual tokens;\n//      for example, if a value doesn't hold any variables, operations\n//      or dynamic references, the parser can effectively 'skip' it,\n//      treating it as a literal.\n//      An example would be '1px solid #000' - which evaluates to itself,\n//      we don't need to know what the individual components are.\n//      The drawback, of course is that you don't get the benefits of\n//      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\n//      and a smaller speed-up in the code-gen.\n//\n//\n//    Token matching is done with the `$` function, which either takes\n//    a terminal string or regexp, or a non-terminal function to call.\n//    It also takes care of moving all the indices forwards.\n//\n\nconst Parser = function Parser(context, imports, fileInfo, currentIndex) {\n    currentIndex = currentIndex || 0;\n    let parsers;\n    const parserInput = getParserInput();\n\n    function error(msg, type) {\n        throw new LessError(\n            {\n                index: parserInput.i,\n                filename: fileInfo.filename,\n                type: type || 'Syntax',\n                message: msg\n            },\n            imports\n        );\n    }\n\n    function expect(arg, msg) {\n        // some older browsers return typeof 'function' for RegExp\n        const result = (arg instanceof Function) ? arg.call(parsers) : parserInput.$re(arg);\n        if (result) {\n            return result;\n        }\n\n        error(msg || (typeof arg === 'string'\n            ? `expected '${arg}' got '${parserInput.currentChar()}'`\n            : 'unexpected token'));\n    }\n\n    // Specialization of expect()\n    function expectChar(arg, msg) {\n        if (parserInput.$char(arg)) {\n            return arg;\n        }\n        error(msg || `expected '${arg}' got '${parserInput.currentChar()}'`);\n    }\n\n    function getDebugInfo(index) {\n        const filename = fileInfo.filename;\n\n        return {\n            lineNumber: utils.getLocation(index, parserInput.getInput()).line + 1,\n            fileName: filename\n        };\n    }\n\n    /**\n     *  Used after initial parsing to create nodes on the fly\n     *\n     *  @param {String} str          - string to parse\n     *  @param {Array}  parseList    - array of parsers to run input through e.g. [\"value\", \"important\"]\n     *  @param {Number} currentIndex - start number to begin indexing\n     *  @param {Object} fileInfo     - fileInfo to attach to created nodes\n     */\n    function parseNode(str, parseList, callback) {\n        let result;\n        const returnNodes = [];\n        const parser = parserInput;\n\n        try {\n            parser.start(str, false, function fail(msg, index) {\n                callback({\n                    message: msg,\n                    index: index + currentIndex\n                });\n            });\n            for (let x = 0, p; (p = parseList[x]); x++) {\n                result = parsers[p]();\n                returnNodes.push(result || null);\n            }\n\n            const endInfo = parser.end();\n            if (endInfo.isFinished) {\n                callback(null, returnNodes);\n            }\n            else {\n                callback(true, null);\n            }\n        } catch (e) {\n            throw new LessError({\n                index: e.index + currentIndex,\n                message: e.message\n            }, imports, fileInfo.filename);\n        }\n    }\n\n    //\n    // The Parser\n    //\n    return {\n        parserInput,\n        imports,\n        fileInfo,\n        parseNode,\n        //\n        // Parse an input string into an abstract syntax tree,\n        // @param str A string containing 'less' markup\n        // @param callback call `callback` when done.\n        // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\n        //\n        parse: function (str, callback, additionalData) {\n            let root;\n            let err = null;\n            let globalVars;\n            let modifyVars;\n            let ignored;\n            let preText = '';\n\n            // Optionally disable @plugin parsing\n            if (additionalData && additionalData.disablePluginRule) {\n                parsers.plugin = function() {\n                    var dir = parserInput.$re(/^@plugin?\\s+/);\n                    if (dir) {\n                        error('@plugin statements are not allowed when disablePluginRule is set to true');\n                    }\n                }\n            }\n\n            globalVars = (additionalData && additionalData.globalVars) ? `${Parser.serializeVars(additionalData.globalVars)}\\n` : '';\n            modifyVars = (additionalData && additionalData.modifyVars) ? `\\n${Parser.serializeVars(additionalData.modifyVars)}` : '';\n\n            if (context.pluginManager) {\n                const preProcessors = context.pluginManager.getPreProcessors();\n                for (let i = 0; i < preProcessors.length; i++) {\n                    str = preProcessors[i].process(str, { context, imports, fileInfo });\n                }\n            }\n\n            if (globalVars || (additionalData && additionalData.banner)) {\n                preText = ((additionalData && additionalData.banner) ? additionalData.banner : '') + globalVars;\n                ignored = imports.contentsIgnoredChars;\n                ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;\n                ignored[fileInfo.filename] += preText.length;\n            }\n\n            str = str.replace(/\\r\\n?/g, '\\n');\n            // Remove potential UTF Byte Order Mark\n            str = preText + str.replace(/^\\uFEFF/, '') + modifyVars;\n            imports.contents[fileInfo.filename] = str;\n\n            // Start with the primary rule.\n            // The whole syntax tree is held under a Ruleset node,\n            // with the `root` property set to true, so no `{}` are\n            // output. The callback is called when the input is parsed.\n            try {\n                parserInput.start(str, context.chunkInput, function fail(msg, index) {\n                    throw new LessError({\n                        index,\n                        type: 'Parse',\n                        message: msg,\n                        filename: fileInfo.filename\n                    }, imports);\n                });\n\n                tree.Node.prototype.parse = this;\n                root = new tree.Ruleset(null, this.parsers.primary());\n                tree.Node.prototype.rootNode = root;\n                root.root = true;\n                root.firstRoot = true;\n                root.functionRegistry = functionRegistry.inherit();\n\n            } catch (e) {\n                return callback(new LessError(e, imports, fileInfo.filename));\n            }\n\n            // If `i` is smaller than the `input.length - 1`,\n            // it means the parser wasn't able to parse the whole\n            // string, so we've got a parsing error.\n            //\n            // We try to extract a \\n delimited string,\n            // showing the line where the parse error occurred.\n            // We split it up into two parts (the part which parsed,\n            // and the part which didn't), so we can color them differently.\n            const endInfo = parserInput.end();\n            if (!endInfo.isFinished) {\n\n                let message = endInfo.furthestPossibleErrorMessage;\n\n                if (!message) {\n                    message = 'Unrecognised input';\n                    if (endInfo.furthestChar === '}') {\n                        message += '. Possibly missing opening \\'{\\'';\n                    } else if (endInfo.furthestChar === ')') {\n                        message += '. Possibly missing opening \\'(\\'';\n                    } else if (endInfo.furthestReachedEnd) {\n                        message += '. Possibly missing something';\n                    }\n                }\n\n                err = new LessError({\n                    type: 'Parse',\n                    message,\n                    index: endInfo.furthest,\n                    filename: fileInfo.filename\n                }, imports);\n            }\n\n            const finish = e => {\n                e = err || e || imports.error;\n\n                if (e) {\n                    if (!(e instanceof LessError)) {\n                        e = new LessError(e, imports, fileInfo.filename);\n                    }\n\n                    return callback(e);\n                }\n                else {\n                    return callback(null, root);\n                }\n            };\n\n            if (context.processImports !== false) {\n                new visitors.ImportVisitor(imports, finish)\n                    .run(root);\n            } else {\n                return finish();\n            }\n        },\n\n        //\n        // Here in, the parsing rules/functions\n        //\n        // The basic structure of the syntax tree generated is as follows:\n        //\n        //   Ruleset ->  Declaration -> Value -> Expression -> Entity\n        //\n        // Here's some Less code:\n        //\n        //    .class {\n        //      color: #fff;\n        //      border: 1px solid #000;\n        //      width: @w + 4px;\n        //      > .child {...}\n        //    }\n        //\n        // And here's what the parse tree might look like:\n        //\n        //     Ruleset (Selector '.class', [\n        //         Declaration (\"color\",  Value ([Expression [Color #fff]]))\n        //         Declaration (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\n        //         Declaration (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\n        //         Ruleset (Selector [Element '>', '.child'], [...])\n        //     ])\n        //\n        //  In general, most rules will try to parse a token with the `$re()` function, and if the return\n        //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n        //  first, before parsing, that's when we use `peek()`.\n        //\n        parsers: parsers = {\n            //\n            // The `primary` rule is the *entry* and *exit* point of the parser.\n            // The rules here can appear at any level of the parse tree.\n            //\n            // The recursive nature of the grammar is an interplay between the `block`\n            // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n            // as represented by this simplified grammar:\n            //\n            //     primary  →  (ruleset | declaration)+\n            //     ruleset  →  selector+ block\n            //     block    →  '{' primary '}'\n            //\n            // Only at one point is the primary rule not called from the\n            // block rule: at the root level.\n            //\n            primary: function () {\n                const mixin = this.mixin;\n                let root = [];\n                let node;\n\n                while (true) {\n                    while (true) {\n                        node = this.comment();\n                        if (!node) { break; }\n                        root.push(node);\n                    }\n                    // always process comments before deciding if finished\n                    if (parserInput.finished) {\n                        break;\n                    }\n                    if (parserInput.peek('}')) {\n                        break;\n                    }\n\n                    node = this.extendRule();\n                    if (node) {\n                        root = root.concat(node);\n                        continue;\n                    }\n\n                    node = mixin.definition() || this.declaration() || mixin.call(false, false) ||\n                        this.ruleset() || this.variableCall() || this.entities.call() || this.atrule();\n                    if (node) {\n                        root.push(node);\n                    } else {\n                        let foundSemiColon = false;\n                        while (parserInput.$char(';')) {\n                            foundSemiColon = true;\n                        }\n                        if (!foundSemiColon) {\n                            break;\n                        }\n                    }\n                }\n\n                return root;\n            },\n\n            // comments are collected by the main parsing mechanism and then assigned to nodes\n            // where the current structure allows it\n            comment: function () {\n                if (parserInput.commentStore.length) {\n                    const comment = parserInput.commentStore.shift();\n                    return new(tree.Comment)(comment.text, comment.isLineComment, comment.index + currentIndex, fileInfo);\n                }\n            },\n\n            //\n            // Entities are tokens which can be found inside an Expression\n            //\n            entities: {\n                mixinLookup: function() {\n                    return parsers.mixin.call(true, true);\n                },\n                //\n                // A string, which supports escaping \" and '\n                //\n                //     \"milky way\" 'he\\'s the one!'\n                //\n                quoted: function (forceEscaped) {\n                    let str;\n                    const index = parserInput.i;\n                    let isEscaped = false;\n\n                    parserInput.save();\n                    if (parserInput.$char('~')) {\n                        isEscaped = true;\n                    } else if (forceEscaped) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    str = parserInput.$quoted();\n                    if (!str) {\n                        parserInput.restore();\n                        return;\n                    }\n                    parserInput.forget();\n\n                    return new(tree.Quoted)(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index + currentIndex, fileInfo);\n                },\n\n                //\n                // A catch-all word, such as:\n                //\n                //     black border-collapse\n                //\n                keyword: function () {\n                    const k = parserInput.$char('%') || parserInput.$re(/^\\[?(?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+\\]?/);\n                    if (k) {\n                        return tree.Color.fromKeyword(k) || new(tree.Keyword)(k);\n                    }\n                },\n\n                //\n                // A function call\n                //\n                //     rgb(255, 0, 255)\n                //\n                // The arguments are parsed with the `entities.arguments` parser.\n                //\n                call: function () {\n                    let name;\n                    let args;\n                    let func;\n                    const index = parserInput.i;\n\n                    // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                    if (parserInput.peek(/^url\\(/i)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    name = parserInput.$re(/^([\\w-]+|%|~|progid:[\\w.]+)\\(/);\n                    if (!name) {\n                        parserInput.forget();\n                        return;\n                    }\n\n                    name = name[1];\n                    func = this.customFuncCall(name);\n                    if (func) {\n                        args = func.parse();\n                        if (args && func.stop) {\n                            parserInput.forget();\n                            return args;\n                        }\n                    }\n\n                    args = this.arguments(args);\n\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore('Could not parse call arguments or missing \\')\\'');\n                        return;\n                    }\n\n                    parserInput.forget();\n\n                    return new(tree.Call)(name, args, index + currentIndex, fileInfo);\n                },\n\n                declarationCall: function () {\n                    let validCall;\n                    let args;\n                    const index = parserInput.i;\n\n                    parserInput.save();\n\n                    validCall = parserInput.$re(/^[\\w]+\\(/);\n                    if (!validCall) {\n                        parserInput.forget();\n                        return;\n                    }\n\n                    validCall = validCall.substring(0, validCall.length - 1);\n\n                    let rule = this.ruleProperty();\n                    let value;\n                  \n                    if (rule) {\n                        value = this.value();\n                    }\n                    \n                    if (rule && value) {\n                        args = [new (tree.Declaration)(rule, value, null, null, parserInput.i + currentIndex, fileInfo, true)];\n                    }\n\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore('Could not parse call arguments or missing \\')\\'');\n                        return;\n                    }\n\n                    parserInput.forget();\n\n                    return new(tree.Call)(validCall, args, index + currentIndex, fileInfo);\n                },\n\n                //\n                // Parsing rules for functions with non-standard args, e.g.:\n                //\n                //     boolean(not(2 > 1))\n                //\n                //     This is a quick prototype, to be modified/improved when\n                //     more custom-parsed funcs come (e.g. `selector(...)`)\n                //\n\n                customFuncCall: function (name) {\n                    /* Ideally the table is to be moved out of here for faster perf.,\n                       but it's quite tricky since it relies on all these `parsers`\n                       and `expect` available only here */\n                    return {\n                        alpha:   f(parsers.ieAlpha, true),\n                        boolean: f(condition),\n                        'if':    f(condition)\n                    }[name.toLowerCase()];\n\n                    function f(parse, stop) {\n                        return {\n                            parse, // parsing function\n                            stop   // when true - stop after parse() and return its result,\n                            // otherwise continue for plain args\n                        };\n                    }\n\n                    function condition() {\n                        return [expect(parsers.condition, 'expected condition')];\n                    }\n                },\n\n                arguments: function (prevArgs) {\n                    let argsComma = prevArgs || [];\n                    const argsSemiColon = [];\n                    let isSemiColonSeparated;\n                    let value;\n\n                    parserInput.save();\n\n                    while (true) {\n                        if (prevArgs) {\n                            prevArgs = false;\n                        } else {\n                            value = parsers.detachedRuleset() || this.assignment() || parsers.expression();\n                            if (!value) {\n                                break;\n                            }\n\n                            if (value.value && value.value.length == 1) {\n                                value = value.value[0];\n                            }\n\n                            argsComma.push(value);\n                        }\n\n                        if (parserInput.$char(',')) {\n                            continue;\n                        }\n\n                        if (parserInput.$char(';') || isSemiColonSeparated) {\n                            isSemiColonSeparated = true;\n                            value = (argsComma.length < 1) ? argsComma[0]\n                                : new tree.Value(argsComma);\n                            argsSemiColon.push(value);\n                            argsComma = [];\n                        }\n                    }\n\n                    parserInput.forget();\n                    return isSemiColonSeparated ? argsSemiColon : argsComma;\n                },\n                literal: function () {\n                    return this.dimension() ||\n                           this.color() ||\n                           this.quoted() ||\n                           this.unicodeDescriptor();\n                },\n\n                // Assignments are argument entities for calls.\n                // They are present in ie filter properties as shown below.\n                //\n                //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\n                //\n\n                assignment: function () {\n                    let key;\n                    let value;\n                    parserInput.save();\n                    key = parserInput.$re(/^\\w+(?=\\s?=)/i);\n                    if (!key) {\n                        parserInput.restore();\n                        return;\n                    }\n                    if (!parserInput.$char('=')) {\n                        parserInput.restore();\n                        return;\n                    }\n                    value = parsers.entity();\n                    if (value) {\n                        parserInput.forget();\n                        return new(tree.Assignment)(key, value);\n                    } else {\n                        parserInput.restore();\n                    }\n                },\n\n                //\n                // Parse url() tokens\n                //\n                // We use a specific rule for urls, because they don't really behave like\n                // standard function calls. The difference is that the argument doesn't have\n                // to be enclosed within a string, so it can't be parsed as an Expression.\n                //\n                url: function () {\n                    let value;\n                    const index = parserInput.i;\n\n                    parserInput.autoCommentAbsorb = false;\n\n                    if (!parserInput.$str('url(')) {\n                        parserInput.autoCommentAbsorb = true;\n                        return;\n                    }\n\n                    value = this.quoted() || this.variable() || this.property() ||\n                            parserInput.$re(/^(?:(?:\\\\[()'\"])|[^()'\"])+/) || '';\n\n                    parserInput.autoCommentAbsorb = true;\n\n                    expectChar(')');\n\n                    return new(tree.URL)((value.value !== undefined ||\n                        value instanceof tree.Variable ||\n                        value instanceof tree.Property) ?\n                        value : new(tree.Anonymous)(value, index), index + currentIndex, fileInfo);\n                },\n\n                //\n                // A Variable entity, such as `@fink`, in\n                //\n                //     width: @fink + 2px\n                //\n                // We use a different parser for variable definitions,\n                // see `parsers.variable`.\n                //\n                variable: function () {\n                    let ch;\n                    let name;\n                    const index = parserInput.i;\n\n                    parserInput.save();\n                    if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\\w-]+/))) {\n                        ch = parserInput.currentChar();\n                        if (ch === '(' || ch === '[' && !parserInput.prevChar().match(/^\\s/)) {\n                            // this may be a VariableCall lookup\n                            const result = parsers.variableCall(name);\n                            if (result) {\n                                parserInput.forget();\n                                return result;\n                            }\n                        }\n                        parserInput.forget();\n                        return new(tree.Variable)(name, index + currentIndex, fileInfo);\n                    }\n                    parserInput.restore();\n                },\n\n                // A variable entity using the protective {} e.g. @{var}\n                variableCurly: function () {\n                    let curly;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))) {\n                        return new(tree.Variable)(`@${curly[1]}`, index + currentIndex, fileInfo);\n                    }\n                },\n                //\n                // A Property accessor, such as `$color`, in\n                //\n                //     background-color: $color\n                //\n                property: function () {\n                    let name;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '$' && (name = parserInput.$re(/^\\$[\\w-]+/))) {\n                        return new(tree.Property)(name, index + currentIndex, fileInfo);\n                    }\n                },\n\n                // A property entity useing the protective {} e.g. ${prop}\n                propertyCurly: function () {\n                    let curly;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '$' && (curly = parserInput.$re(/^\\$\\{([\\w-]+)\\}/))) {\n                        return new(tree.Property)(`$${curly[1]}`, index + currentIndex, fileInfo);\n                    }\n                },\n                //\n                // A Hexadecimal color\n                //\n                //     #4F3C2F\n                //\n                // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\n                //\n                color: function () {\n                    let rgb;\n                    parserInput.save();\n\n                    if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})([\\w.#[])?/))) {\n                        if (!rgb[2]) {\n                            parserInput.forget();\n                            return new(tree.Color)(rgb[1], undefined, rgb[0]);\n                        }\n                    }\n                    parserInput.restore();\n                },\n\n                colorKeyword: function () {\n                    parserInput.save();\n                    const autoCommentAbsorb = parserInput.autoCommentAbsorb;\n                    parserInput.autoCommentAbsorb = false;\n                    const k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);\n                    parserInput.autoCommentAbsorb = autoCommentAbsorb;\n                    if (!k) {\n                        parserInput.forget();\n                        return;\n                    }\n                    parserInput.restore();\n                    const color = tree.Color.fromKeyword(k);\n                    if (color) {\n                        parserInput.$str(k);\n                        return color;\n                    }\n                },\n\n                //\n                // A Dimension, that is, a number and a unit\n                //\n                //     0.5em 95%\n                //\n                dimension: function () {\n                    if (parserInput.peekNotNumeric()) {\n                        return;\n                    }\n\n                    const value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i);\n                    if (value) {\n                        return new(tree.Dimension)(value[1], value[2]);\n                    }\n                },\n\n                //\n                // A unicode descriptor, as is used in unicode-range\n                //\n                // U+0??  or U+00A1-00A9\n                //\n                unicodeDescriptor: function () {\n                    let ud;\n\n                    ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(-[0-9a-fA-F?]+)?/);\n                    if (ud) {\n                        return new(tree.UnicodeDescriptor)(ud[0]);\n                    }\n                },\n\n                //\n                // JavaScript code to be evaluated\n                //\n                //     `window.location.href`\n                //\n                javascript: function () {\n                    let js;\n                    const index = parserInput.i;\n\n                    parserInput.save();\n\n                    const escape = parserInput.$char('~');\n                    const jsQuote = parserInput.$char('`');\n\n                    if (!jsQuote) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    js = parserInput.$re(/^[^`]*`/);\n                    if (js) {\n                        parserInput.forget();\n                        return new(tree.JavaScript)(js.substr(0, js.length - 1), Boolean(escape), index + currentIndex, fileInfo);\n                    }\n                    parserInput.restore('invalid javascript definition');\n                }\n            },\n\n            //\n            // The variable part of a variable definition. Used in the `rule` parser\n            //\n            //     @fink:\n            //\n            variable: function () {\n                let name;\n\n                if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))) { return name[1]; }\n            },\n\n            //\n            // Call a variable value to retrieve a detached ruleset\n            // or a value from a detached ruleset's rules.\n            //\n            //     @fink();\n            //     @fink;\n            //     color: @fink[@color];\n            //\n            variableCall: function (parsedName) {\n                let lookups;\n                const i = parserInput.i;\n                const inValue = !!parsedName;\n                let name = parsedName;\n\n                parserInput.save();\n\n                if (name || (parserInput.currentChar() === '@'\n                    && (name = parserInput.$re(/^(@[\\w-]+)(\\(\\s*\\))?/)))) {\n\n                    lookups = this.mixin.ruleLookups();\n\n                    if (!lookups && ((inValue && parserInput.$str('()') !== '()') || (name[2] !== '()'))) {\n                        parserInput.restore('Missing \\'[...]\\' lookup in variable call');\n                        return;\n                    }\n\n                    if (!inValue) {\n                        name = name[1];\n                    }\n\n                    const call = new tree.VariableCall(name, i, fileInfo);\n                    if (!inValue && parsers.end()) {\n                        parserInput.forget();\n                        return call;\n                    }\n                    else {\n                        parserInput.forget();\n                        return new tree.NamespaceValue(call, lookups, i, fileInfo);\n                    }\n                }\n\n                parserInput.restore();\n            },\n\n            //\n            // extend syntax - used to extend selectors\n            //\n            extend: function(isRule) {\n                let elements;\n                let e;\n                const index = parserInput.i;\n                let option;\n                let extendList;\n                let extend;\n\n                if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {\n                    return;\n                }\n\n                do {\n                    option = null;\n                    elements = null;\n                    while (!(option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\n                        e = this.element();\n                        if (!e) {\n                            break;\n                        }\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                    }\n\n                    option = option && option[1];\n                    if (!elements) {\n                        error('Missing target selector for :extend().');\n                    }\n                    extend = new(tree.Extend)(new(tree.Selector)(elements), option, index + currentIndex, fileInfo);\n                    if (extendList) {\n                        extendList.push(extend);\n                    } else {\n                        extendList = [ extend ];\n                    }\n                } while (parserInput.$char(','));\n\n                expect(/^\\)/);\n\n                if (isRule) {\n                    expect(/^;/);\n                }\n\n                return extendList;\n            },\n\n            //\n            // extendRule - used in a rule to extend all the parent selectors\n            //\n            extendRule: function() {\n                return this.extend(true);\n            },\n\n            //\n            // Mixins\n            //\n            mixin: {\n                //\n                // A Mixin call, with an optional argument list\n                //\n                //     #mixins > .square(#fff);\n                //     #mixins.square(#fff);\n                //     .rounded(4px, black);\n                //     .button;\n                //\n                // We can lookup / return a value using the lookup syntax:\n                //\n                //     color: #mixin.square(#fff)[@color];\n                //\n                // The `while` loop is there because mixins can be\n                // namespaced, but we only support the child and descendant\n                // selector for now.\n                //\n                call: function (inValue, getLookup) {\n                    const s = parserInput.currentChar();\n                    let important = false;\n                    let lookups;\n                    const index = parserInput.i;\n                    let elements;\n                    let args;\n                    let hasParens;\n\n                    if (s !== '.' && s !== '#') { return; }\n\n                    parserInput.save(); // stop us absorbing part of an invalid selector\n\n                    elements = this.elements();\n\n                    if (elements) {\n                        if (parserInput.$char('(')) {\n                            args = this.args(true).args;\n                            expectChar(')');\n                            hasParens = true;\n                        }\n\n                        if (getLookup !== false) {\n                            lookups = this.ruleLookups();\n                        }\n                        if (getLookup === true && !lookups) {\n                            parserInput.restore();\n                            return;\n                        }\n\n                        if (inValue && !lookups && !hasParens) {\n                            // This isn't a valid in-value mixin call\n                            parserInput.restore();\n                            return;\n                        }\n\n                        if (!inValue && parsers.important()) {\n                            important = true;\n                        }\n\n                        if (inValue || parsers.end()) {\n                            parserInput.forget();\n                            const mixin = new(tree.mixin.Call)(elements, args, index + currentIndex, fileInfo, !lookups && important);\n                            if (lookups) {\n                                return new tree.NamespaceValue(mixin, lookups);\n                            }\n                            else {\n                                return mixin;\n                            }\n                        }\n                    }\n\n                    parserInput.restore();\n                },\n                /**\n                 * Matching elements for mixins\n                 * (Start with . or # and can have > )\n                 */\n                elements: function() {\n                    let elements;\n                    let e;\n                    let c;\n                    let elem;\n                    let elemIndex;\n                    const re = /^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/;\n                    while (true) {\n                        elemIndex = parserInput.i;\n                        e = parserInput.$re(re);\n\n                        if (!e) {\n                            break;\n                        }\n                        elem = new(tree.Element)(c, e, false, elemIndex + currentIndex, fileInfo);\n                        if (elements) {\n                            elements.push(elem);\n                        } else {\n                            elements = [ elem ];\n                        }\n                        c = parserInput.$char('>');\n                    }\n                    return elements;\n                },\n                args: function (isCall) {\n                    const entities = parsers.entities;\n                    const returner = { args:null, variadic: false };\n                    let expressions = [];\n                    const argsSemiColon = [];\n                    const argsComma = [];\n                    let isSemiColonSeparated;\n                    let expressionContainsNamed;\n                    let name;\n                    let nameLoop;\n                    let value;\n                    let arg;\n                    let expand;\n                    let hasSep = true;\n\n                    parserInput.save();\n\n                    while (true) {\n                        if (isCall) {\n                            arg = parsers.detachedRuleset() || parsers.expression();\n                        } else {\n                            parserInput.commentStore.length = 0;\n                            if (parserInput.$str('...')) {\n                                returner.variadic = true;\n                                if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                    isSemiColonSeparated = true;\n                                }\n                                (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                    .push({ variadic: true });\n                                break;\n                            }\n                            arg = entities.variable() || entities.property() || entities.literal() || entities.keyword() || this.call(true);\n                        }\n\n                        if (!arg || !hasSep) {\n                            break;\n                        }\n\n                        nameLoop = null;\n                        if (arg.throwAwayComments) {\n                            arg.throwAwayComments();\n                        }\n                        value = arg;\n                        let val = null;\n\n                        if (isCall) {\n                            // Variable\n                            if (arg.value && arg.value.length == 1) {\n                                val = arg.value[0];\n                            }\n                        } else {\n                            val = arg;\n                        }\n\n                        if (val && (val instanceof tree.Variable || val instanceof tree.Property)) {\n                            if (parserInput.$char(':')) {\n                                if (expressions.length > 0) {\n                                    if (isSemiColonSeparated) {\n                                        error('Cannot mix ; and , as delimiter types');\n                                    }\n                                    expressionContainsNamed = true;\n                                }\n\n                                value = parsers.detachedRuleset() || parsers.expression();\n\n                                if (!value) {\n                                    if (isCall) {\n                                        error('could not understand value for named argument');\n                                    } else {\n                                        parserInput.restore();\n                                        returner.args = [];\n                                        return returner;\n                                    }\n                                }\n                                nameLoop = (name = val.name);\n                            } else if (parserInput.$str('...')) {\n                                if (!isCall) {\n                                    returner.variadic = true;\n                                    if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                        isSemiColonSeparated = true;\n                                    }\n                                    (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                        .push({ name: arg.name, variadic: true });\n                                    break;\n                                } else {\n                                    expand = true;\n                                }\n                            } else if (!isCall) {\n                                name = nameLoop = val.name;\n                                value = null;\n                            }\n                        }\n\n                        if (value) {\n                            expressions.push(value);\n                        }\n\n                        argsComma.push({ name:nameLoop, value, expand });\n\n                        if (parserInput.$char(',')) {\n                            hasSep = true;\n                            continue;\n                        }\n                        hasSep = parserInput.$char(';') === ';';\n\n                        if (hasSep || isSemiColonSeparated) {\n\n                            if (expressionContainsNamed) {\n                                error('Cannot mix ; and , as delimiter types');\n                            }\n\n                            isSemiColonSeparated = true;\n\n                            if (expressions.length > 1) {\n                                value = new(tree.Value)(expressions);\n                            }\n                            argsSemiColon.push({ name, value, expand });\n\n                            name = null;\n                            expressions = [];\n                            expressionContainsNamed = false;\n                        }\n                    }\n\n                    parserInput.forget();\n                    returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;\n                    return returner;\n                },\n                //\n                // A Mixin definition, with a list of parameters\n                //\n                //     .rounded (@radius: 2px, @color) {\n                //        ...\n                //     }\n                //\n                // Until we have a finer grained state-machine, we have to\n                // do a look-ahead, to make sure we don't have a mixin call.\n                // See the `rule` function for more information.\n                //\n                // We start by matching `.rounded (`, and then proceed on to\n                // the argument list, which has optional default values.\n                // We store the parameters in `params`, with a `value` key,\n                // if there is a value, such as in the case of `@radius`.\n                //\n                // Once we've got our params list, and a closing `)`, we parse\n                // the `{...}` block.\n                //\n                definition: function () {\n                    let name;\n                    let params = [];\n                    let match;\n                    let ruleset;\n                    let cond;\n                    let variadic = false;\n                    if ((parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#') ||\n                        parserInput.peek(/^[^{]*\\}/)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    match = parserInput.$re(/^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/);\n                    if (match) {\n                        name = match[1];\n\n                        const argInfo = this.args(false);\n                        params = argInfo.args;\n                        variadic = argInfo.variadic;\n\n                        // .mixincall(\"@{a}\");\n                        // looks a bit like a mixin definition..\n                        // also\n                        // .mixincall(@a: {rule: set;});\n                        // so we have to be nice and restore\n                        if (!parserInput.$char(')')) {\n                            parserInput.restore('Missing closing \\')\\'');\n                            return;\n                        }\n\n                        parserInput.commentStore.length = 0;\n\n                        if (parserInput.$str('when')) { // Guard\n                            cond = expect(parsers.conditions, 'expected condition');\n                        }\n\n                        ruleset = parsers.block();\n\n                        if (ruleset) {\n                            parserInput.forget();\n                            return new(tree.mixin.Definition)(name, params, ruleset, cond, variadic);\n                        } else {\n                            parserInput.restore();\n                        }\n                    } else {\n                        parserInput.restore();\n                    }\n                },\n\n                ruleLookups: function() {\n                    let rule;\n                    const lookups = [];\n\n                    if (parserInput.currentChar() !== '[') {\n                        return;\n                    }\n\n                    while (true) {\n                        parserInput.save();\n                        rule = this.lookupValue();\n                        if (!rule && rule !== '') {\n                            parserInput.restore();\n                            break;\n                        }\n                        lookups.push(rule);\n                        parserInput.forget();\n                    }\n                    if (lookups.length > 0) {\n                        return lookups;\n                    }\n                },\n\n                lookupValue: function() {\n                    parserInput.save();\n\n                    if (!parserInput.$char('[')) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    const name = parserInput.$re(/^(?:[@$]{0,2})[_a-zA-Z0-9-]*/);\n\n                    if (!parserInput.$char(']')) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    if (name || name === '') {\n                        parserInput.forget();\n                        return name;\n                    }\n\n                    parserInput.restore();\n                }\n            },\n            //\n            // Entities are the smallest recognized token,\n            // and can be found inside a rule's value.\n            //\n            entity: function () {\n                const entities = this.entities;\n\n                return this.comment() || entities.literal() || entities.variable() || entities.url() ||\n                    entities.property() || entities.call() || entities.keyword() || this.mixin.call(true) ||\n                    entities.javascript();\n            },\n\n            //\n            // A Declaration terminator. Note that we use `peek()` to check for '}',\n            // because the `block` rule will be expecting it, but we still need to make sure\n            // it's there, if ';' was omitted.\n            //\n            end: function () {\n                return parserInput.$char(';') || parserInput.peek('}');\n            },\n\n            //\n            // IE's alpha function\n            //\n            //     alpha(opacity=88)\n            //\n            ieAlpha: function () {\n                let value;\n\n                // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                if (!parserInput.$re(/^opacity=/i)) { return; }\n                value = parserInput.$re(/^\\d+/);\n                if (!value) {\n                    value = expect(parsers.entities.variable, 'Could not parse alpha');\n                    value = `@{${value.name.slice(1)}}`;\n                }\n                expectChar(')');\n                return new tree.Quoted('', `alpha(opacity=${value})`);\n            },\n\n            //\n            // A Selector Element\n            //\n            //     div\n            //     + h1\n            //     #socks\n            //     input[type=\"text\"]\n            //\n            // Elements are the building blocks for Selectors,\n            // they are made out of a `Combinator` (see combinator rule),\n            // and an element name, such as a tag a class, or `*`.\n            //\n            element: function () {\n                let e;\n                let c;\n                let v;\n                const index = parserInput.i;\n\n                c = this.combinator();\n\n                e = parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) ||\n                    // eslint-disable-next-line no-control-regex\n                    parserInput.$re(/^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) ||\n                    parserInput.$char('*') || parserInput.$char('&') || this.attribute() ||\n                    parserInput.$re(/^\\([^&()@]+\\)/) ||  parserInput.$re(/^[.#:](?=@)/) ||\n                    this.entities.variableCurly();\n\n                if (!e) {\n                    parserInput.save();\n                    if (parserInput.$char('(')) {\n                        if ((v = this.selector(false)) && parserInput.$char(')')) {\n                            e = new(tree.Paren)(v);\n                            parserInput.forget();\n                        } else {\n                            parserInput.restore('Missing closing \\')\\'');\n                        }\n                    } else {\n                        parserInput.forget();\n                    }\n                }\n\n                if (e) { return new(tree.Element)(c, e, e instanceof tree.Variable, index + currentIndex, fileInfo); }\n            },\n\n            //\n            // Combinators combine elements together, in a Selector.\n            //\n            // Because our parser isn't white-space sensitive, special care\n            // has to be taken, when parsing the descendant combinator, ` `,\n            // as it's an empty space. We have to check the previous character\n            // in the input, to see if it's a ` ` character. More info on how\n            // we deal with this in *combinator.js*.\n            //\n            combinator: function () {\n                let c = parserInput.currentChar();\n\n                if (c === '/') {\n                    parserInput.save();\n                    const slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i);\n                    if (slashedCombinator) {\n                        parserInput.forget();\n                        return new(tree.Combinator)(slashedCombinator);\n                    }\n                    parserInput.restore();\n                }\n\n                if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\n                    parserInput.i++;\n                    if (c === '^' && parserInput.currentChar() === '^') {\n                        c = '^^';\n                        parserInput.i++;\n                    }\n                    while (parserInput.isWhitespace()) { parserInput.i++; }\n                    return new(tree.Combinator)(c);\n                } else if (parserInput.isWhitespace(-1)) {\n                    return new(tree.Combinator)(' ');\n                } else {\n                    return new(tree.Combinator)(null);\n                }\n            },\n            //\n            // A CSS Selector\n            // with less extensions e.g. the ability to extend and guard\n            //\n            //     .class > div + h1\n            //     li a:hover\n            //\n            // Selectors are made out of one or more Elements, see above.\n            //\n            selector: function (isLess) {\n                const index = parserInput.i;\n                let elements;\n                let extendList;\n                let c;\n                let e;\n                let allExtends;\n                let when;\n                let condition;\n                isLess = isLess !== false;\n                while ((isLess && (extendList = this.extend())) || (isLess && (when = parserInput.$str('when'))) || (e = this.element())) {\n                    if (when) {\n                        condition = expect(this.conditions, 'expected condition');\n                    } else if (condition) {\n                        error('CSS guard can only be used at the end of selector');\n                    } else if (extendList) {\n                        if (allExtends) {\n                            allExtends = allExtends.concat(extendList);\n                        } else {\n                            allExtends = extendList;\n                        }\n                    } else {\n                        if (allExtends) { error('Extend can only be used at the end of selector'); }\n                        c = parserInput.currentChar();\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                        e = null;\n                    }\n                    if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\n                        break;\n                    }\n                }\n\n                if (elements) { return new(tree.Selector)(elements, allExtends, condition, index + currentIndex, fileInfo); }\n                if (allExtends) { error('Extend must be used to extend a selector, it cannot be used on its own'); }\n            },\n            selectors: function () {\n                let s;\n                let selectors;\n                while (true) {\n                    s = this.selector();\n                    if (!s) {\n                        break;\n                    }\n                    if (selectors) {\n                        selectors.push(s);\n                    } else {\n                        selectors = [ s ];\n                    }\n                    parserInput.commentStore.length = 0;\n                    if (s.condition && selectors.length > 1) {\n                        error('Guards are only currently allowed on a single selector.');\n                    }\n                    if (!parserInput.$char(',')) { break; }\n                    if (s.condition) {\n                        error('Guards are only currently allowed on a single selector.');\n                    }\n                    parserInput.commentStore.length = 0;\n                }\n                return selectors;\n            },\n            attribute: function () {\n                if (!parserInput.$char('[')) { return; }\n\n                const entities = this.entities;\n                let key;\n                let val;\n                let op;\n                //\n                // case-insensitive flag\n                // e.g. [attr operator value i]\n                //\n                let cif;\n\n                if (!(key = entities.variableCurly())) {\n                    key = expect(/^(?:[_A-Za-z0-9-*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/);\n                }\n\n                op = parserInput.$re(/^[|~*$^]?=/);\n                if (op) {\n                    val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\\w-]+/) || entities.variableCurly();\n                    if (val) {\n                        cif = parserInput.$re(/^[iIsS]/);\n                    }\n                }\n\n                expectChar(']');\n\n                return new(tree.Attribute)(key, op, val, cif);\n            },\n\n            //\n            // The `block` rule is used by `ruleset` and `mixin.definition`.\n            // It's a wrapper around the `primary` rule, with added `{}`.\n            //\n            block: function () {\n                let content;\n                if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {\n                    return content;\n                }\n            },\n\n            blockRuleset: function() {\n                let block = this.block();\n\n                if (block) {\n                    block = new tree.Ruleset(null, block);\n                }\n                return block;\n            },\n\n            detachedRuleset: function() {\n                let argInfo;\n                let params;\n                let variadic;\n\n                parserInput.save();\n                if (parserInput.$re(/^[.#]\\(/)) {\n                    /**\n                     * DR args currently only implemented for each() function, and not\n                     * yet settable as `@dr: #(@arg) {}`\n                     * This should be done when DRs are merged with mixins.\n                     * See: https://github.com/less/less-meta/issues/16\n                     */\n                    argInfo = this.mixin.args(false);\n                    params = argInfo.args;\n                    variadic = argInfo.variadic;\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore();\n                        return;\n                    }\n                }\n                const blockRuleset = this.blockRuleset();\n                if (blockRuleset) {\n                    parserInput.forget();\n                    if (params) {\n                        return new tree.mixin.Definition(null, params, blockRuleset, null, variadic);\n                    }\n                    return new tree.DetachedRuleset(blockRuleset);\n                }\n                parserInput.restore();\n            },\n\n            //\n            // div, .class, body > p {...}\n            //\n            ruleset: function () {\n                let selectors;\n                let rules;\n                let debugInfo;\n\n                parserInput.save();\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(parserInput.i);\n                }\n\n                selectors = this.selectors();\n\n                if (selectors && (rules = this.block())) {\n                    parserInput.forget();\n                    const ruleset = new(tree.Ruleset)(selectors, rules, context.strictImports);\n                    if (context.dumpLineNumbers) {\n                        ruleset.debugInfo = debugInfo;\n                    }\n                    return ruleset;\n                } else {\n                    parserInput.restore();\n                }\n            },\n            declaration: function () {\n                let name;\n                let value;\n                const index = parserInput.i;\n                let hasDR;\n                const c = parserInput.currentChar();\n                let important;\n                let merge;\n                let isVariable;\n\n                if (c === '.' || c === '#' || c === '&' || c === ':') { return; }\n\n                parserInput.save();\n\n                name = this.variable() || this.ruleProperty();\n                if (name) {\n                    isVariable = typeof name === 'string';\n\n                    if (isVariable) {\n                        value = this.detachedRuleset();\n                        if (value) {\n                            hasDR = true;\n                        }\n                    }\n\n                    parserInput.commentStore.length = 0;\n                    if (!value) {\n                        // a name returned by this.ruleProperty() is always an array of the form:\n                        // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\n                        // where each item is a tree.Keyword or tree.Variable\n                        merge = !isVariable && name.length > 1 && name.pop().value;\n\n                        // Custom property values get permissive parsing\n                        if (name[0].value && name[0].value.slice(0, 2) === '--') {\n                            value = this.permissiveValue(/[;}]/);\n                        }\n                        // Try to store values as anonymous\n                        // If we need the value later we'll re-parse it in ruleset.parseValue\n                        else {\n                            value = this.anonymousValue();\n                        }\n                        if (value) {\n                            parserInput.forget();\n                            // anonymous values absorb the end ';' which is required for them to work\n                            return new(tree.Declaration)(name, value, false, merge, index + currentIndex, fileInfo);\n                        }\n\n                        if (!value) {\n                            value = this.value();\n                        }\n\n                        if (value) {\n                            important = this.important();\n                        } else if (isVariable) {\n                            // As a last resort, try permissiveValue\n                            value = this.permissiveValue();\n                        }\n                    }\n\n                    if (value && (this.end() || hasDR)) {\n                        parserInput.forget();\n                        return new(tree.Declaration)(name, value, important, merge, index + currentIndex, fileInfo);\n                    }\n                    else {\n                        parserInput.restore();\n                    }\n                } else {\n                    parserInput.restore();\n                }\n            },\n            anonymousValue: function () {\n                const index = parserInput.i;\n                const match = parserInput.$re(/^([^.#@$+/'\"*`(;{}-]*);/);\n                if (match) {\n                    return new(tree.Anonymous)(match[1], index + currentIndex);\n                }\n            },\n            /**\n             * Used for custom properties, at-rules, and variables (as fallback)\n             * Parses almost anything inside of {} [] () \"\" blocks\n             * until it reaches outer-most tokens.\n             *\n             * First, it will try to parse comments and entities to reach\n             * the end. This is mostly like the Expression parser except no\n             * math is allowed.\n             */\n            permissiveValue: function (untilTokens) {\n                let i;\n                let e;\n                let done;\n                let value;\n                const tok = untilTokens || ';';\n                const index = parserInput.i;\n                const result = [];\n\n                function testCurrentChar() {\n                    const char = parserInput.currentChar();\n                    if (typeof tok === 'string') {\n                        return char === tok;\n                    } else {\n                        return tok.test(char);\n                    }\n                }\n                if (testCurrentChar()) {\n                    return;\n                }\n                value = [];\n                do {\n                    e = this.comment();\n                    if (e) {\n                        value.push(e);\n                        continue;\n                    }\n                    e = this.entity();\n                    if (e) {\n                        value.push(e);\n                    }\n                    if (parserInput.peek(',')) {\n                        value.push(new (tree.Anonymous)(',', parserInput.i));\n                        parserInput.$char(',');\n                    }\n                } while (e);\n\n                done = testCurrentChar();\n\n                if (value.length > 0) {\n                    value = new(tree.Expression)(value);\n                    if (done) {\n                        return value;\n                    }\n                    else {\n                        result.push(value);\n                    }\n                    // Preserve space before $parseUntil as it will not\n                    if (parserInput.prevChar() === ' ') {\n                        result.push(new tree.Anonymous(' ', index));\n                    }\n                }\n                parserInput.save();\n\n                value = parserInput.$parseUntil(tok);\n\n                if (value) {\n                    if (typeof value === 'string') {\n                        error(`Expected '${value}'`, 'Parse');\n                    }\n                    if (value.length === 1 && value[0] === ' ') {\n                        parserInput.forget();\n                        return new tree.Anonymous('', index);\n                    }\n                    let item;\n                    for (i = 0; i < value.length; i++) {\n                        item = value[i];\n                        if (Array.isArray(item)) {\n                            // Treat actual quotes as normal quoted values\n                            result.push(new tree.Quoted(item[0], item[1], true, index, fileInfo));\n                        }\n                        else {\n                            if (i === value.length - 1) {\n                                item = item.trim();\n                            }\n                            // Treat like quoted values, but replace vars like unquoted expressions\n                            const quote = new tree.Quoted('\\'', item, true, index, fileInfo);\n                            quote.variableRegex = /@([\\w-]+)/g;\n                            quote.propRegex = /\\$([\\w-]+)/g;\n                            result.push(quote);\n                        }\n                    }\n                    parserInput.forget();\n                    return new tree.Expression(result, true);\n                }\n                parserInput.restore();\n            },\n\n            //\n            // An @import atrule\n            //\n            //     @import \"lib\";\n            //\n            // Depending on our environment, importing is done differently:\n            // In the browser, it's an XHR request, in Node, it would be a\n            // file-system operation. The function used for importing is\n            // stored in `import`, which we pass to the Import constructor.\n            //\n            'import': function () {\n                let path;\n                let features;\n                const index = parserInput.i;\n\n                const dir = parserInput.$re(/^@import\\s+/);\n\n                if (dir) {\n                    const options = (dir ? this.importOptions() : null) || {};\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n                        features = this.mediaFeatures({});\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error('missing semi-colon or unrecognised media features on import');\n                        }\n                        features = features && new(tree.Value)(features);\n                        return new(tree.Import)(path, features, options, index + currentIndex, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error('malformed import statement');\n                    }\n                }\n            },\n\n            importOptions: function() {\n                let o;\n                const options = {};\n                let optionName;\n                let value;\n\n                // list of options, surrounded by parens\n                if (!parserInput.$char('(')) { return null; }\n                do {\n                    o = this.importOption();\n                    if (o) {\n                        optionName = o;\n                        value = true;\n                        switch (optionName) {\n                            case 'css':\n                                optionName = 'less';\n                                value = false;\n                                break;\n                            case 'once':\n                                optionName = 'multiple';\n                                value = false;\n                                break;\n                        }\n                        options[optionName] = value;\n                        if (!parserInput.$char(',')) { break; }\n                    }\n                } while (o);\n                expectChar(')');\n                return options;\n            },\n\n            importOption: function() {\n                const opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);\n                if (opt) {\n                    return opt[1];\n                }\n            },\n\n            mediaFeature: function (syntaxOptions) {\n                const entities = this.entities;\n                const nodes = [];\n                let e;\n                let p;\n                let rangeP;\n                parserInput.save();\n                do {\n                    e = entities.declarationCall.bind(this)() || entities.keyword() || entities.variable() || entities.mixinLookup()\n                    if (e) {\n                        nodes.push(e);\n                    } else if (parserInput.$char('(')) {\n                        p = this.property();\n                        parserInput.save();\n                        if (!p && syntaxOptions.queryInParens && parserInput.$re(/^[0-9a-z-]*\\s*([<>]=|<=|>=|[<>]|=)/)) {\n                            parserInput.restore();\n                            p = this.condition();\n\n                            parserInput.save();\n                            rangeP = this.atomicCondition(null, p.rvalue);\n                            if (!rangeP) {\n                                parserInput.restore();\n                            }\n                        } else {\n                            parserInput.restore();\n                            e = this.value();\n                        }\n\n                        if (syntaxOptions.scopeAtRule && !p && syntaxOptions.queryInParens) {\n                            parserInput.restore();\n                            p = this.selector();\n                            if (p) {\n                                nodes.push(p);\n                            }\n                        } else if (parserInput.$char(')')) {\n                            if (p && !e) {\n                                nodes.push(new (tree.Paren)(new (tree.QueryInParens)(p.op, p.lvalue, p.rvalue, rangeP ? rangeP.op : null, rangeP ? rangeP.rvalue : null, p._index)));\t\t\t\t \n                                e = p;\n                            } else if (p && e) {\n                                nodes.push(new (tree.Paren)(new (tree.Declaration)(p, e, null, null, parserInput.i + currentIndex, fileInfo, true)));\n                            } else if (e) {\n                                nodes.push(new(tree.Paren)(e));\n                            } else {\n                                error('badly formed media feature definition');\n                            }\n                        } else {\n                            error('Missing closing \\')\\'', 'Parse');\n                        }\n                    }\n                } while (e);\n\n                parserInput.forget();\n                if (nodes.length > 0) {\n                    return new(tree.Expression)(nodes);\n                }\n            },\n\n            mediaFeatures: function (syntaxOptions) {\n                const entities = this.entities;\n                const features = [];\n                let e;\n                do {\n                    e = this.mediaFeature(syntaxOptions);\n                    if (e) {\n                        features.push(e);\n                        if (!parserInput.$char(',')) { break; }\n                    } else {\n                        e = entities.variable() || entities.mixinLookup();\n                        if (e) {\n                            features.push(e);\n                            if (!parserInput.$char(',')) { break; }\n                        }\n                    }\n                } while (e);\n\n                return features.length > 0 ? features : null;\n            },\n\n            prepareStartingStyleAtRule: function(index, debugInfo) {\n                const rules = [];\n\n                if (parserInput.$re(/.*{/)) {\n                    let e;\n\n                    while (e = this.declaration()) {\n                        rules.push(e);\n                    }\n                }\n                if (rules.length === 0) {\n                    parserInput.restore();\n\n                    return this.prepareAndGetNestableAtRule(tree.StartingStyle, index, debugInfo, StartingStyleSyntaxOptions);\n                } else if (parserInput.$char('}')) {\n                    const atRule = new (tree.StartingStyle)(rules, [], index + currentIndex, fileInfo);\n                  \n                    if (context.dumpLineNumbers) {\n                        atRule.debugInfo = debugInfo;\n                    }\n\n                    return atRule;  \n                } else {\n                    error('starting-style definitions require declarations or rulesets');\n                }\n            },\n\n            prepareAndGetNestableAtRule: function (treeType, index, debugInfo, syntaxOptions) {\n                const features = this.mediaFeatures(syntaxOptions);\n\n                const rules = this.block();\n\n                if (!rules) {\n                    error('media definitions require block statements after any features');\n                }\n\n                parserInput.forget();\n\n                const atRule = new (treeType)(rules, features, index + currentIndex, fileInfo);\n                if (context.dumpLineNumbers) {\n                    atRule.debugInfo = debugInfo;\n                }\n\n                return atRule;\n            },\n\n            nestableAtRule: function () {\n                let debugInfo;\n                const index = parserInput.i;\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(index);\n                }\n                parserInput.save();\n\n                if (parserInput.$peekChar('@')) {\n                    if (parserInput.$str('@media')) {\n                        return this.prepareAndGetNestableAtRule(tree.Media, index, debugInfo, MediaSyntaxOptions);\n                    }\n                    else if (parserInput.$str('@container')) {\n                        return this.prepareAndGetNestableAtRule(tree.Container, index, debugInfo, ContainerSyntaxOptions);\n                    }\n                    else if (parserInput.$str('@starting-style')) {\n                        return this.prepareStartingStyleAtRule(index, debugInfo);\n                    }\n                    else if (parserInput.$str('@scope')) {\n                        return this.prepareAndGetNestableAtRule(tree.Scope, index, debugInfo, ScopeSyntaxOptions);\n                    }\n                }\n                \n                parserInput.restore();\n            },\n\n            //\n\n            // A @plugin directive, used to import plugins dynamically.\n            //\n            //     @plugin (args) \"lib\";\n            //\n            plugin: function () {\n                let path;\n                let args;\n                let options;\n                const index = parserInput.i;\n                const dir   = parserInput.$re(/^@plugin\\s+/);\n\n                if (dir) {\n                    args = this.pluginArgs();\n\n                    if (args) {\n                        options = {\n                            pluginArgs: args,\n                            isPlugin: true\n                        };\n                    }\n                    else {\n                        options = { isPlugin: true };\n                    }\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error('missing semi-colon on @plugin');\n                        }\n                        return new(tree.Import)(path, null, options, index + currentIndex, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error('malformed @plugin statement');\n                    }\n                }\n            },\n\n            pluginArgs: function() {\n                // list of options, surrounded by parens\n                parserInput.save();\n                if (!parserInput.$char('(')) {\n                    parserInput.restore();\n                    return null;\n                }\n                const args = parserInput.$re(/^\\s*([^);]+)\\)\\s*/);\n                if (args[1]) {\n                    parserInput.forget();\n                    return args[1].trim();\n                }\n                else {\n                    parserInput.restore();\n                    return null;\n                }\n            },\n\n            //\n            // A CSS AtRule\n            //\n            //     @charset \"utf-8\";\n            //\n            atrule: function () {\n                const index = parserInput.i;\n                let name;\n                let value;\n                let rules;\n                let nonVendorSpecificName;\n                let hasIdentifier;\n                let hasExpression;\n                let hasUnknown;\n                let hasBlock = true;\n                let isRooted = true;\n\n                if (parserInput.currentChar() !== '@') { return; }\n\n                value = this['import']() || this.plugin() || this.nestableAtRule();\n                if (value) {\n                    return value;\n                }\n\n                parserInput.save();\n\n                name = parserInput.$re(/^@[a-z-]+/);\n\n                if (!name) { return; }\n\n                nonVendorSpecificName = name;\n                if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\n                    nonVendorSpecificName = `@${name.slice(name.indexOf('-', 2) + 1)}`;\n                }\n\n                switch (nonVendorSpecificName) {\n                    case '@charset':\n                        hasIdentifier = true;\n                        hasBlock = false;\n                        break;\n                    case '@namespace':\n                        hasExpression = true;\n                        hasBlock = false;\n                        break;\n                    case '@keyframes':\n                    case '@counter-style':\n                        hasIdentifier = true;\n                        break;\n                    case '@document':\n                    case '@supports':\n                        hasUnknown = true;\n                        isRooted = false;\n                        break;\n                    default:\n                        hasUnknown = true;\n                        break;\n                }\n\n                parserInput.commentStore.length = 0;\n\n                if (hasIdentifier) {\n                    value = this.entity();\n                    if (!value) {\n                        error(`expected ${name} identifier`);\n                    }\n                } else if (hasExpression) {\n                    value = this.expression();\n                    if (!value) {\n                        error(`expected ${name} expression`);\n                    }\n                } else if (hasUnknown) {\n                    value = this.permissiveValue(/^[{;]/);\n                    hasBlock = (parserInput.currentChar() === '{');\n                    if (!value) {\n                        if (!hasBlock && parserInput.currentChar() !== ';') {\n                            error(`${name} rule is missing block or ending semi-colon`);\n                        }\n                    }\n                    else if (!value.value) {\n                        value = null;\n                    }\n                }\n\n                if (hasBlock) {\n                    rules = this.blockRuleset();\n                }\n\n                if (rules || (!hasBlock && value && parserInput.$char(';'))) {\n                    parserInput.forget();\n                    return new(tree.AtRule)(name, value, rules, index + currentIndex, fileInfo,\n                        context.dumpLineNumbers ? getDebugInfo(index) : null,\n                        isRooted\n                    );\n                }\n\n                parserInput.restore('at-rule options not recognised');\n            },\n\n            //\n            // A Value is a comma-delimited list of Expressions\n            //\n            //     font-family: Baskerville, Georgia, serif;\n            //\n            // In a Rule, a Value represents everything after the `:`,\n            // and before the `;`.\n            //\n            value: function () {\n                let e;\n                const expressions = [];\n                const index = parserInput.i;\n\n                do {\n                    e = this.expression();\n                    if (e) {\n                        expressions.push(e);\n                        if (!parserInput.$char(',')) { break; }\n                    }\n                } while (e);\n\n                if (expressions.length > 0) {\n                    return new(tree.Value)(expressions, index + currentIndex);\n                }\n            },\n            important: function () {\n                if (parserInput.currentChar() === '!') {\n                    return parserInput.$re(/^! *important/);\n                }\n            },\n            sub: function () {\n                let a;\n                let e;\n\n                parserInput.save();\n                if (parserInput.$char('(')) {\n                    a = this.addition();\n                    if (a && parserInput.$char(')')) {\n                        parserInput.forget();\n                        e = new(tree.Expression)([a]);\n                        e.parens = true;\n                        return e;\n                    }\n                    parserInput.restore('Expected \\')\\'');\n                    return;\n                }\n                parserInput.restore();\n            },\n            multiplication: function () {\n                let m;\n                let a;\n                let op;\n                let operation;\n                let isSpaced;\n                m = this.operand();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        if (parserInput.peek(/^\\/[*/]/)) {\n                            break;\n                        }\n\n                        parserInput.save();\n\n                        op = parserInput.$char('/') || parserInput.$char('*') || parserInput.$str('./');\n\n                        if (!op) { parserInput.forget(); break; }\n\n                        a = this.operand();\n\n                        if (!a) { parserInput.restore(); break; }\n                        parserInput.forget();\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            addition: function () {\n                let m;\n                let a;\n                let op;\n                let operation;\n                let isSpaced;\n                m = this.multiplication();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        op = parserInput.$re(/^[-+]\\s+/) || (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')));\n                        if (!op) {\n                            break;\n                        }\n                        a = this.multiplication();\n                        if (!a) {\n                            break;\n                        }\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            conditions: function () {\n                let a;\n                let b;\n                const index = parserInput.i;\n                let condition;\n\n                a = this.condition(true);\n                if (a) {\n                    while (true) {\n                        if (!parserInput.peek(/^,\\s*(not\\s*)?\\(/) || !parserInput.$char(',')) {\n                            break;\n                        }\n                        b = this.condition(true);\n                        if (!b) {\n                            break;\n                        }\n                        condition = new(tree.Condition)('or', condition || a, b, index + currentIndex);\n                    }\n                    return condition || a;\n                }\n            },\n            condition: function (needsParens) {\n                let result;\n                let logical;\n                let next;\n                function or() {\n                    return parserInput.$str('or');\n                }\n\n                result = this.conditionAnd(needsParens);\n                if (!result) {\n                    return ;\n                }\n                logical = or();\n                if (logical) {\n                    next = this.condition(needsParens);\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            conditionAnd: function (needsParens) {\n                let result;\n                let logical;\n                let next;\n                const self = this;\n                function insideCondition() {\n                    const cond = self.negatedCondition(needsParens) || self.parenthesisCondition(needsParens);\n                    if (!cond && !needsParens) {\n                        return self.atomicCondition(needsParens);\n                    }\n                    return cond;\n                }\n                function and() {\n                    return parserInput.$str('and');\n                }\n\n                result = insideCondition();\n                if (!result) {\n                    return ;\n                }\n                logical = and();\n                if (logical) {\n                    next = this.conditionAnd(needsParens);\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            negatedCondition: function (needsParens) {\n                if (parserInput.$str('not')) {\n                    const result = this.parenthesisCondition(needsParens);\n                    if (result) {\n                        result.negate = !result.negate;\n                    }\n                    return result;\n                }\n            },\n            parenthesisCondition: function (needsParens) {\n                function tryConditionFollowedByParenthesis(me) {\n                    let body;\n                    parserInput.save();\n                    body = me.condition(needsParens);\n                    if (!body) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    parserInput.forget();\n                    return body;\n                }\n\n                let body;\n                parserInput.save();\n                if (!parserInput.$str('(')) {\n                    parserInput.restore();\n                    return ;\n                }\n                body = tryConditionFollowedByParenthesis(this);\n                if (body) {\n                    parserInput.forget();\n                    return body;\n                }\n\n                body = this.atomicCondition(needsParens);\n                if (!body) {\n                    parserInput.restore();\n                    return ;\n                }\n                if (!parserInput.$char(')')) {\n                    parserInput.restore(`expected ')' got '${parserInput.currentChar()}'`);\n                    return ;\n                }\n                parserInput.forget();\n                return body;\n            },\n            atomicCondition: function (needsParens, preparsedCond) {\n                const entities = this.entities;\n                const index = parserInput.i;\n                let a;\n                let b;\n                let c;\n                let op;\n\n                const cond = (function() {\n                    return this.addition() || entities.keyword() || entities.quoted() || entities.mixinLookup();\n                }).bind(this)\n\n                if (preparsedCond) {\n                    a = preparsedCond;\n                } else {\n                    a = cond();\n                }\n\n                if (a) {\n                    if (parserInput.$char('>')) {\n                        if (parserInput.$char('=')) {\n                            op = '>=';\n                        } else {\n                            op = '>';\n                        }\n                    } else\n                    if (parserInput.$char('<')) {\n                        if (parserInput.$char('=')) {\n                            op = '<=';\n                        } else {\n                            op = '<';\n                        }\n                    } else\n                    if (parserInput.$char('=')) {\n                        if (parserInput.$char('>')) {\n                            op = '=>';\n                        } else if (parserInput.$char('<')) {\n                            op = '=<';\n                        } else {\n                            op = '=';\n                        }\n                    }\n                    if (op) {\n                        b = cond();\n                        if (b) {\n                            c = new(tree.Condition)(op, a, b, index + currentIndex, false);\n                        } else {\n                            error('expected expression');\n                        }\n                    } else if (!preparsedCond) {\n                        c = new(tree.Condition)('=', a, new(tree.Keyword)('true'), index + currentIndex, false);\n                    }\n                    return c;\n                }\n            },\n\n            //\n            // An operand is anything that can be part of an operation,\n            // such as a Color, or a Variable\n            //\n            operand: function () {\n                const entities = this.entities;\n                let negate;\n\n                if (parserInput.peek(/^-[@$(]/)) {\n                    negate = parserInput.$char('-');\n                }\n\n                let o = this.sub() || entities.dimension() ||\n                        entities.color() || entities.variable() ||\n                        entities.property() || entities.call() ||\n                        entities.quoted(true) || entities.colorKeyword() ||\n                        entities.mixinLookup();\n\n                if (negate) {\n                    o.parensInOp = true;\n                    o = new(tree.Negative)(o);\n                }\n\n                return o;\n            },\n\n            //\n            // Expressions either represent mathematical operations,\n            // or white-space delimited Entities.\n            //\n            //     1px solid black\n            //     @var * 2\n            //\n            expression: function () {\n                const entities = [];\n                let e;\n                let delim;\n                const index = parserInput.i;\n\n                do {\n                    e = this.comment();\n                    if (e) {\n                        entities.push(e);\n                        continue;\n                    }\n                    e = this.addition() || this.entity();\n\n                    if (e instanceof tree.Comment) {\n                        e = null;\n                    }\n\n                    if (e) {\n                        entities.push(e);\n                        // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\n                        if (!parserInput.peek(/^\\/[/*]/)) {\n                            delim = parserInput.$char('/');\n                            if (delim) {\n                                entities.push(new(tree.Anonymous)(delim, index + currentIndex));\n                            }\n                        }\n                    }\n                } while (e);\n                if (entities.length > 0) {\n                    return new(tree.Expression)(entities);\n                }\n            },\n            property: function () {\n                const name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/);\n                if (name) {\n                    return name[1];\n                }\n            },\n            ruleProperty: function () {\n                let name = [];\n                const index = [];\n                let s;\n                let k;\n\n                parserInput.save();\n\n                const simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/);\n                if (simpleProperty) {\n                    name = [new(tree.Keyword)(simpleProperty[1])];\n                    parserInput.forget();\n                    return name;\n                }\n\n                function match(re) {\n                    const i = parserInput.i;\n                    const chunk = parserInput.$re(re);\n                    if (chunk) {\n                        index.push(i);\n                        return name.push(chunk[1]);\n                    }\n                }\n\n                match(/^(\\*?)/);\n                while (true) {\n                    if (!match(/^((?:[\\w-]+)|(?:[@$]\\{[\\w-]+\\}))/)) {\n                        break;\n                    }\n                }\n\n                if ((name.length > 1) && match(/^((?:\\+_|\\+)?)\\s*:/)) {\n                    parserInput.forget();\n\n                    // at last, we have the complete match now. move forward,\n                    // convert name particles to tree objects and return:\n                    if (name[0] === '') {\n                        name.shift();\n                        index.shift();\n                    }\n                    for (k = 0; k < name.length; k++) {\n                        s = name[k];\n                        name[k] = (s.charAt(0) !== '@' && s.charAt(0) !== '$') ?\n                            new(tree.Keyword)(s) :\n                            (s.charAt(0) === '@' ?\n                                new(tree.Variable)(`@${s.slice(2, -1)}`, index[k] + currentIndex, fileInfo) :\n                                new(tree.Property)(`$${s.slice(2, -1)}`, index[k] + currentIndex, fileInfo));\n                    }\n                    return name;\n                }\n                parserInput.restore();\n            }\n        }\n    };\n};\nParser.serializeVars = vars => {\n    let s = '';\n\n    for (const name in vars) {\n        if (Object.hasOwnProperty.call(vars, name)) {\n            const value = vars[name];\n            s += `${((name[0] === '@') ? '' : '@') + name}: ${value}${(String(value).slice(-1) === ';') ? '' : ';'}`;\n        }\n    }\n\n    return s;\n};\n\nexport default Parser;","import Node from './node';\nimport Element from './element';\nimport LessError from '../less-error';\nimport * as utils from '../utils';\nimport Parser from '../parser/parser';\n\nconst Selector = function(elements, extendList, condition, index, currentFileInfo, visibilityInfo) {\n    this.extendList = extendList;\n    this.condition = condition;\n    this.evaldCondition = !condition;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.elements = this.getElements(elements);\n    this.mixinElements_ = undefined;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.setParent(this.elements, this);\n};\n\nSelector.prototype = Object.assign(new Node(), {\n    type: 'Selector',\n\n    accept(visitor) {\n        if (this.elements) {\n            this.elements = visitor.visitArray(this.elements);\n        }\n        if (this.extendList) {\n            this.extendList = visitor.visitArray(this.extendList);\n        }\n        if (this.condition) {\n            this.condition = visitor.visit(this.condition);\n        }\n    },\n\n    createDerived(elements, extendList, evaldCondition) {\n        elements = this.getElements(elements);\n        const newSelector = new Selector(elements, extendList || this.extendList,\n            null, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n        newSelector.evaldCondition = (!utils.isNullOrUndefined(evaldCondition)) ? evaldCondition : this.evaldCondition;\n        newSelector.mediaEmpty = this.mediaEmpty;\n        return newSelector;\n    },\n\n    getElements(els) {\n        if (!els) {\n            return [new Element('', '&', false, this._index, this._fileInfo)];\n        }\n        if (typeof els === 'string') {\n            new Parser(this.parse.context, this.parse.importManager, this._fileInfo, this._index).parseNode(\n                els,\n                ['selector'],\n                function(err, result) {\n                    if (err) {\n                        throw new LessError({\n                            index: err.index,\n                            message: err.message\n                        }, this.parse.imports, this._fileInfo.filename);\n                    }\n                    els = result[0].elements;\n                });\n        }\n        return els;\n    },\n\n    createEmptySelectors() {\n        const el = new Element('', '&', false, this._index, this._fileInfo), sels = [new Selector([el], null, null, this._index, this._fileInfo)];\n        sels[0].mediaEmpty = true;\n        return sels;\n    },\n\n    match(other) {\n        const elements = this.elements;\n        const len = elements.length;\n        let olen;\n        let i;\n\n        other = other.mixinElements();\n        olen = other.length;\n        if (olen === 0 || len < olen) {\n            return 0;\n        } else {\n            for (i = 0; i < olen; i++) {\n                if (elements[i].value !== other[i]) {\n                    return 0;\n                }\n            }\n        }\n\n        return olen; // return number of matched elements\n    },\n\n    mixinElements() {\n        if (this.mixinElements_) {\n            return this.mixinElements_;\n        }\n\n        let elements = this.elements.map( function(v) {\n            return v.combinator.value + (v.value.value || v.value);\n        }).join('').match(/[,&#*.\\w-]([\\w-]|(\\\\.))*/g);\n\n        if (elements) {\n            if (elements[0] === '&') {\n                elements.shift();\n            }\n        } else {\n            elements = [];\n        }\n\n        return (this.mixinElements_ = elements);\n    },\n\n    isJustParentSelector() {\n        return !this.mediaEmpty &&\n            this.elements.length === 1 &&\n            this.elements[0].value === '&' &&\n            (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');\n    },\n\n    eval(context) {\n        const evaldCondition = this.condition && this.condition.eval(context);\n        let elements = this.elements;\n        let extendList = this.extendList;\n\n        elements = elements && elements.map(function (e) { return e.eval(context); });\n        extendList = extendList && extendList.map(function(extend) { return extend.eval(context); });\n\n        return this.createDerived(elements, extendList, evaldCondition);\n    },\n\n    genCSS(context, output) {\n        let i, element;\n        if ((!context || !context.firstSelector) && this.elements[0].combinator.value === '') {\n            output.add(' ', this.fileInfo(), this.getIndex());\n        }\n        for (i = 0; i < this.elements.length; i++) {\n            element = this.elements[i];\n            element.genCSS(context, output);\n        }\n    },\n\n    getIsOutput() {\n        return this.evaldCondition;\n    }\n});\n\nexport default Selector;\n","import Node from './node';\n\nconst Value = function(value) {\n    if (!value) {\n        throw new Error('Value requires an array argument');\n    }\n    if (!Array.isArray(value)) {\n        this.value = [ value ];\n    }\n    else {\n        this.value = value;\n    }\n};\n\nValue.prototype = Object.assign(new Node(), {\n    type: 'Value',\n\n    accept(visitor) {\n        if (this.value) {\n            this.value = visitor.visitArray(this.value);\n        }\n    },\n\n    eval(context) {\n        if (this.value.length === 1) {\n            return this.value[0].eval(context);\n        } else {\n            return new Value(this.value.map(function (v) {\n                return v.eval(context);\n            }));\n        }\n    },\n\n    genCSS(context, output) {\n        let i;\n        for (i = 0; i < this.value.length; i++) {\n            this.value[i].genCSS(context, output);\n            if (i + 1 < this.value.length) {\n                output.add((context && context.compress) ? ',' : ', ');\n            }\n        }\n    }\n});\n\nexport default Value;\n","import Node from './node';\n\nconst Keyword = function(value) {\n    this.value = value;\n};\n\nKeyword.prototype = Object.assign(new Node(), {\n    type: 'Keyword',\n\n    genCSS(context, output) {\n        if (this.value === '%') { throw { type: 'Syntax', message: 'Invalid % without number' }; }\n        output.add(this.value);\n    }\n});\n\nKeyword.True = new Keyword('true');\nKeyword.False = new Keyword('false');\n\nexport default Keyword;\n","import Node from './node';\n\nconst Anonymous = function(value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {\n    this.value = value;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.mapLines = mapLines;\n    this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;\n    this.allowRoot = true;\n    this.copyVisibilityInfo(visibilityInfo);\n}\n\nAnonymous.prototype = Object.assign(new Node(), {\n    type: 'Anonymous',\n    eval() {\n        return new Anonymous(this.value, this._index, this._fileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());\n    },\n    compare(other) {\n        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n    },\n    isRulesetLike() {\n        return this.rulesetLike;\n    },\n    genCSS(context, output) {\n        this.nodeVisible = Boolean(this.value);\n        if (this.nodeVisible) {\n            output.add(this.value, this._fileInfo, this._index, this.mapLines);\n        }\n    }\n})\n\nexport default Anonymous;\n","import Node from './node';\nimport Value from './value';\nimport Keyword from './keyword';\nimport Anonymous from './anonymous';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\nfunction evalName(context, name) {\n    let value = '';\n    let i;\n    const n = name.length;\n    const output = {add: function (s) {value += s;}};\n    for (i = 0; i < n; i++) {\n        name[i].eval(context).genCSS(context, output);\n    }\n    return value;\n}\n\nconst Declaration = function(name, value, important, merge, index, currentFileInfo, inline, variable) {\n    this.name = name;\n    this.value = (value instanceof Node) ? value : new Value([value ? new Anonymous(value) : null]);\n    this.important = important ? ` ${important.trim()}` : '';\n    this.merge = merge;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.inline = inline || false;\n    this.variable = (variable !== undefined) ? variable\n        : (name.charAt && (name.charAt(0) === '@'));\n    this.allowRoot = true;\n    this.setParent(this.value, this);\n};\n\nDeclaration.prototype = Object.assign(new Node(), {\n    type: 'Declaration',\n\n    genCSS(context, output) {\n        output.add(this.name + (context.compress ? ':' : ': '), this.fileInfo(), this.getIndex());\n        try {\n            this.value.genCSS(context, output);\n        }\n        catch (e) {\n            e.index = this._index;\n            e.filename = this._fileInfo.filename;\n            throw e;\n        }\n        output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? '' : ';'), this._fileInfo, this._index);\n    },\n\n    eval(context) {\n        let mathBypass = false, prevMath, name = this.name, evaldValue, variable = this.variable;\n        if (typeof name !== 'string') {\n            // expand 'primitive' name directly to get\n            // things faster (~10% for benchmark.less):\n            name = (name.length === 1) && (name[0] instanceof Keyword) ?\n                name[0].value : evalName(context, name);\n            variable = false; // never treat expanded interpolation as new variable name\n        }\n\n        // @todo remove when parens-division is default\n        if (name === 'font' && context.math === MATH.ALWAYS) {\n            mathBypass = true;\n            prevMath = context.math;\n            context.math = MATH.PARENS_DIVISION;\n        }\n        try {\n            context.importantScope.push({});\n            evaldValue = this.value.eval(context);\n\n            if (!this.variable && evaldValue.type === 'DetachedRuleset') {\n                throw { message: 'Rulesets cannot be evaluated on a property.',\n                    index: this.getIndex(), filename: this.fileInfo().filename };\n            }\n            let important = this.important;\n            const importantResult = context.importantScope.pop();\n            if (!important && importantResult.important) {\n                important = importantResult.important;\n            }\n\n            return new Declaration(name,\n                evaldValue,\n                important,\n                this.merge,\n                this.getIndex(), this.fileInfo(), this.inline,\n                variable);\n        }\n        catch (e) {\n            if (typeof e.index !== 'number') {\n                e.index = this.getIndex();\n                e.filename = this.fileInfo().filename;\n            }\n            throw e;\n        }\n        finally {\n            if (mathBypass) {\n                context.math = prevMath;\n            }\n        }\n    },\n\n    makeImportant() {\n        return new Declaration(this.name,\n            this.value,\n            '!important',\n            this.merge,\n            this.getIndex(), this.fileInfo(), this.inline);\n    }\n});\n\nexport default Declaration;","function asComment(ctx) {\n    return `/* line ${ctx.debugInfo.lineNumber}, ${ctx.debugInfo.fileName} */\\n`;\n}\n\nfunction asMediaQuery(ctx) {\n    let filenameWithProtocol = ctx.debugInfo.fileName;\n    if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\n        filenameWithProtocol = `file://${filenameWithProtocol}`;\n    }\n    return `@media -sass-debug-info{filename{font-family:${filenameWithProtocol.replace(/([.:/\\\\])/g, function (a) {\n        if (a == '\\\\') {\n            a = '/';\n        }\n        return `\\\\${a}`;\n    })}}line{font-family:\\\\00003${ctx.debugInfo.lineNumber}}}\\n`;\n}\n\nfunction debugInfo(context, ctx, lineSeparator) {\n    let result = '';\n    if (context.dumpLineNumbers && !context.compress) {\n        switch (context.dumpLineNumbers) {\n            case 'comments':\n                result = asComment(ctx);\n                break;\n            case 'mediaquery':\n                result = asMediaQuery(ctx);\n                break;\n            case 'all':\n                result = asComment(ctx) + (lineSeparator || '') + asMediaQuery(ctx);\n                break;\n        }\n    }\n    return result;\n}\n\nexport default debugInfo;\n\n","import Node from './node';\nimport getDebugInfo from './debug-info';\n\nconst Comment = function(value, isLineComment, index, currentFileInfo) {\n    this.value = value;\n    this.isLineComment = isLineComment;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.allowRoot = true;\n}\n\nComment.prototype = Object.assign(new Node(), {\n    type: 'Comment',\n\n    genCSS(context, output) {\n        if (this.debugInfo) {\n            output.add(getDebugInfo(context, this), this.fileInfo(), this.getIndex());\n        }\n        output.add(this.value);\n    },\n\n    isSilent(context) {\n        const isCompressed = context.compress && this.value[2] !== '!';\n        return this.isLineComment || isCompressed;\n    }\n});\n\nexport default Comment;\n","import Keyword from '../tree/keyword';\nimport * as utils from '../utils';\n\nconst defaultFunc = {\n    eval: function () {\n        const v = this.value_;\n        const e = this.error_;\n        if (e) {\n            throw e;\n        }\n        if (!utils.isNullOrUndefined(v)) {\n            return v ? Keyword.True : Keyword.False;\n        }\n    },\n    value: function (v) {\n        this.value_ = v;\n    },\n    error: function (e) {\n        this.error_ = e;\n    },\n    reset: function () {\n        this.value_ = this.error_ = null;\n    }\n};\n\nexport default defaultFunc;\n","import Node from './node';\nimport Declaration from './declaration';\nimport Keyword from './keyword';\nimport Comment from './comment';\nimport Paren from './paren';\nimport Selector from './selector';\nimport Element from './element';\nimport Anonymous from './anonymous';\nimport contexts from '../contexts';\nimport globalFunctionRegistry from '../functions/function-registry';\nimport defaultFunc from '../functions/default';\nimport getDebugInfo from './debug-info';\nimport * as utils from '../utils';\nimport Parser from '../parser/parser';\n\nconst Ruleset = function(selectors, rules, strictImports, visibilityInfo) {\n    this.selectors = selectors;\n    this.rules = rules;\n    this._lookups = {};\n    this._variables = null;\n    this._properties = null;\n    this.strictImports = strictImports;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n\n    this.setParent(this.selectors, this);\n    this.setParent(this.rules, this);\n}\n\nRuleset.prototype = Object.assign(new Node(), {\n    type: 'Ruleset',\n    isRuleset: true,\n\n    isRulesetLike() { return true; },\n\n    accept(visitor) {\n        if (this.paths) {\n            this.paths = visitor.visitArray(this.paths, true);\n        } else if (this.selectors) {\n            this.selectors = visitor.visitArray(this.selectors);\n        }\n        if (this.rules && this.rules.length) {\n            this.rules = visitor.visitArray(this.rules);\n        }\n    },\n\n    eval(context) {\n        let selectors;\n        let selCnt;\n        let selector;\n        let i;\n        let hasVariable;\n        let hasOnePassingSelector = false;\n\n        if (this.selectors && (selCnt = this.selectors.length)) {\n            selectors = new Array(selCnt);\n            defaultFunc.error({\n                type: 'Syntax',\n                message: 'it is currently only allowed in parametric mixin guards,'\n            });\n\n            for (i = 0; i < selCnt; i++) {\n                selector = this.selectors[i].eval(context);\n                for (let j = 0; j < selector.elements.length; j++) {\n                    if (selector.elements[j].isVariable) {\n                        hasVariable = true;\n                        break;\n                    }\n                }\n                selectors[i] = selector;\n                if (selector.evaldCondition) {\n                    hasOnePassingSelector = true;\n                }\n            }\n\n            if (hasVariable) {\n                const toParseSelectors = new Array(selCnt);\n                for (i = 0; i < selCnt; i++) {\n                    selector = selectors[i];\n                    toParseSelectors[i] = selector.toCSS(context);\n                }\n                const startingIndex = selectors[0].getIndex();\n                const selectorFileInfo = selectors[0].fileInfo();\n                new Parser(context, this.parse.importManager, selectorFileInfo, startingIndex).parseNode(\n                    toParseSelectors.join(','),\n                    ['selectors'],\n                    function(err, result) {\n                        if (result) {\n                            selectors = utils.flattenArray(result);\n                        }\n                    });\n            }\n\n            defaultFunc.reset();\n        } else {\n            hasOnePassingSelector = true;\n        }\n\n        let rules = this.rules ? utils.copyArray(this.rules) : null;\n        const ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo());\n        let rule;\n        let subRule;\n\n        ruleset.originalRuleset = this;\n        ruleset.root = this.root;\n        ruleset.firstRoot = this.firstRoot;\n        ruleset.allowImports = this.allowImports;\n\n        if (this.debugInfo) {\n            ruleset.debugInfo = this.debugInfo;\n        }\n\n        if (!hasOnePassingSelector) {\n            rules.length = 0;\n        }\n\n        // inherit a function registry from the frames stack when possible;\n        // otherwise from the global registry\n        ruleset.functionRegistry = (function (frames) {\n            let i = 0;\n            const n = frames.length;\n            let found;\n            for ( ; i !== n ; ++i ) {\n                found = frames[ i ].functionRegistry;\n                if ( found ) { return found; }\n            }\n            return globalFunctionRegistry;\n        }(context.frames)).inherit();\n\n        // push the current ruleset to the frames stack\n        const ctxFrames = context.frames;\n        ctxFrames.unshift(ruleset);\n\n        // currrent selectors\n        let ctxSelectors = context.selectors;\n        if (!ctxSelectors) {\n            context.selectors = ctxSelectors = [];\n        }\n        ctxSelectors.unshift(this.selectors);\n\n        // Evaluate imports\n        if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n            ruleset.evalImports(context);\n        }\n\n        // Store the frames around mixin definitions,\n        // so they can be evaluated like closures when the time comes.\n        const rsRules = ruleset.rules;\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (rule.evalFirst) {\n                rsRules[i] = rule.eval(context);\n            }\n        }\n\n        const mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;\n\n        // Evaluate mixin calls.\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (rule.type === 'MixinCall') {\n                /* jshint loopfunc:true */\n                rules = rule.eval(context).filter(function(r) {\n                    if ((r instanceof Declaration) && r.variable) {\n                        // do not pollute the scope if the variable is\n                        // already there. consider returning false here\n                        // but we need a way to \"return\" variable from mixins\n                        return !(ruleset.variable(r.name));\n                    }\n                    return true;\n                });\n                rsRules.splice.apply(rsRules, [i, 1].concat(rules));\n                i += rules.length - 1;\n                ruleset.resetCache();\n            } else if (rule.type ===  'VariableCall') {\n                /* jshint loopfunc:true */\n                rules = rule.eval(context).rules.filter(function(r) {\n                    if ((r instanceof Declaration) && r.variable) {\n                        // do not pollute the scope at all\n                        return false;\n                    }\n                    return true;\n                });\n                rsRules.splice.apply(rsRules, [i, 1].concat(rules));\n                i += rules.length - 1;\n                ruleset.resetCache();\n            }\n        }\n\n        // Evaluate everything else\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (!rule.evalFirst) {\n                rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\n            }\n        }\n\n        // Evaluate everything else\n        for (i = 0; (rule = rsRules[i]); i++) {\n            // for rulesets, check if it is a css guard and can be removed\n            if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\n                // check if it can be folded in (e.g. & where)\n                if (rule.selectors[0] && rule.selectors[0].isJustParentSelector()) {\n                    rsRules.splice(i--, 1);\n\n                    for (let j = 0; (subRule = rule.rules[j]); j++) {\n                        if (subRule instanceof Node) {\n                            subRule.copyVisibilityInfo(rule.visibilityInfo());\n                            if (!(subRule instanceof Declaration) || !subRule.variable) {\n                                rsRules.splice(++i, 0, subRule);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Pop the stack\n        ctxFrames.shift();\n        ctxSelectors.shift();\n\n        if (context.mediaBlocks) {\n            for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n                context.mediaBlocks[i].bubbleSelectors(selectors);\n            }\n        }\n\n        return ruleset;\n    },\n\n    evalImports(context) {\n        const rules = this.rules;\n        let i;\n        let importRules;\n        if (!rules) { return; }\n\n        for (i = 0; i < rules.length; i++) {\n            if (rules[i].type === 'Import') {\n                importRules = rules[i].eval(context);\n                if (importRules && (importRules.length || importRules.length === 0)) {\n                    rules.splice.apply(rules, [i, 1].concat(importRules));\n                    i += importRules.length - 1;\n                } else {\n                    rules.splice(i, 1, importRules);\n                }\n                this.resetCache();\n            }\n        }\n    },\n\n    makeImportant() {\n        const result = new Ruleset(this.selectors, this.rules.map(function (r) {\n            if (r.makeImportant) {\n                return r.makeImportant();\n            } else {\n                return r;\n            }\n        }), this.strictImports, this.visibilityInfo());\n\n        return result;\n    },\n\n    matchArgs(args) {\n        return !args || args.length === 0;\n    },\n\n    // lets you call a css selector with a guard\n    matchCondition(args, context) {\n        const lastSelector = this.selectors[this.selectors.length - 1];\n        if (!lastSelector.evaldCondition) {\n            return false;\n        }\n        if (lastSelector.condition &&\n            !lastSelector.condition.eval(\n                new contexts.Eval(context,\n                    context.frames))) {\n            return false;\n        }\n        return true;\n    },\n\n    resetCache() {\n        this._rulesets = null;\n        this._variables = null;\n        this._properties = null;\n        this._lookups = {};\n    },\n\n    variables() {\n        if (!this._variables) {\n            this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n                if (r instanceof Declaration && r.variable === true) {\n                    hash[r.name] = r;\n                }\n                // when evaluating variables in an import statement, imports have not been eval'd\n                // so we need to go inside import statements.\n                // guard against root being a string (in the case of inlined less)\n                if (r.type === 'Import' && r.root && r.root.variables) {\n                    const vars = r.root.variables();\n                    for (const name in vars) {\n                        // eslint-disable-next-line no-prototype-builtins\n                        if (vars.hasOwnProperty(name)) {\n                            hash[name] = r.root.variable(name);\n                        }\n                    }\n                }\n                return hash;\n            }, {});\n        }\n        return this._variables;\n    },\n\n    properties() {\n        if (!this._properties) {\n            this._properties = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n                if (r instanceof Declaration && r.variable !== true) {\n                    const name = (r.name.length === 1) && (r.name[0] instanceof Keyword) ?\n                        r.name[0].value : r.name;\n                    // Properties don't overwrite as they can merge\n                    if (!hash[`$${name}`]) {\n                        hash[`$${name}`] = [ r ];\n                    }\n                    else {\n                        hash[`$${name}`].push(r);\n                    }\n                }\n                return hash;\n            }, {});\n        }\n        return this._properties;\n    },\n\n    variable(name) {\n        const decl = this.variables()[name];\n        if (decl) {\n            return this.parseValue(decl);\n        }\n    },\n\n    property(name) {\n        const decl = this.properties()[name];\n        if (decl) {\n            return this.parseValue(decl);\n        }\n    },\n\n    lastDeclaration() {\n        for (let i = this.rules.length; i > 0; i--) {\n            const decl = this.rules[i - 1];\n            if (decl instanceof Declaration) {\n                return this.parseValue(decl);\n            }\n        }\n    },\n\n    parseValue(toParse) {\n        const self = this;\n        function transformDeclaration(decl) {\n            if (decl.value instanceof Anonymous && !decl.parsed) {\n                if (typeof decl.value.value === 'string') {\n                    new Parser(this.parse.context, this.parse.importManager, decl.fileInfo(), decl.value.getIndex()).parseNode(\n                        decl.value.value,\n                        ['value', 'important'],\n                        function(err, result) {\n                            if (err) {\n                                decl.parsed = true;\n                            }\n                            if (result) {\n                                decl.value = result[0];\n                                decl.important = result[1] || '';\n                                decl.parsed = true;\n                            }\n                        });\n                } else {\n                    decl.parsed = true;\n                }\n\n                return decl;\n            }\n            else {\n                return decl;\n            }\n        }\n        if (!Array.isArray(toParse)) {\n            return transformDeclaration.call(self, toParse);\n        }\n        else {\n            const nodes = [];\n            toParse.forEach(function(n) {\n                nodes.push(transformDeclaration.call(self, n));\n            });\n            return nodes;\n        }\n    },\n\n    rulesets() {\n        if (!this.rules) { return []; }\n\n        const filtRules = [];\n        const rules = this.rules;\n        let i;\n        let rule;\n\n        for (i = 0; (rule = rules[i]); i++) {\n            if (rule.isRuleset) {\n                filtRules.push(rule);\n            }\n        }\n\n        return filtRules;\n    },\n\n    prependRule(rule) {\n        const rules = this.rules;\n        if (rules) {\n            rules.unshift(rule);\n        } else {\n            this.rules = [ rule ];\n        }\n        this.setParent(rule, this);\n    },\n\n    find(selector, self, filter) {\n        self = self || this;\n        const rules = [];\n        let match;\n        let foundMixins;\n        const key = selector.toCSS();\n\n        if (key in this._lookups) { return this._lookups[key]; }\n\n        this.rulesets().forEach(function (rule) {\n            if (rule !== self) {\n                for (let j = 0; j < rule.selectors.length; j++) {\n                    match = selector.match(rule.selectors[j]);\n                    if (match) {\n                        if (selector.elements.length > match) {\n                            if (!filter || filter(rule)) {\n                                foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\n                                for (let i = 0; i < foundMixins.length; ++i) {\n                                    foundMixins[i].path.push(rule);\n                                }\n                                Array.prototype.push.apply(rules, foundMixins);\n                            }\n                        } else {\n                            rules.push({ rule, path: []});\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n        this._lookups[key] = rules;\n        return rules;\n    },\n\n    genCSS(context, output) {\n        let i;\n        let j;\n        const charsetRuleNodes = [];\n        let ruleNodes = [];\n\n        let // Line number debugging\n            debugInfo;\n\n        let rule;\n        let path;\n\n        context.tabLevel = (context.tabLevel || 0);\n\n        if (!this.root) {\n            context.tabLevel++;\n        }\n\n        const tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  ');\n        const tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  ');\n        let sep;\n\n        let charsetNodeIndex = 0;\n        let importNodeIndex = 0;\n        for (i = 0; (rule = this.rules[i]); i++) {\n            if (rule instanceof Comment) {\n                if (importNodeIndex === i) {\n                    importNodeIndex++;\n                }\n                ruleNodes.push(rule);\n            } else if (rule.isCharset && rule.isCharset()) {\n                ruleNodes.splice(charsetNodeIndex, 0, rule);\n                charsetNodeIndex++;\n                importNodeIndex++;\n            } else if (rule.type === 'Import') {\n                ruleNodes.splice(importNodeIndex, 0, rule);\n                importNodeIndex++;\n            } else {\n                ruleNodes.push(rule);\n            }\n        }\n        ruleNodes = charsetRuleNodes.concat(ruleNodes);\n\n        // If this is the root node, we don't render\n        // a selector, or {}.\n        if (!this.root) {\n            debugInfo = getDebugInfo(context, this, tabSetStr);\n\n            if (debugInfo) {\n                output.add(debugInfo);\n                output.add(tabSetStr);\n            }\n\n            const paths = this.paths;\n            const pathCnt = paths.length;\n            let pathSubCnt, appendedAmp;\n\n            sep = context.compress ? ',' : (`,\\n${tabSetStr}`);\n\n            for (i = 0; i < pathCnt; i++) {\n                path = paths[i];\n                if (!(pathSubCnt = path.length)) { continue; }\n                if (i > 0) { output.add(sep); }\n\n                context.firstSelector = true;\n                \n                if (!(pathSubCnt > 1 && path[0].elements.length === 1 && path[0].elements[0].value === '&')) {\n                    path[0].genCSS(context, output);\n                }\n                appendedAmp = true;\n\n                context.firstSelector = false;\n                for (j = 1; j < pathSubCnt; j++) {\n                    if (j === 0 && pathSubCnt > 1 && path[j].elements.length === 1 && path[j].elements[0].value === '&') {\n                        continue;\n                    } else if (path[j].elements[0].value === '&' && appendedAmp) {\n                        continue;\n                    }\n                    \n                    path[j].genCSS(context, output);\n                    appendedAmp = true;\n                }\n            }\n\n            output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\n        }\n\n        // Compile rules and rulesets\n        for (i = 0; (rule = ruleNodes[i]); i++) {\n\n            if (i + 1 === ruleNodes.length) {\n                context.lastRule = true;\n            }\n\n            const currentLastRule = context.lastRule;\n            if (rule.isRulesetLike(rule)) {\n                context.lastRule = false;\n            }\n\n            if (rule.genCSS) {\n                rule.genCSS(context, output);\n            } else if (rule.value) {\n                output.add(rule.value.toString());\n            }\n\n            context.lastRule = currentLastRule;\n\n            if (!context.lastRule && rule.isVisible()) {\n                output.add(context.compress ? '' : (`\\n${tabRuleStr}`));\n            } else {\n                context.lastRule = false;\n            }\n        }\n\n        if (!this.root) {\n            output.add((context.compress ? '}' : `\\n${tabSetStr}}`));\n            context.tabLevel--;\n        }\n\n        if (!output.isEmpty() && !context.compress && this.firstRoot) {\n            output.add('\\n');\n        }\n    },\n\n    joinSelectors(paths, context, selectors, visitArgs) {\n        for (let s = 0; s < selectors.length; s++) {\n            this.joinSelector(paths, context, selectors[s], visitArgs);\n        }\n    },\n\n    joinSelector(paths, context, selector, visitArgs) {\n\n        function createParenthesis(elementsToPak, originalElement) {\n            let replacementParen, j;\n            if (elementsToPak.length === 0) {\n                replacementParen = new Paren(elementsToPak[0]);\n            } else {\n                const insideParent = new Array(elementsToPak.length);\n                for (j = 0; j < elementsToPak.length; j++) {\n                    insideParent[j] = new Element(\n                        null,\n                        elementsToPak[j],\n                        originalElement.isVariable,\n                        originalElement._index,\n                        originalElement._fileInfo\n                    );\n                }\n                replacementParen = new Paren(new Selector(insideParent));\n            }\n            return replacementParen;\n        }\n\n        function createSelector(containedElement, originalElement) {\n            let element, selector;\n            element = new Element(null, containedElement, originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n            selector = new Selector([element]);\n            return selector;\n        }\n\n        // joins selector path from `beginningPath` with selector path in `addPath`\n        // `replacedElement` contains element that is being replaced by `addPath`\n        // returns concatenated path\n        function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\n            let newSelectorPath, lastSelector, newJoinedSelector;\n            // our new selector path\n            newSelectorPath = [];\n\n            // construct the joined selector - if & is the first thing this will be empty,\n            // if not newJoinedSelector will be the last set of elements in the selector\n            if (beginningPath.length > 0) {\n                newSelectorPath = utils.copyArray(beginningPath);\n                lastSelector = newSelectorPath.pop();\n                newJoinedSelector = originalSelector.createDerived(utils.copyArray(lastSelector.elements));\n            }\n            else {\n                newJoinedSelector = originalSelector.createDerived([]);\n            }\n\n            if (addPath.length > 0) {\n                // /deep/ is a CSS4 selector - (removed, so should deprecate)\n                // that is valid without anything in front of it\n                // so if the & does not have a combinator that is \"\" or \" \" then\n                // and there is a combinator on the parent, then grab that.\n                // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\n                let combinator = replacedElement.combinator;\n\n                const parentEl = addPath[0].elements[0];\n                if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\n                    combinator = parentEl.combinator;\n                }\n                // join the elements so far with the first part of the parent\n                newJoinedSelector.elements.push(new Element(\n                    combinator,\n                    parentEl.value,\n                    replacedElement.isVariable,\n                    replacedElement._index,\n                    replacedElement._fileInfo\n                ));\n                newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\n            }\n\n            // now add the joined selector - but only if it is not empty\n            if (newJoinedSelector.elements.length !== 0) {\n                newSelectorPath.push(newJoinedSelector);\n            }\n\n            // put together the parent selectors after the join (e.g. the rest of the parent)\n            if (addPath.length > 1) {\n                let restOfPath = addPath.slice(1);\n                restOfPath = restOfPath.map(function (selector) {\n                    return selector.createDerived(selector.elements, []);\n                });\n                newSelectorPath = newSelectorPath.concat(restOfPath);\n            }\n            return newSelectorPath;\n        }\n\n        // joins selector path from `beginningPath` with every selector path in `addPaths` array\n        // `replacedElement` contains element that is being replaced by `addPath`\n        // returns array with all concatenated paths\n        function addAllReplacementsIntoPath( beginningPath, addPaths, replacedElement, originalSelector, result) {\n            let j;\n            for (j = 0; j < beginningPath.length; j++) {\n                const newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\n                result.push(newSelectorPath);\n            }\n            return result;\n        }\n\n        function mergeElementsOnToSelectors(elements, selectors) {\n            let i, sel;\n\n            if (elements.length === 0) {\n                return ;\n            }\n            if (selectors.length === 0) {\n                selectors.push([ new Selector(elements) ]);\n                return;\n            }\n\n            for (i = 0; (sel = selectors[i]); i++) {\n                // if the previous thing in sel is a parent this needs to join on to it\n                if (sel.length > 0) {\n                    sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\n                }\n                else {\n                    sel.push(new Selector(elements));\n                }\n            }\n        }\n\n        // replace all parent selectors inside `inSelector` by content of `context` array\n        // resulting selectors are returned inside `paths` array\n        // returns true if `inSelector` contained at least one parent selector\n        function replaceParentSelector(paths, context, inSelector) {\n            // The paths are [[Selector]]\n            // The first list is a list of comma separated selectors\n            // The inner list is a list of inheritance separated selectors\n            // e.g.\n            // .a, .b {\n            //   .c {\n            //   }\n            // }\n            // == [[.a] [.c]] [[.b] [.c]]\n            //\n            let i, j, k, currentElements, newSelectors, selectorsMultiplied, sel, el, hadParentSelector = false, length, lastSelector;\n            function findNestedSelector(element) {\n                let maybeSelector;\n                if (!(element.value instanceof Paren)) {\n                    return null;\n                }\n\n                maybeSelector = element.value.value;\n                if (!(maybeSelector instanceof Selector)) {\n                    return null;\n                }\n\n                return maybeSelector;\n            }\n\n            // the elements from the current selector so far\n            currentElements = [];\n            // the current list of new selectors to add to the path.\n            // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\n            // by the parents\n            newSelectors = [\n                []\n            ];\n\n            for (i = 0; (el = inSelector.elements[i]); i++) {\n                // non parent reference elements just get added\n                if (el.value !== '&') {\n                    const nestedSelector = findNestedSelector(el);\n                    if (nestedSelector !== null) {\n                        // merge the current list of non parent selector elements\n                        // on to the current list of selectors to add\n                        mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                        const nestedPaths = [];\n                        let replaced;\n                        const replacedNewSelectors = [];\n                        replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\n                        hadParentSelector = hadParentSelector || replaced;\n                        // the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\n                        for (k = 0; k < nestedPaths.length; k++) {\n                            const replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\n                            addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\n                        }\n                        newSelectors = replacedNewSelectors;\n                        currentElements = [];\n                    } else {\n                        currentElements.push(el);\n                    }\n\n                } else if (el.value === '&' && el.combinator.value === '' && visitArgs && visitArgs.preserve) {\n                    currentElements.push(new Element(el.value));\n                } else {\n                    hadParentSelector = true;\n                    // the new list of selectors to add\n                    selectorsMultiplied = [];\n\n                    // merge the current list of non parent selector elements\n                    // on to the current list of selectors to add\n                    mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                    // loop through our current selectors\n                    for (j = 0; j < newSelectors.length; j++) {\n                        sel = newSelectors[j];\n                        // if we don't have any parent paths, the & might be in a mixin so that it can be used\n                        // whether there are parents or not\n                        if (context.length === 0) {\n                            // the combinator used on el should now be applied to the next element instead so that\n                            // it is not lost\n                            if (sel.length > 0) {\n                                sel[0].elements.push(new Element(el.combinator, '', el.isVariable, el._index, el._fileInfo));\n                            }\n                            selectorsMultiplied.push(sel);\n                        }\n                        else {\n                            // and the parent selectors\n                            for (k = 0; k < context.length; k++) {\n                                // We need to put the current selectors\n                                // then join the last selector's elements on to the parents selectors\n                                const newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\n                                // add that to our new set of selectors\n                                selectorsMultiplied.push(newSelectorPath);\n                            }\n                        }\n                    }\n\n                    // our new selectors has been multiplied, so reset the state\n                    newSelectors = selectorsMultiplied;\n                    currentElements = [];\n                }\n            }\n\n            // if we have any elements left over (e.g. .a& .b == .b)\n            // add them on to all the current selectors\n            mergeElementsOnToSelectors(currentElements, newSelectors);\n\n            for (i = 0; i < newSelectors.length; i++) {\n                length = newSelectors[i].length;\n                if (length > 0) {\n                    paths.push(newSelectors[i]);\n                    lastSelector = newSelectors[i][length - 1];\n                    newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\n                }\n            }\n\n            return hadParentSelector;\n        }\n\n        function deriveSelector(visibilityInfo, deriveFrom) {\n            const newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\n            newSelector.copyVisibilityInfo(visibilityInfo);\n            return newSelector;\n        }\n\n        // joinSelector code follows\n        let i, newPaths, hadParentSelector;\n\n        newPaths = [];\n        hadParentSelector = replaceParentSelector(newPaths, context, selector, visitArgs);\n\n        if (!hadParentSelector) {\n            if (context.length > 0) {\n                newPaths = [];\n                for (i = 0; i < context.length; i++) {\n\n                    const concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\n\n                    concatenated.push(selector);\n                    newPaths.push(concatenated);\n                }\n            }\n            else {\n                newPaths = [[selector]];\n            }\n        }\n\n        for (i = 0; i < newPaths.length; i++) {\n            paths.push(newPaths[i]);\n        }\n\n    }\n});\n\nexport default Ruleset;\n","import Node from './node';\nimport Selector from './selector';\nimport Ruleset from './ruleset';\nimport Anonymous from './anonymous';\n\nconst AtRule = function(\n    name,\n    value,\n    rules,\n    index,\n    currentFileInfo,\n    debugInfo,\n    isRooted,\n    visibilityInfo\n) {\n    let i;\n\n    this.name  = name;\n    this.value = (value instanceof Node) ? value : (value ? new Anonymous(value) : value);\n    if (rules) {\n        if (Array.isArray(rules)) {\n            this.rules = rules;\n        } else {\n            this.rules = [rules];\n            this.rules[0].selectors = (new Selector([], null, null, index, currentFileInfo)).createEmptySelectors();\n        }\n        for (i = 0; i < this.rules.length; i++) {\n            this.rules[i].allowImports = true;\n        }\n        this.setParent(this.rules, this);\n    }\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.debugInfo = debugInfo;\n    this.isRooted = isRooted || false;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n}\n\nAtRule.prototype = Object.assign(new Node(), {\n    type: 'AtRule',\n    accept(visitor) {\n        const value = this.value, rules = this.rules;\n        if (rules) {\n            this.rules = visitor.visitArray(rules);\n        }\n        if (value) {\n            this.value = visitor.visit(value);\n        }\n    },\n\n    isRulesetLike() {\n        return this.rules || !this.isCharset();\n    },\n\n    isCharset() {\n        return '@charset' === this.name;\n    },\n\n    genCSS(context, output) {\n        const value = this.value, rules = this.rules;\n        output.add(this.name, this.fileInfo(), this.getIndex());\n        if (value) {\n            output.add(' ');\n            value.genCSS(context, output);\n        }\n        if (rules) {\n            this.outputRuleset(context, output, rules);\n        } else {\n            output.add(';');\n        }\n    },\n\n    eval(context) {\n        let mediaPathBackup, mediaBlocksBackup, value = this.value, rules = this.rules;\n\n        // media stored inside other atrule should not bubble over it\n        // backpup media bubbling information\n        mediaPathBackup = context.mediaPath;\n        mediaBlocksBackup = context.mediaBlocks;\n        // deleted media bubbling information\n        context.mediaPath = [];\n        context.mediaBlocks = [];\n\n        if (value) {\n            value = value.eval(context);\n        }\n        if (rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            rules = [rules[0].eval(context)];\n            rules[0].root = true;\n        }\n        // restore media bubbling information\n        context.mediaPath = mediaPathBackup;\n        context.mediaBlocks = mediaBlocksBackup;\n\n        return new AtRule(this.name, value, rules,\n            this.getIndex(), this.fileInfo(), this.debugInfo, this.isRooted, this.visibilityInfo());\n    },\n\n    variable(name) {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.variable.call(this.rules[0], name);\n        }\n    },\n\n    find() {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.find.apply(this.rules[0], arguments);\n        }\n    },\n\n    rulesets() {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.rulesets.apply(this.rules[0]);\n        }\n    },\n\n    outputRuleset(context, output, rules) {\n        const ruleCnt = rules.length;\n        let i;\n        context.tabLevel = (context.tabLevel | 0) + 1;\n\n        // Compressed\n        if (context.compress) {\n            output.add('{');\n            for (i = 0; i < ruleCnt; i++) {\n                rules[i].genCSS(context, output);\n            }\n            output.add('}');\n            context.tabLevel--;\n            return;\n        }\n\n        // Non-compressed\n        const tabSetStr = `\\n${Array(context.tabLevel).join('  ')}`, tabRuleStr = `${tabSetStr}  `;\n        if (!ruleCnt) {\n            output.add(` {${tabSetStr}}`);\n        } else {\n            output.add(` {${tabRuleStr}`);\n            rules[0].genCSS(context, output);\n            for (i = 1; i < ruleCnt; i++) {\n                output.add(tabRuleStr);\n                rules[i].genCSS(context, output);\n            }\n            output.add(`${tabSetStr}}`);\n        }\n\n        context.tabLevel--;\n    }\n});\n\nexport default AtRule;\n","import Node from './node';\nimport contexts from '../contexts';\nimport * as utils from '../utils';\n\nconst DetachedRuleset = function(ruleset, frames) {\n    this.ruleset = ruleset;\n    this.frames = frames;\n    this.setParent(this.ruleset, this);\n};\n\nDetachedRuleset.prototype = Object.assign(new Node(), {\n    type: 'DetachedRuleset',\n    evalFirst: true,\n\n    accept(visitor) {\n        this.ruleset = visitor.visit(this.ruleset);\n    },\n\n    eval(context) {\n        const frames = this.frames || utils.copyArray(context.frames);\n        return new DetachedRuleset(this.ruleset, frames);\n    },\n\n    callEval(context) {\n        return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);\n    }\n});\n\nexport default DetachedRuleset;\n","import Node from './node';\nimport unitConversions from '../data/unit-conversions';\nimport * as utils from '../utils';\n\nconst Unit = function(numerator, denominator, backupUnit) {\n    this.numerator = numerator ? utils.copyArray(numerator).sort() : [];\n    this.denominator = denominator ? utils.copyArray(denominator).sort() : [];\n    if (backupUnit) {\n        this.backupUnit = backupUnit;\n    } else if (numerator && numerator.length) {\n        this.backupUnit = numerator[0];\n    }\n};\n\nUnit.prototype = Object.assign(new Node(), {\n    type: 'Unit',\n\n    clone() {\n        return new Unit(utils.copyArray(this.numerator), utils.copyArray(this.denominator), this.backupUnit);\n    },\n\n    genCSS(context, output) {\n        // Dimension checks the unit is singular and throws an error if in strict math mode.\n        const strictUnits = context && context.strictUnits;\n        if (this.numerator.length === 1) {\n            output.add(this.numerator[0]); // the ideal situation\n        } else if (!strictUnits && this.backupUnit) {\n            output.add(this.backupUnit);\n        } else if (!strictUnits && this.denominator.length) {\n            output.add(this.denominator[0]);\n        }\n    },\n\n    toString() {\n        let i, returnStr = this.numerator.join('*');\n        for (i = 0; i < this.denominator.length; i++) {\n            returnStr += `/${this.denominator[i]}`;\n        }\n        return returnStr;\n    },\n\n    compare(other) {\n        return this.is(other.toString()) ? 0 : undefined;\n    },\n\n    is(unitString) {\n        return this.toString().toUpperCase() === unitString.toUpperCase();\n    },\n\n    isLength() {\n        return RegExp('^(px|em|ex|ch|rem|in|cm|mm|pc|pt|ex|vw|vh|vmin|vmax)$', 'gi').test(this.toCSS());\n    },\n\n    isEmpty() {\n        return this.numerator.length === 0 && this.denominator.length === 0;\n    },\n\n    isSingular() {\n        return this.numerator.length <= 1 && this.denominator.length === 0;\n    },\n\n    map(callback) {\n        let i;\n\n        for (i = 0; i < this.numerator.length; i++) {\n            this.numerator[i] = callback(this.numerator[i], false);\n        }\n\n        for (i = 0; i < this.denominator.length; i++) {\n            this.denominator[i] = callback(this.denominator[i], true);\n        }\n    },\n\n    usedUnits() {\n        let group;\n        const result = {};\n        let mapUnit;\n        let groupName;\n\n        mapUnit = function (atomicUnit) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\n                result[groupName] = atomicUnit;\n            }\n\n            return atomicUnit;\n        };\n\n        for (groupName in unitConversions) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (unitConversions.hasOwnProperty(groupName)) {\n                group = unitConversions[groupName];\n\n                this.map(mapUnit);\n            }\n        }\n\n        return result;\n    },\n\n    cancel() {\n        const counter = {};\n        let atomicUnit;\n        let i;\n\n        for (i = 0; i < this.numerator.length; i++) {\n            atomicUnit = this.numerator[i];\n            counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;\n        }\n\n        for (i = 0; i < this.denominator.length; i++) {\n            atomicUnit = this.denominator[i];\n            counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;\n        }\n\n        this.numerator = [];\n        this.denominator = [];\n\n        for (atomicUnit in counter) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (counter.hasOwnProperty(atomicUnit)) {\n                const count = counter[atomicUnit];\n\n                if (count > 0) {\n                    for (i = 0; i < count; i++) {\n                        this.numerator.push(atomicUnit);\n                    }\n                } else if (count < 0) {\n                    for (i = 0; i < -count; i++) {\n                        this.denominator.push(atomicUnit);\n                    }\n                }\n            }\n        }\n\n        this.numerator.sort();\n        this.denominator.sort();\n    }\n});\n\nexport default Unit;\n","/* eslint-disable no-prototype-builtins */\nimport Node from './node';\nimport unitConversions from '../data/unit-conversions';\nimport Unit from './unit';\nimport Color from './color';\n\n//\n// A number with a unit\n//\nconst Dimension = function(value, unit) {\n    this.value = parseFloat(value);\n    if (isNaN(this.value)) {\n        throw new Error('Dimension is not a number.');\n    }\n    this.unit = (unit && unit instanceof Unit) ? unit :\n        new Unit(unit ? [unit] : undefined);\n    this.setParent(this.unit, this);\n};\n\nDimension.prototype = Object.assign(new Node(), {\n    type: 'Dimension',\n\n    accept(visitor) {\n        this.unit = visitor.visit(this.unit);\n    },\n\n    // remove when Nodes have JSDoc types\n    // eslint-disable-next-line no-unused-vars\n    eval(context) {\n        return this;\n    },\n\n    toColor() {\n        return new Color([this.value, this.value, this.value]);\n    },\n\n    genCSS(context, output) {\n        if ((context && context.strictUnits) && !this.unit.isSingular()) {\n            throw new Error(`Multiple units in dimension. Correct the units or use the unit function. Bad unit: ${this.unit.toString()}`);\n        }\n\n        const value = this.fround(context, this.value);\n        let strValue = String(value);\n\n        if (value !== 0 && value < 0.000001 && value > -0.000001) {\n            // would be output 1e-6 etc.\n            strValue = value.toFixed(20).replace(/0+$/, '');\n        }\n\n        if (context && context.compress) {\n            // Zero values doesn't need a unit\n            if (value === 0 && this.unit.isLength()) {\n                output.add(strValue);\n                return;\n            }\n\n            // Float values doesn't need a leading zero\n            if (value > 0 && value < 1) {\n                strValue = (strValue).substr(1);\n            }\n        }\n\n        output.add(strValue);\n        this.unit.genCSS(context, output);\n    },\n\n    // In an operation between two Dimensions,\n    // we default to the first Dimension's unit,\n    // so `1px + 2` will yield `3px`.\n    operate(context, op, other) {\n        /* jshint noempty:false */\n        let value = this._operate(context, op, this.value, other.value);\n        let unit = this.unit.clone();\n\n        if (op === '+' || op === '-') {\n            if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n                unit = other.unit.clone();\n                if (this.unit.backupUnit) {\n                    unit.backupUnit = this.unit.backupUnit;\n                }\n            } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) {\n                // do nothing\n            } else {\n                other = other.convertTo(this.unit.usedUnits());\n\n                if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n                    throw new Error('Incompatible units. Change the units or use the unit function. '\n                        + `Bad units: '${unit.toString()}' and '${other.unit.toString()}'.`);\n                }\n\n                value = this._operate(context, op, this.value, other.value);\n            }\n        } else if (op === '*') {\n            unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\n            unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\n            unit.cancel();\n        } else if (op === '/') {\n            unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\n            unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\n            unit.cancel();\n        }\n        return new Dimension(value, unit);\n    },\n\n    compare(other) {\n        let a, b;\n\n        if (!(other instanceof Dimension)) {\n            return undefined;\n        }\n\n        if (this.unit.isEmpty() || other.unit.isEmpty()) {\n            a = this;\n            b = other;\n        } else {\n            a = this.unify();\n            b = other.unify();\n            if (a.unit.compare(b.unit) !== 0) {\n                return undefined;\n            }\n        }\n\n        return Node.numericCompare(a.value, b.value);\n    },\n\n    unify() {\n        return this.convertTo({ length: 'px', duration: 's', angle: 'rad' });\n    },\n\n    convertTo(conversions) {\n        let value = this.value;\n        const unit = this.unit.clone();\n        let i;\n        let groupName;\n        let group;\n        let targetUnit;\n        let derivedConversions = {};\n        let applyUnit;\n\n        if (typeof conversions === 'string') {\n            for (i in unitConversions) {\n                if (unitConversions[i].hasOwnProperty(conversions)) {\n                    derivedConversions = {};\n                    derivedConversions[i] = conversions;\n                }\n            }\n            conversions = derivedConversions;\n        }\n        applyUnit = function (atomicUnit, denominator) {\n            if (group.hasOwnProperty(atomicUnit)) {\n                if (denominator) {\n                    value = value / (group[atomicUnit] / group[targetUnit]);\n                } else {\n                    value = value * (group[atomicUnit] / group[targetUnit]);\n                }\n\n                return targetUnit;\n            }\n\n            return atomicUnit;\n        };\n\n        for (groupName in conversions) {\n            if (conversions.hasOwnProperty(groupName)) {\n                targetUnit = conversions[groupName];\n                group = unitConversions[groupName];\n\n                unit.map(applyUnit);\n            }\n        }\n\n        unit.cancel();\n\n        return new Dimension(value, unit);\n    }\n});\n\nexport default Dimension;\n","import Node from './node';\nimport Color from './color';\nimport Dimension from './dimension';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\n\nconst Operation = function(op, operands, isSpaced) {\n    this.op = op.trim();\n    this.operands = operands;\n    this.isSpaced = isSpaced;\n};\n\nOperation.prototype = Object.assign(new Node(), {\n    type: 'Operation',\n\n    accept(visitor) {\n        this.operands = visitor.visitArray(this.operands);\n    },\n\n    eval(context) {\n        let a = this.operands[0].eval(context), b = this.operands[1].eval(context), op;\n\n        if (context.isMathOn(this.op)) {\n            op = this.op === './' ? '/' : this.op;\n            if (a instanceof Dimension && b instanceof Color) {\n                a = a.toColor();\n            }\n            if (b instanceof Dimension && a instanceof Color) {\n                b = b.toColor();\n            }\n            if (!a.operate || !b.operate) {\n                if (\n                    (a instanceof Operation || b instanceof Operation)\n                    && a.op === '/' && context.math === MATH.PARENS_DIVISION\n                ) {\n                    return new Operation(this.op, [a, b], this.isSpaced);\n                }\n                throw { type: 'Operation',\n                    message: 'Operation on an invalid type' };\n            }\n\n            return a.operate(context, op, b);\n        } else {\n            return new Operation(this.op, [a, b], this.isSpaced);\n        }\n    },\n\n    genCSS(context, output) {\n        this.operands[0].genCSS(context, output);\n        if (this.isSpaced) {\n            output.add(' ');\n        }\n        output.add(this.op);\n        if (this.isSpaced) {\n            output.add(' ');\n        }\n        this.operands[1].genCSS(context, output);\n    }\n});\n\nexport default Operation;\n","import Node from './node';\nimport Paren from './paren';\nimport Comment from './comment';\nimport Dimension from './dimension';\nimport Anonymous from './anonymous';\n\nconst Expression = function(value, noSpacing) {\n    this.value = value;\n    this.noSpacing = noSpacing;\n    if (!value) {\n        throw new Error('Expression requires an array parameter');\n    }\n};\n\nExpression.prototype = Object.assign(new Node(), {\n    type: 'Expression',\n\n    accept(visitor) {\n        this.value = visitor.visitArray(this.value);\n    },\n\n    eval(context) {\n        let returnValue;\n        const mathOn = context.isMathOn();\n        const inParenthesis = this.parens;\n\n        let doubleParen = false;\n        if (inParenthesis) {\n            context.inParenthesis();\n        }\n        if (this.value.length > 1) {\n            returnValue = new Expression(this.value.map(function (e) {\n                if (!e.eval) {\n                    return e;\n                }\n                return e.eval(context);\n            }), this.noSpacing);\n        } else if (this.value.length === 1) {\n            if (this.value[0].parens && !this.value[0].parensInOp && !context.inCalc) {\n                doubleParen = true;\n            }\n            returnValue = this.value[0].eval(context);\n        } else {\n            returnValue = this;\n        }\n        if (inParenthesis) {\n            context.outOfParenthesis();\n        }\n        if (this.parens && this.parensInOp && !mathOn && !doubleParen\n            && (!(returnValue instanceof Dimension))) {\n            returnValue = new Paren(returnValue);\n        }\n        return returnValue;\n    },\n\n    genCSS(context, output) {\n        for (let i = 0; i < this.value.length; i++) {\n            this.value[i].genCSS(context, output);\n            if (!this.noSpacing && i + 1 < this.value.length) {\n                if (i + 1 < this.value.length && !(this.value[i + 1] instanceof Anonymous) ||\n                    this.value[i + 1] instanceof Anonymous && this.value[i + 1].value !== ',') {\n                    output.add(' ');\n                }\n            }\n        }\n    },\n\n    throwAwayComments() {\n        this.value = this.value.filter(function(v) {\n            return !(v instanceof Comment);\n        });\n    }\n});\n\nexport default Expression;\n","import Expression from '../tree/expression';\n\nclass functionCaller {\n    constructor(name, context, index, currentFileInfo) {\n        this.name = name.toLowerCase();\n        this.index = index;\n        this.context = context;\n        this.currentFileInfo = currentFileInfo;\n\n        this.func = context.frames[0].functionRegistry.get(this.name);\n    }\n\n    isValid() {\n        return Boolean(this.func);\n    }\n\n    call(args) {\n        if (!(Array.isArray(args))) {\n            args = [args];\n        }\n        const evalArgs = this.func.evalArgs;\n        if (evalArgs !== false) {\n            args = args.map(a => a.eval(this.context));\n        }\n        const commentFilter = item => !(item.type === 'Comment');\n\n        // This code is terrible and should be replaced as per this issue...\n        // https://github.com/less/less.js/issues/2477\n        args = args\n            .filter(commentFilter)\n            .map(item => {\n                if (item.type === 'Expression') {\n                    const subNodes = item.value.filter(commentFilter);\n                    if (subNodes.length === 1) {\n                        // https://github.com/less/less.js/issues/3616\n                        if (item.parens && subNodes[0].op === '/') {\n                            return item;\n                        }\n                        return subNodes[0];\n                    } else {\n                        return new Expression(subNodes);\n                    }\n                }\n                return item;\n            });\n\n        if (evalArgs === false) {\n            return this.func(this.context, ...args);\n        }\n\n        return this.func(...args);\n    }\n}\n\nexport default functionCaller;\n","import Node from './node';\nimport Anonymous from './anonymous';\nimport FunctionCaller from '../functions/function-caller';\n\n//\n// A function call node.\n//\nconst Call = function(name, args, index, currentFileInfo) {\n    this.name = name;\n    this.args = args;\n    this.calc = name === 'calc';\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n}\n\nCall.prototype = Object.assign(new Node(), {\n    type: 'Call',\n\n    accept(visitor) {\n        if (this.args) {\n            this.args = visitor.visitArray(this.args);\n        }\n    },\n\n    //\n    // When evaluating a function call,\n    // we either find the function in the functionRegistry,\n    // in which case we call it, passing the  evaluated arguments,\n    // if this returns null or we cannot find the function, we\n    // simply print it out as it appeared originally [2].\n    //\n    // The reason why we evaluate the arguments, is in the case where\n    // we try to pass a variable to a function, like: `saturate(@color)`.\n    // The function should receive the value, not the variable.\n    //\n    eval(context) {\n        /**\n         * Turn off math for calc(), and switch back on for evaluating nested functions\n         */\n        const currentMathContext = context.mathOn;\n        context.mathOn = !this.calc;\n        if (this.calc || context.inCalc) {\n            context.enterCalc();\n        }\n\n        const exitCalc = () => {\n            if (this.calc || context.inCalc) {\n                context.exitCalc();\n            }\n            context.mathOn = currentMathContext;\n        };\n\n        let result;\n        const funcCaller = new FunctionCaller(this.name, context, this.getIndex(), this.fileInfo());\n\n        if (funcCaller.isValid()) {\n            try {\n                result = funcCaller.call(this.args);\n                exitCalc();\n            } catch (e) {\n                // eslint-disable-next-line no-prototype-builtins\n                if (e.hasOwnProperty('line') && e.hasOwnProperty('column')) {\n                    throw e;\n                }\n                throw { \n                    type: e.type || 'Runtime',\n                    message: `Error evaluating function \\`${this.name}\\`${e.message ? `: ${e.message}` : ''}`,\n                    index: this.getIndex(), \n                    filename: this.fileInfo().filename,\n                    line: e.lineNumber,\n                    column: e.columnNumber\n                };\n            }\n        }\n\n        if (result !== null && result !== undefined) {\n            // Results that that are not nodes are cast as Anonymous nodes\n            // Falsy values or booleans are returned as empty nodes\n            if (!(result instanceof Node)) {\n                if (!result || result === true) {\n                    result = new Anonymous(null); \n                }\n                else {\n                    result = new Anonymous(result.toString()); \n                }\n                \n            }\n            result._index = this._index;\n            result._fileInfo = this._fileInfo;\n            return result;\n        }\n\n        const args = this.args.map(a => a.eval(context));\n        exitCalc();\n\n        return new Call(this.name, args, this.getIndex(), this.fileInfo());\n    },\n\n    genCSS(context, output) {\n        output.add(`${this.name}(`, this.fileInfo(), this.getIndex());\n\n        for (let i = 0; i < this.args.length; i++) {\n            this.args[i].genCSS(context, output);\n            if (i + 1 < this.args.length) {\n                output.add(', ');\n            }\n        }\n\n        output.add(')');\n    }\n});\n\nexport default Call;\n","import Node from './node';\nimport Call from './call';\n\nconst Variable = function(name, index, currentFileInfo) {\n    this.name = name;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n};\n\nVariable.prototype = Object.assign(new Node(), {\n    type: 'Variable',\n\n    eval(context) {\n        let variable, name = this.name;\n\n        if (name.indexOf('@@') === 0) {\n            name = `@${new Variable(name.slice(1), this.getIndex(), this.fileInfo()).eval(context).value}`;\n        }\n\n        if (this.evaluating) {\n            throw { type: 'Name',\n                message: `Recursive variable definition for ${name}`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        this.evaluating = true;\n\n        variable = this.find(context.frames, function (frame) {\n            const v = frame.variable(name);\n            if (v) {\n                if (v.important) {\n                    const importantScope = context.importantScope[context.importantScope.length - 1];\n                    importantScope.important = v.important;\n                }\n                // If in calc, wrap vars in a function call to cascade evaluate args first\n                if (context.inCalc) {\n                    return (new Call('_SELF', [v.value])).eval(context);\n                }\n                else {\n                    return v.value.eval(context);\n                }\n            }\n        });\n        if (variable) {\n            this.evaluating = false;\n            return variable;\n        } else {\n            throw { type: 'Name',\n                message: `variable ${name} is undefined`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n    },\n\n    find(obj, fun) {\n        for (let i = 0, r; i < obj.length; i++) {\n            r = fun.call(obj, obj[i]);\n            if (r) { return r; }\n        }\n        return null;\n    }\n});\n\nexport default Variable;\n","import Node from './node';\nimport Declaration from './declaration';\n\nconst Property = function(name, index, currentFileInfo) {\n    this.name = name;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n};\n\nProperty.prototype = Object.assign(new Node(), {\n    type: 'Property',\n\n    eval(context) {\n        let property;\n        const name = this.name;\n        // TODO: shorten this reference\n        const mergeRules = context.pluginManager.less.visitors.ToCSSVisitor.prototype._mergeRules;\n\n        if (this.evaluating) {\n            throw { type: 'Name',\n                message: `Recursive property reference for ${name}`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        this.evaluating = true;\n\n        property = this.find(context.frames, function (frame) {\n            let v;\n            const vArr = frame.property(name);\n            if (vArr) {\n                for (let i = 0; i < vArr.length; i++) {\n                    v = vArr[i];\n\n                    vArr[i] = new Declaration(v.name,\n                        v.value,\n                        v.important,\n                        v.merge,\n                        v.index,\n                        v.currentFileInfo,\n                        v.inline,\n                        v.variable\n                    );\n                }\n                mergeRules(vArr);\n\n                v = vArr[vArr.length - 1];\n                if (v.important) {\n                    const importantScope = context.importantScope[context.importantScope.length - 1];\n                    importantScope.important = v.important;\n                }\n                v = v.value.eval(context);\n                return v;\n            }\n        });\n        if (property) {\n            this.evaluating = false;\n            return property;\n        } else {\n            throw { type: 'Name',\n                message: `Property '${name}' is undefined`,\n                filename: this.currentFileInfo.filename,\n                index: this.index };\n        }\n    },\n\n    find(obj, fun) {\n        for (let i = 0, r; i < obj.length; i++) {\n            r = fun.call(obj, obj[i]);\n            if (r) { return r; }\n        }\n        return null;\n    }\n});\n\nexport default Property;\n","import Node from './node';\n\nconst Attribute = function(key, op, value, cif) {\n    this.key = key;\n    this.op = op;\n    this.value = value;\n    this.cif = cif;\n}\n\nAttribute.prototype = Object.assign(new Node(), {\n    type: 'Attribute',\n\n    eval(context) {\n        return new Attribute(\n            this.key.eval ? this.key.eval(context) : this.key,\n            this.op,\n            (this.value && this.value.eval) ? this.value.eval(context) : this.value,\n            this.cif\n        );\n    },\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context));\n    },\n\n    toCSS(context) {\n        let value = this.key.toCSS ? this.key.toCSS(context) : this.key;\n\n        if (this.op) {\n            value += this.op;\n            value += (this.value.toCSS ? this.value.toCSS(context) : this.value);\n        }\n\n        if (this.cif) {\n            value = value + ' ' + this.cif;\n        }\n\n        return `[${value}]`;\n    }\n});\n\nexport default Attribute;\n","import Node from './node';\nimport Variable from './variable';\nimport Property from './property';\n\nconst Quoted = function(str, content, escaped, index, currentFileInfo) {\n    this.escaped = (escaped === undefined) ? true : escaped;\n    this.value = content || '';\n    this.quote = str.charAt(0);\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.variableRegex = /@\\{([\\w-]+)\\}/g;\n    this.propRegex = /\\$\\{([\\w-]+)\\}/g;\n    this.allowRoot = escaped;\n};\n\nQuoted.prototype = Object.assign(new Node(), {\n    type: 'Quoted',\n\n    genCSS(context, output) {\n        if (!this.escaped) {\n            output.add(this.quote, this.fileInfo(), this.getIndex());\n        }\n        output.add(this.value);\n        if (!this.escaped) {\n            output.add(this.quote);\n        }\n    },\n\n    containsVariables() {\n        return this.value.match(this.variableRegex);\n    },\n\n    eval(context) {\n        const that = this;\n        let value = this.value;\n        const variableReplacement = function (_, name) {\n            const v = new Variable(`@${name}`, that.getIndex(), that.fileInfo()).eval(context, true);\n            return (v instanceof Quoted) ? v.value : v.toCSS();\n        };\n        const propertyReplacement = function (_, name) {\n            const v = new Property(`$${name}`, that.getIndex(), that.fileInfo()).eval(context, true);\n            return (v instanceof Quoted) ? v.value : v.toCSS();\n        };\n        function iterativeReplace(value, regexp, replacementFnc) {\n            let evaluatedValue = value;\n            do {\n                value = evaluatedValue.toString();\n                evaluatedValue = value.replace(regexp, replacementFnc);\n            } while (value !== evaluatedValue);\n            return evaluatedValue;\n        }\n        value = iterativeReplace(value, this.variableRegex, variableReplacement);\n        value = iterativeReplace(value, this.propRegex, propertyReplacement);\n        return new Quoted(this.quote + value + this.quote, value, this.escaped, this.getIndex(), this.fileInfo());\n    },\n\n    compare(other) {\n        // when comparing quoted strings allow the quote to differ\n        if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\n            return Node.numericCompare(this.value, other.value);\n        } else {\n            return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n        }\n    }\n});\n\nexport default Quoted;\n","import Node from './node';\n\nfunction escapePath(path) {\n    return path.replace(/[()'\"\\s]/g, function(match) { return `\\\\${match}`; });\n}\n\nconst URL = function(val, index, currentFileInfo, isEvald) {\n    this.value = val;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.isEvald = isEvald;\n};\n\nURL.prototype = Object.assign(new Node(), {\n    type: 'Url',\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    },\n\n    genCSS(context, output) {\n        output.add('url(');\n        this.value.genCSS(context, output);\n        output.add(')');\n    },\n\n    eval(context) {\n        const val = this.value.eval(context);\n        let rootpath;\n\n        if (!this.isEvald) {\n            // Add the rootpath if the URL requires a rewrite\n            rootpath = this.fileInfo() && this.fileInfo().rootpath;\n            if (typeof rootpath === 'string' &&\n                typeof val.value === 'string' &&\n                context.pathRequiresRewrite(val.value)) {\n                if (!val.quote) {\n                    rootpath = escapePath(rootpath);\n                }\n                val.value = context.rewritePath(val.value, rootpath);\n            } else {\n                val.value = context.normalizePath(val.value);\n            }\n\n            // Add url args if enabled\n            if (context.urlArgs) {\n                if (!val.value.match(/^\\s*data:/)) {\n                    const delimiter = val.value.indexOf('?') === -1 ? '?' : '&';\n                    const urlArgs = delimiter + context.urlArgs;\n                    if (val.value.indexOf('#') !== -1) {\n                        val.value = val.value.replace('#', `${urlArgs}#`);\n                    } else {\n                        val.value += urlArgs;\n                    }\n                }\n            }\n        }\n\n        return new URL(val, this.getIndex(), this.fileInfo(), true);\n    }\n});\n\nexport default URL;\n","import Ruleset from './ruleset';\nimport Value from './value';\nimport Selector from './selector';\nimport Anonymous from './anonymous';\nimport Expression from './expression';\nimport * as utils from '../utils';\n\nconst NestableAtRulePrototype = {\n\n    isRulesetLike() {\n        return true;\n    },\n\n    accept(visitor) {\n        if (this.features) {\n            this.features = visitor.visit(this.features);\n        }\n        if (this.rules) {\n            this.rules = visitor.visitArray(this.rules);\n        }\n    },\n\n    evalTop(context) {\n        let result = this;\n\n        // Render all dependent Media blocks.\n        if (context.mediaBlocks.length > 1) {\n            const selectors = (new Selector([], null, null, this.getIndex(), this.fileInfo())).createEmptySelectors();\n            result = new Ruleset(selectors, context.mediaBlocks);\n            result.multiMedia = true;\n            result.copyVisibilityInfo(this.visibilityInfo());\n            this.setParent(result, this);\n        }\n\n        delete context.mediaBlocks;\n        delete context.mediaPath;\n\n        return result;\n    },\n\n    evalNested(context) {\n        let i;\n        let value;\n        const path = context.mediaPath.concat([this]);\n\n        // Extract the media-query conditions separated with `,` (OR).\n        for (i = 0; i < path.length; i++) {\n            value = path[i].features instanceof Value ?\n                path[i].features.value : path[i].features;\n            path[i] = Array.isArray(value) ? value : [value];\n        }\n\n        // Trace all permutations to generate the resulting media-query.\n        //\n        // (a, b and c) with nested (d, e) ->\n        //    a and d\n        //    a and e\n        //    b and c and d\n        //    b and c and e\n        this.features = new Value(this.permute(path).map(path => {\n            path = path.map(fragment => fragment.toCSS ? fragment : new Anonymous(fragment));\n\n            for (i = path.length - 1; i > 0; i--) {\n                path.splice(i, 0, new Anonymous('and'));\n            }\n\n            return new Expression(path);\n        }));\n        this.setParent(this.features, this);\n\n        // Fake a tree-node that doesn't output anything.\n        return new Ruleset([], []);\n    },\n\n    permute(arr) {\n        if (arr.length === 0) {\n            return [];\n        } else if (arr.length === 1) {\n            return arr[0];\n        } else {\n            const result = [];\n            const rest = this.permute(arr.slice(1));\n            for (let i = 0; i < rest.length; i++) {\n                for (let j = 0; j < arr[0].length; j++) {\n                    result.push([arr[0][j]].concat(rest[i]));\n                }\n            }\n            return result;\n        }\n    },\n\n    bubbleSelectors(selectors) {\n        if (!selectors) {\n            return;\n        }\n        this.rules = [new Ruleset(utils.copyArray(selectors), [this.rules[0]])];\n        this.setParent(this.rules, this);\n    }\n};\n\nexport default NestableAtRulePrototype;\n","import Ruleset from './ruleset';\nimport Value from './value';\nimport Selector from './selector';\nimport AtRule from './atrule';\nimport NestableAtRulePrototype from './nested-at-rule';\n\nconst Media = function(value, features, index, currentFileInfo, visibilityInfo) {\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n\n    const selectors = (new Selector([], null, null, this._index, this._fileInfo)).createEmptySelectors();\n\n    this.features = new Value(features);\n    this.rules = [new Ruleset(selectors, value)];\n    this.rules[0].allowImports = true;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n    this.setParent(selectors, this);\n    this.setParent(this.features, this);\n    this.setParent(this.rules, this);\n};\n\nMedia.prototype = Object.assign(new AtRule(), {\n    type: 'Media',\n\n    ...NestableAtRulePrototype,\n\n    genCSS(context, output) {\n        output.add('@media ', this._fileInfo, this._index);\n        context.firstSelector = true;\n        this.features.genCSS(context, output);\n        this.outputRuleset(context, output, this.rules);\n    },\n\n    eval(context) {\n        if (!context.mediaBlocks) {\n            context.mediaBlocks = [];\n            context.mediaPath = [];\n        }\n\n        const media = new Media(null, [], this._index, this._fileInfo, this.visibilityInfo());\n        if (this.debugInfo) {\n            this.rules[0].debugInfo = this.debugInfo;\n            media.debugInfo = this.debugInfo;\n        }\n        \n        media.features = this.features.eval(context);\n\n        context.mediaPath.push(media);\n        context.mediaBlocks.push(media);\n\n        this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n        context.frames.unshift(this.rules[0]);\n        media.rules = [this.rules[0].eval(context)];\n        context.frames.shift();\n\n        context.mediaPath.pop();\n\n        return context.mediaPath.length === 0 ? media.evalTop(context) :\n            media.evalNested(context);\n    }\n});\n\nexport default Media;\n","import Node from './node';\nimport Media from './media';\nimport URL from './url';\nimport Quoted from './quoted';\nimport Ruleset from './ruleset';\nimport Anonymous from './anonymous';\nimport * as utils from '../utils';\nimport LessError from '../less-error';\n\n//\n// CSS @import node\n//\n// The general strategy here is that we don't want to wait\n// for the parsing to be completed, before we start importing\n// the file. That's because in the context of a browser,\n// most of the time will be spent waiting for the server to respond.\n//\n// On creation, we push the import path to our import queue, though\n// `import,push`, we also pass it a callback, which it'll call once\n// the file has been fetched, and parsed.\n//\nconst Import = function(path, features, options, index, currentFileInfo, visibilityInfo) {\n    this.options = options;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.path = path;\n    this.features = features;\n    this.allowRoot = true;\n\n    if (this.options.less !== undefined || this.options.inline) {\n        this.css = !this.options.less || this.options.inline;\n    } else {\n        const pathValue = this.getPath();\n        if (pathValue && /[#.&?]css([?;].*)?$/.test(pathValue)) {\n            this.css = true;\n        }\n    }\n    this.copyVisibilityInfo(visibilityInfo);\n    this.setParent(this.features, this);\n    this.setParent(this.path, this);\n};\n\nImport.prototype = Object.assign(new Node(), {\n    type: 'Import',\n\n    accept(visitor) {\n        if (this.features) {\n            this.features = visitor.visit(this.features);\n        }\n        this.path = visitor.visit(this.path);\n        if (!this.options.isPlugin && !this.options.inline && this.root) {\n            this.root = visitor.visit(this.root);\n        }\n    },\n\n    genCSS(context, output) {\n        if (this.css && this.path._fileInfo.reference === undefined) {\n            output.add('@import ', this._fileInfo, this._index);\n            this.path.genCSS(context, output);\n            if (this.features) {\n                output.add(' ');\n                this.features.genCSS(context, output);\n            }\n            output.add(';');\n        }\n    },\n\n    getPath() {\n        return (this.path instanceof URL) ?\n            this.path.value.value : this.path.value;\n    },\n\n    isVariableImport() {\n        let path = this.path;\n        if (path instanceof URL) {\n            path = path.value;\n        }\n        if (path instanceof Quoted) {\n            return path.containsVariables();\n        }\n\n        return true;\n    },\n\n    evalForImport(context) {\n        let path = this.path;\n\n        if (path instanceof URL) {\n            path = path.value;\n        }\n\n        return new Import(path.eval(context), this.features, this.options, this._index, this._fileInfo, this.visibilityInfo());\n    },\n\n    evalPath(context) {\n        const path = this.path.eval(context);\n        const fileInfo = this._fileInfo;\n\n        if (!(path instanceof URL)) {\n            // Add the rootpath if the URL requires a rewrite\n            const pathValue = path.value;\n            if (fileInfo &&\n                pathValue &&\n                context.pathRequiresRewrite(pathValue)) {\n                path.value = context.rewritePath(pathValue, fileInfo.rootpath);\n            } else {\n                path.value = context.normalizePath(path.value);\n            }\n        }\n\n        return path;\n    },\n\n    eval(context) {\n        const result = this.doEval(context);\n        if (this.options.reference || this.blocksVisibility()) {\n            if (result.length || result.length === 0) {\n                result.forEach(function (node) {\n                    node.addVisibilityBlock();\n                }\n                );\n            } else {\n                result.addVisibilityBlock();\n            }\n        }\n        return result;\n    },\n\n    doEval(context) {\n        let ruleset;\n        let registry;\n        const features = this.features && this.features.eval(context);\n\n        if (this.options.isPlugin) {\n            if (this.root && this.root.eval) {\n                try {\n                    this.root.eval(context);\n                }\n                catch (e) {\n                    e.message = 'Plugin error during evaluation';\n                    throw new LessError(e, this.root.imports, this.root.filename);\n                }\n            }\n            registry = context.frames[0] && context.frames[0].functionRegistry;\n            if ( registry && this.root && this.root.functions ) {\n                registry.addMultiple( this.root.functions );\n            }\n\n            return [];\n        }\n\n        if (this.skip) {\n            if (typeof this.skip === 'function') {\n                this.skip = this.skip();\n            }\n            if (this.skip) {\n                return [];\n            }\n        }\n        if (this.options.inline) {\n            const contents = new Anonymous(this.root, 0,\n                {\n                    filename: this.importedFilename,\n                    reference: this.path._fileInfo && this.path._fileInfo.reference\n                }, true, true);\n\n            return this.features ? new Media([contents], this.features.value) : [contents];\n        } else if (this.css) {\n            const newImport = new Import(this.evalPath(context), features, this.options, this._index);\n            if (!newImport.css && this.error) {\n                throw this.error;\n            }\n            return newImport;\n        } else if (this.root) {\n            ruleset = new Ruleset(null, utils.copyArray(this.root.rules));\n            ruleset.evalImports(context);\n\n            return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;\n        } else {\n            return [];\n        }\n    }\n});\n\nexport default Import;\n","import Node from './node';\nimport Variable from './variable';\n\nconst JsEvalNode = function() {};\n\nJsEvalNode.prototype = Object.assign(new Node(), {\n    evaluateJavaScript(expression, context) {\n        let result;\n        const that = this;\n        const evalContext = {};\n\n        if (!context.javascriptEnabled) {\n            throw { message: 'Inline JavaScript is not enabled. Is it set in your options?',\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        expression = expression.replace(/@\\{([\\w-]+)\\}/g, function (_, name) {\n            return that.jsify(new Variable(`@${name}`, that.getIndex(), that.fileInfo()).eval(context));\n        });\n\n        try {\n            expression = new Function(`return (${expression})`);\n        } catch (e) {\n            throw { message: `JavaScript evaluation error: ${e.message} from \\`${expression}\\`` ,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        const variables = context.frames[0].variables();\n        for (const k in variables) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (variables.hasOwnProperty(k)) {\n                evalContext[k.slice(1)] = {\n                    value: variables[k].value,\n                    toJS: function () {\n                        return this.value.eval(context).toCSS();\n                    }\n                };\n            }\n        }\n\n        try {\n            result = expression.call(evalContext);\n        } catch (e) {\n            throw { message: `JavaScript evaluation error: '${e.name}: ${e.message.replace(/[\"]/g, '\\'')}'` ,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n        return result;\n    },\n\n    jsify(obj) {\n        if (Array.isArray(obj.value) && (obj.value.length > 1)) {\n            return `[${obj.value.map(function (v) { return v.toCSS(); }).join(', ')}]`;\n        } else {\n            return obj.toCSS();\n        }\n    }\n});\n\nexport default JsEvalNode;\n","import JsEvalNode from './js-eval-node';\nimport Dimension from './dimension';\nimport Quoted from './quoted';\nimport Anonymous from './anonymous';\n\nconst JavaScript = function(string, escaped, index, currentFileInfo) {\n    this.escaped = escaped;\n    this.expression = string;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n}\n\nJavaScript.prototype = Object.assign(new JsEvalNode(), {\n    type: 'JavaScript',\n\n    eval(context) {\n        const result = this.evaluateJavaScript(this.expression, context);\n        const type = typeof result;\n\n        if (type === 'number' && !isNaN(result)) {\n            return new Dimension(result);\n        } else if (type === 'string') {\n            return new Quoted(`\"${result}\"`, result, this.escaped, this._index);\n        } else if (Array.isArray(result)) {\n            return new Anonymous(result.join(', '));\n        } else {\n            return new Anonymous(result);\n        }\n    }\n});\n\nexport default JavaScript;\n","import Node from './node';\n\nconst Assignment = function(key, val) {\n    this.key = key;\n    this.value = val;\n}\n\nAssignment.prototype = Object.assign(new Node(), {\n    type: 'Assignment',\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    },\n\n    eval(context) {\n        if (this.value.eval) {\n            return new Assignment(this.key, this.value.eval(context));\n        }\n        return this;\n    },\n\n    genCSS(context, output) {\n        output.add(`${this.key}=`);\n        if (this.value.genCSS) {\n            this.value.genCSS(context, output);\n        } else {\n            output.add(this.value);\n        }\n    }\n});\n\nexport default Assignment;\n","import Node from './node';\n\nconst Condition = function(op, l, r, i, negate) {\n    this.op = op.trim();\n    this.lvalue = l;\n    this.rvalue = r;\n    this._index = i;\n    this.negate = negate;\n};\n\nCondition.prototype = Object.assign(new Node(), {\n    type: 'Condition',\n\n    accept(visitor) {\n        this.lvalue = visitor.visit(this.lvalue);\n        this.rvalue = visitor.visit(this.rvalue);\n    },\n\n    eval(context) {\n        const result = (function (op, a, b) {\n            switch (op) {\n                case 'and': return a && b;\n                case 'or':  return a || b;\n                default:\n                    switch (Node.compare(a, b)) {\n                        case -1:\n                            return op === '<' || op === '=<' || op === '<=';\n                        case 0:\n                            return op === '=' || op === '>=' || op === '=<' || op === '<=';\n                        case 1:\n                            return op === '>' || op === '>=';\n                        default:\n                            return false;\n                    }\n            }\n        })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\n\n        return this.negate ? !result : result;\n    }\n});\n\nexport default Condition;\n","import Node from './node';\n\nconst QueryInParens = function (op, l, m, op2, r, i) {\n    this.op = op.trim();\n    this.lvalue = l;\n    this.mvalue = m;\n    this.op2 = op2 ? op2.trim() : null;\n    this.rvalue = r;\n    this._index = i;\n};\n\nQueryInParens.prototype = Object.assign(new Node(), {\n    type: 'QueryInParens',\n\n    accept(visitor) {\n        this.lvalue = visitor.visit(this.lvalue);\n        this.mvalue = visitor.visit(this.mvalue);\n        if (this.rvalue) {\n            this.rvalue = visitor.visit(this.rvalue);\n        }\n    },\n\n    eval(context) {\n        this.lvalue = this.lvalue.eval(context);\n        this.mvalue = this.mvalue.eval(context);\n        if (this.rvalue) {\n            this.rvalue = this.rvalue.eval(context);\n        }\n        return this;\n    },\n\n    genCSS(context, output) {\n        this.lvalue.genCSS(context, output);\n        output.add(' ' + this.op + ' ');\n        this.mvalue.genCSS(context, output);\n        if (this.rvalue) {\n            output.add(' ' + this.op2 + ' ');\n            this.rvalue.genCSS(context, output);\n        }\n    },\n});\n\nexport default QueryInParens;\n","import Ruleset from './ruleset';\nimport Value from './value';\nimport Selector from './selector';\nimport AtRule from './atrule';\nimport NestableAtRulePrototype from './nested-at-rule';\n\nconst Container = function(value, features, index, currentFileInfo, visibilityInfo) {\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n\n    const selectors = (new Selector([], null, null, this._index, this._fileInfo)).createEmptySelectors();\n\n    this.features = new Value(features);\n    this.rules = [new Ruleset(selectors, value)];\n    this.rules[0].allowImports = true;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n    this.setParent(selectors, this);\n    this.setParent(this.features, this);\n    this.setParent(this.rules, this);\n};\n\nContainer.prototype = Object.assign(new AtRule(), {\n    type: 'Container',\n\n    ...NestableAtRulePrototype,\n\n    genCSS(context, output) {\n        output.add('@container ', this._fileInfo, this._index);\n        this.features.genCSS(context, output);\n        this.outputRuleset(context, output, this.rules);\n    },\n\n    eval(context) {\n        if (!context.mediaBlocks) {\n            context.mediaBlocks = [];\n            context.mediaPath = [];\n        }\n\n        const media = new Container(null, [], this._index, this._fileInfo, this.visibilityInfo());\n        if (this.debugInfo) {\n            this.rules[0].debugInfo = this.debugInfo;\n            media.debugInfo = this.debugInfo;\n        }\n        \n        media.features = this.features.eval(context);\n\n        context.mediaPath.push(media);\n        context.mediaBlocks.push(media);\n\n        this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n        context.frames.unshift(this.rules[0]);\n        media.rules = [this.rules[0].eval(context)];\n        context.frames.shift();\n\n        context.mediaPath.pop();\n\n        return context.mediaPath.length === 0 ? media.evalTop(context) :\n            media.evalNested(context);\n    }\n});\n\nexport default Container;\n","import Ruleset from './ruleset';\nimport Value from './value';\nimport Selector from './selector';\nimport AtRule from './atrule';\nimport NestableAtRulePrototype from './nested-at-rule';\nimport Anonymous from './anonymous';\nimport Expression from './expression';\n\nconst Scope = function (value, features, index, currentFileInfo, visibilityInfo) {\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n\n    const selectors = (new Selector([], null, null, this._index, this._fileInfo)).createEmptySelectors();\n\n    this.features = new Value(features);\n    this.rules = [new Ruleset(selectors, value)];\n    this.rules[0].allowImports = true;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n    this.setParent(selectors, this);\n    this.setParent(this.features, this);\n    this.setParent(this.rules, this);\n};\n\nScope.prototype = Object.assign(new AtRule(), {\n    type: 'Scope',\n\n    ...NestableAtRulePrototype,\n\n    accept: function (visitor) {\n        if (this.features) {\n            this.features = visitor.visit(this.features, { preserve: true });\n        }\n        if (this.rules) {\n            this.rules = visitor.visitArray(this.rules, undefined, { preserve: true });\n        }\n    },\n\n    genCSS(context, output) {\n        if (this.rules && (Array.isArray(this.rules) && this.rules.length > 0) || (Array.isArray(this.rules[0]) && this.rules[0].length > 0)) {\n            output.add('@scope', this._fileInfo, this._index);\n            context.firstSelector = true;\n            this.features.genCSS(context, output);\n            this.outputRuleset(context, output, this.rules);\n        }\n    },\n\n    eval(context) {\n        if (!context.mediaBlocks) {\n            context.mediaBlocks = [];\n            context.mediaPath = [];\n        }\n\n        const media = new Scope(null, [], this._index, this._fileInfo, this.visibilityInfo());\n        if (this.debugInfo) {\n            this.rules[0].debugInfo = this.debugInfo;\n            media.debugInfo = this.debugInfo;\n        }\n\n        media.features = this.features.eval(context);\n\n        context.mediaPath.push(media);\n        context.mediaBlocks.push(media);\n\n        this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n        context.frames.unshift(this.rules[0]);\n\n        media.rules = [this.rules[0].eval(context)];\n        context.frames.shift();\n\n        context.mediaPath.pop();\n\n        return context.mediaPath.length === 0 ? media.evalTop(context) :\n            media.evalNested(context);\n    },\n\n    getNestedElementValue(pathNode) {\n        let tmp = pathNode.value.trim();\n\n        if (tmp.startsWith('(')) {\n            tmp = tmp.substring(1);\n        }\n        if (tmp.endsWith(')')) {\n            tmp = tmp.substring(0, tmp.length - 1);\n        }\n        if (tmp.startsWith(':scope')) {\n            tmp = tmp.substring(6).trim();\n        }\n\n        return tmp;\n    },\n\n    evalNested(context) {\n        let i, n;\n        let value;\n        let path = context.mediaPath.concat([this]);\n\n        // Extract the media-query conditions separated with `,` (OR).\n        for (i = 0; i < path.length; i++) {\n            value = path[i].features instanceof Value ?\n                path[i].features.value : path[i].features;\n            path[i] = Array.isArray(value) ? value : [value];\n        }\n\n        let fromCss = '', toCss = '', tmp;\n\n        for (i = 0; i < path.length; ++i) {\n            let buildTo = true;\n\n            for (n = 0; n < path[i].length; ++n) {\n                for (let e = 0; e < path[i][n].elements.length; ++e) {\n                    if (path[i][n].elements[e].value === 'to') {\n                        buildTo = false;\n                    } else if (buildTo) {\n                        tmp = this.getNestedElementValue(path[i][n].elements[e]);\n\n                        if (fromCss.length > 0 && !tmp.startsWith('>')) {\n                            fromCss += ' > ';\n                        }else {\n                            fromCss += fromCss !== '' ? ' ' : '';\n                        }\n\n                        fromCss += tmp;\n                    } else {\n                        tmp = this.getNestedElementValue(path[i][n].elements[e]);\n\n                        if (toCss.length > 0 && !tmp.startsWith('>')) {\n                            toCss += ' > ';\n                        }\n\n                        toCss += tmp;\n                    }\n                }\n            }\n        }\n\n        path = new Value(\n            new Expression([\n                new Selector(' (' + fromCss + ')'),\n                new Anonymous('to'), \n                new Selector('(' + fromCss + ' > ' + toCss + ')')\n            ])\n        );\n\n        this.features = path;\n        this.setParent(this.features, this);\n\n        // Fake a tree-node that doesn't output anything.\n        return new Ruleset([], []);\n    },\n});\n\nexport default Scope;\n","import Node from './node';\n\nconst UnicodeDescriptor = function(value) {\n    this.value = value;\n}\n\nUnicodeDescriptor.prototype = Object.assign(new Node(), {\n    type: 'UnicodeDescriptor'\n})\n\nexport default UnicodeDescriptor;\n","import Node from './node';\nimport Operation from './operation';\nimport Dimension from './dimension';\n\nconst Negative = function(node) {\n    this.value = node;\n};\n\nNegative.prototype = Object.assign(new Node(), {\n    type: 'Negative',\n\n    genCSS(context, output) {\n        output.add('-');\n        this.value.genCSS(context, output);\n    },\n\n    eval(context) {\n        if (context.isMathOn()) {\n            return (new Operation('*', [new Dimension(-1), this.value])).eval(context);\n        }\n        return new Negative(this.value.eval(context));\n    }\n});\n\nexport default Negative;\n","import Node from './node';\nimport Selector from './selector';\n\nconst Extend = function(selector, option, index, currentFileInfo, visibilityInfo) {\n    this.selector = selector;\n    this.option = option;\n    this.object_id = Extend.next_id++;\n    this.parent_ids = [this.object_id];\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n\n    switch (option) {\n        case 'all':\n            this.allowBefore = true;\n            this.allowAfter = true;\n            break;\n        default:\n            this.allowBefore = false;\n            this.allowAfter = false;\n            break;\n    }\n    this.setParent(this.selector, this);\n};\n\nExtend.prototype = Object.assign(new Node(), {\n    type: 'Extend',\n\n    accept(visitor) {\n        this.selector = visitor.visit(this.selector);\n    },\n\n    eval(context) {\n        return new Extend(this.selector.eval(context), this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n    },\n\n    // remove when Nodes have JSDoc types\n    // eslint-disable-next-line no-unused-vars\n    clone(context) {\n        return new Extend(this.selector, this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n    },\n\n    // it concatenates (joins) all selectors in selector array\n    findSelfSelectors(selectors) {\n        let selfElements = [], i, selectorElements;\n\n        for (i = 0; i < selectors.length; i++) {\n            selectorElements = selectors[i].elements;\n            // duplicate the logic in genCSS function inside the selector node.\n            // future TODO - move both logics into the selector joiner visitor\n            if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === '') {\n                selectorElements[0].combinator.value = ' ';\n            }\n            selfElements = selfElements.concat(selectors[i].elements);\n        }\n\n        this.selfSelectors = [new Selector(selfElements)];\n        this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());\n    }\n});\n\nExtend.next_id = 0;\nexport default Extend;\n","import Node from './node';\nimport Variable from './variable';\nimport Ruleset from './ruleset';\nimport DetachedRuleset from './detached-ruleset';\nimport LessError from '../less-error';\n\nconst VariableCall = function(variable, index, currentFileInfo) {\n    this.variable = variable;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.allowRoot = true;\n};\n\nVariableCall.prototype = Object.assign(new Node(), {\n    type: 'VariableCall',\n\n    eval(context) {\n        let rules;\n        let detachedRuleset = new Variable(this.variable, this.getIndex(), this.fileInfo()).eval(context);\n        const error = new LessError({message: `Could not evaluate variable call ${this.variable}`});\n\n        if (!detachedRuleset.ruleset) {\n            if (detachedRuleset.rules) {\n                rules = detachedRuleset;\n            }\n            else if (Array.isArray(detachedRuleset)) {\n                rules = new Ruleset('', detachedRuleset);\n            }\n            else if (Array.isArray(detachedRuleset.value)) {\n                rules = new Ruleset('', detachedRuleset.value);\n            }\n            else {\n                throw error;\n            }\n            detachedRuleset = new DetachedRuleset(rules);\n        }\n\n        if (detachedRuleset.ruleset) {\n            return detachedRuleset.callEval(context);\n        }\n        throw error;\n    }\n});\n\nexport default VariableCall;\n","import Node from './node';\nimport Variable from './variable';\nimport Ruleset from './ruleset';\nimport Selector from './selector';\n\nconst NamespaceValue = function(ruleCall, lookups, index, fileInfo) {\n    this.value = ruleCall;\n    this.lookups = lookups;\n    this._index = index;\n    this._fileInfo = fileInfo;\n};\n\nNamespaceValue.prototype = Object.assign(new Node(), {\n    type: 'NamespaceValue',\n\n    eval(context) {\n        let i, name, rules = this.value.eval(context);\n        \n        for (i = 0; i < this.lookups.length; i++) {\n            name = this.lookups[i];\n\n            /**\n             * Eval'd DRs return rulesets.\n             * Eval'd mixins return rules, so let's make a ruleset if we need it.\n             * We need to do this because of late parsing of values\n             */\n            if (Array.isArray(rules)) {\n                rules = new Ruleset([new Selector()], rules);\n            }\n\n            if (name === '') {\n                rules = rules.lastDeclaration();\n            }\n            else if (name.charAt(0) === '@') {\n                if (name.charAt(1) === '@') {\n                    name = `@${new Variable(name.substr(1)).eval(context).value}`;\n                }\n                if (rules.variables) {\n                    rules = rules.variable(name);\n                }\n                \n                if (!rules) {\n                    throw { type: 'Name',\n                        message: `variable ${name} not found`,\n                        filename: this.fileInfo().filename,\n                        index: this.getIndex() };\n                }\n            }\n            else {\n                if (name.substring(0, 2) === '$@') {\n                    name = `$${new Variable(name.substr(1)).eval(context).value}`;\n                }\n                else {\n                    name = name.charAt(0) === '$' ? name : `$${name}`;\n                }\n                if (rules.properties) {\n                    rules = rules.property(name);\n                }\n            \n                if (!rules) {\n                    throw { type: 'Name',\n                        message: `property \"${name.substr(1)}\" not found`,\n                        filename: this.fileInfo().filename,\n                        index: this.getIndex() };\n                }\n                // Properties are an array of values, since a ruleset can have multiple props.\n                // We pick the last one (the \"cascaded\" value)\n                rules = rules[rules.length - 1];\n            }\n\n            if (rules.value) {\n                rules = rules.eval(context).value;\n            }\n            if (rules.ruleset) {\n                rules = rules.ruleset.eval(context);\n            }\n        }\n        return rules;\n    }\n});\n\nexport default NamespaceValue;\n","import Value from './value';\nimport Selector from './selector';\nimport AtRule from './atrule';\nimport NestableAtRulePrototype from './nested-at-rule';\nimport Anonymous from './anonymous';\nimport Expression from './expression';\nimport Ruleset from './ruleset';\n\nconst StartingStyle = function(value, features, index, currentFileInfo, visibilityInfo) {\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    var selectors = (new Selector([], null, null, this._index, this._fileInfo)).createEmptySelectors();\n    this.simpleBlock = features && features[0] instanceof Expression === false;\n   \n    if (this.simpleBlock) {\n        this.features = new Value(features);\n        this.declarations = value;\n        this.allowRoot = true;\n     \n        this.setParent(selectors, this);\n        this.setParent(this.features, this);\n        this.setParent(this.declarations, this);\n    } else {\n        this.features = new Value([]);\n        this.rules = [new Ruleset(selectors, value)];//value;\n        this.rules[0].allowImports = true;\n        this.allowRoot = true;\n      \n        this.setParent(selectors, this);\n        this.setParent(this.features, this);\n        this.setParent(this.rules, this);\n    }\n\n    this.copyVisibilityInfo(visibilityInfo);\n\n};\n\nStartingStyle.prototype = Object.assign(new AtRule(), {\n    type: 'StartingStyle',\n\n    ...NestableAtRulePrototype,\n\n    genCSS(context, output) {\n        output.add('@starting-style', this._fileInfo, this._index);\n        context.firstSelector = true;\n        \n        this.features.genCSS(context, output);\n       \n        if (this.simpleBlock) {\n            this.outputRuleset(context, output, this.declarations);\n        } else {\n            this.outputRuleset(context, output, this.rules);  \n        }\n    },\n\n    eval(context) {\n        if (!context.mediaBlocks) {\n            context.mediaBlocks = [];\n            context.mediaPath = [];\n        }\n\n        const media = new StartingStyle(null, [], this._index, this._fileInfo, this.visibilityInfo());\n\n        if (this.simpleBlock) {\n            if (this.debugInfo) {\n                this.declarations[0].debugInfo = this.debugInfo;\n                media.debugInfo = this.debugInfo;\n            }\n\n            media.features = this.features.eval(context);\n\n            this.declarations[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n            context.frames.unshift(this.declarations[0]);\n            media.declarations = this.declarations.map(rule => rule.eval(context));\n          \n            context.frames.shift();\n\n            return context.mediaPath.length == 0 ? media.evalTop(context) :\n                media.evalNestedBlock(context);\n        } else {\n            media.simpleBlock = false;\n\n            if (this.debugInfo) {\n                this.rules[0].debugInfo = this.debugInfo;\n                media.debugInfo = this.debugInfo;\n            }\n\n            media.features = this.features.eval(context);\n          \n            context.mediaPath.push(media);\n            context.mediaBlocks.push(media);\n          \n            this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n            context.frames.unshift(this.rules[0]);\n            media.rules = [this.rules[0].eval(context)];\n\n            context.frames.shift();\n            context.mediaPath.pop();\n           \n            return context.mediaPath.length === 0 ? media.evalTop(context) :\n                media.evalNested(context);\n        }\n    },\n\n    evalNestedBlock: function (context) {\n        let i;\n        let value;\n        let path = context.mediaPath.concat([this]);\n       \n        for (i = 0; i < path.length; i++) {\n            value = path[i].features instanceof Value ?\n                path[i].features.value : path[i].features;\n            path[i] = Array.isArray(value) ? value : [value];\n        }\n\n        this.features = new Value(this.permute(path).map(function (path) {\n            path = path.map(function (fragment) { return fragment.toCSS ? fragment : new Anonymous(fragment); });\n            for (i = path.length - 1; i > 0; i--) {\n                path.splice(i, 0, new Anonymous('and'));\n            }\n            return new Expression(path);\n        }));\n        \n        this.setParent(this.features, this);\n\n        return new StartingStyle(this.declarations, this.features, this._index, this._fileInfo, this.visibilityInfo());\n    },\n});\n\nexport default StartingStyle;\n","import Selector from './selector';\nimport Element from './element';\nimport Ruleset from './ruleset';\nimport Declaration from './declaration';\nimport DetachedRuleset from './detached-ruleset';\nimport Expression from './expression';\nimport contexts from '../contexts';\nimport * as utils from '../utils';\n\nconst Definition = function(name, params, rules, condition, variadic, frames, visibilityInfo) {\n    this.name = name || 'anonymous mixin';\n    this.selectors = [new Selector([new Element(null, name, false, this._index, this._fileInfo)])];\n    this.params = params;\n    this.condition = condition;\n    this.variadic = variadic;\n    this.arity = params.length;\n    this.rules = rules;\n    this._lookups = {};\n    const optionalParameters = [];\n    this.required = params.reduce(function (count, p) {\n        if (!p.name || (p.name && !p.value)) {\n            return count + 1;\n        }\n        else {\n            optionalParameters.push(p.name);\n            return count;\n        }\n    }, 0);\n    this.optionalParameters = optionalParameters;\n    this.frames = frames;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n}\n\nDefinition.prototype = Object.assign(new Ruleset(), {\n    type: 'MixinDefinition',\n    evalFirst: true,\n\n    accept(visitor) {\n        if (this.params && this.params.length) {\n            this.params = visitor.visitArray(this.params);\n        }\n        this.rules = visitor.visitArray(this.rules);\n        if (this.condition) {\n            this.condition = visitor.visit(this.condition);\n        }\n    },\n\n    evalParams(context, mixinEnv, args, evaldArguments) {\n        /* jshint boss:true */\n        const frame = new Ruleset(null, null);\n\n        let varargs;\n        let arg;\n        const params = utils.copyArray(this.params);\n        let i;\n        let j;\n        let val;\n        let name;\n        let isNamedFound;\n        let argIndex;\n        let argsLength = 0;\n\n        if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\n            frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\n        }\n        mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\n\n        if (args) {\n            args = utils.copyArray(args);\n            argsLength = args.length;\n\n            for (i = 0; i < argsLength; i++) {\n                arg = args[i];\n                if (name = (arg && arg.name)) {\n                    isNamedFound = false;\n                    for (j = 0; j < params.length; j++) {\n                        if (!evaldArguments[j] && name === params[j].name) {\n                            evaldArguments[j] = arg.value.eval(context);\n                            frame.prependRule(new Declaration(name, arg.value.eval(context)));\n                            isNamedFound = true;\n                            break;\n                        }\n                    }\n                    if (isNamedFound) {\n                        args.splice(i, 1);\n                        i--;\n                        continue;\n                    } else {\n                        throw { type: 'Runtime', message: `Named argument for ${this.name} ${args[i].name} not found` };\n                    }\n                }\n            }\n        }\n        argIndex = 0;\n        for (i = 0; i < params.length; i++) {\n            if (evaldArguments[i]) { continue; }\n\n            arg = args && args[argIndex];\n\n            if (name = params[i].name) {\n                if (params[i].variadic) {\n                    varargs = [];\n                    for (j = argIndex; j < argsLength; j++) {\n                        varargs.push(args[j].value.eval(context));\n                    }\n                    frame.prependRule(new Declaration(name, new Expression(varargs).eval(context)));\n                } else {\n                    val = arg && arg.value;\n                    if (val) {\n                        // This was a mixin call, pass in a detached ruleset of it's eval'd rules\n                        if (Array.isArray(val)) {\n                            val = new DetachedRuleset(new Ruleset('', val));\n                        }\n                        else {\n                            val = val.eval(context);\n                        }\n                    } else if (params[i].value) {\n                        val = params[i].value.eval(mixinEnv);\n                        frame.resetCache();\n                    } else {\n                        throw { type: 'Runtime', message: `wrong number of arguments for ${this.name} (${argsLength} for ${this.arity})` };\n                    }\n\n                    frame.prependRule(new Declaration(name, val));\n                    evaldArguments[i] = val;\n                }\n            }\n\n            if (params[i].variadic && args) {\n                for (j = argIndex; j < argsLength; j++) {\n                    evaldArguments[j] = args[j].value.eval(context);\n                }\n            }\n            argIndex++;\n        }\n\n        return frame;\n    },\n\n    makeImportant() {\n        const rules = !this.rules ? this.rules : this.rules.map(function (r) {\n            if (r.makeImportant) {\n                return r.makeImportant(true);\n            } else {\n                return r;\n            }\n        });\n        const result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\n        return result;\n    },\n\n    eval(context) {\n        return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || utils.copyArray(context.frames));\n    },\n\n    evalCall(context, args, important) {\n        const _arguments = [];\n        const mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames;\n        const frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments);\n        let rules;\n        let ruleset;\n\n        frame.prependRule(new Declaration('@arguments', new Expression(_arguments).eval(context)));\n\n        rules = utils.copyArray(this.rules);\n\n        ruleset = new Ruleset(null, rules);\n        ruleset.originalRuleset = this;\n        ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));\n        if (important) {\n            ruleset = ruleset.makeImportant();\n        }\n        return ruleset;\n    },\n\n    matchCondition(args, context) {\n        if (this.condition && !this.condition.eval(\n            new contexts.Eval(context,\n                [this.evalParams(context, /* the parameter variables */\n                    new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])]\n                    .concat(this.frames || []) // the parent namespace/mixin frames\n                    .concat(context.frames)))) { // the current environment frames\n            return false;\n        }\n        return true;\n    },\n\n    matchArgs(args, context) {\n        const allArgsCnt = (args && args.length) || 0;\n        let len;\n        const optionalParameters = this.optionalParameters;\n        const requiredArgsCnt = !args ? 0 : args.reduce(function (count, p) {\n            if (optionalParameters.indexOf(p.name) < 0) {\n                return count + 1;\n            } else {\n                return count;\n            }\n        }, 0);\n\n        if (!this.variadic) {\n            if (requiredArgsCnt < this.required) {\n                return false;\n            }\n            if (allArgsCnt > this.params.length) {\n                return false;\n            }\n        } else {\n            if (requiredArgsCnt < (this.required - 1)) {\n                return false;\n            }\n        }\n\n        // check patterns\n        len = Math.min(requiredArgsCnt, this.arity);\n\n        for (let i = 0; i < len; i++) {\n            if (!this.params[i].name && !this.params[i].variadic) {\n                if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n});\n\nexport default Definition;\n","import Node from './node';\nimport Selector from './selector';\nimport MixinDefinition from './mixin-definition';\nimport defaultFunc from '../functions/default';\n\nconst MixinCall = function(elements, args, index, currentFileInfo, important) {\n    this.selector = new Selector(elements);\n    this.arguments = args || [];\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.important = important;\n    this.allowRoot = true;\n    this.setParent(this.selector, this);\n};\n\nMixinCall.prototype = Object.assign(new Node(), {\n    type: 'MixinCall',\n\n    accept(visitor) {\n        if (this.selector) {\n            this.selector = visitor.visit(this.selector);\n        }\n        if (this.arguments.length) {\n            this.arguments = visitor.visitArray(this.arguments);\n        }\n    },\n\n    eval(context) {\n        let mixins;\n        let mixin;\n        let mixinPath;\n        const args = [];\n        let arg;\n        let argValue;\n        const rules = [];\n        let match = false;\n        let i;\n        let m;\n        let f;\n        let isRecursive;\n        let isOneFound;\n        const candidates = [];\n        let candidate;\n        const conditionResult = [];\n        let defaultResult;\n        const defFalseEitherCase = -1;\n        const defNone = 0;\n        const defTrue = 1;\n        const defFalse = 2;\n        let count;\n        let originalRuleset;\n        let noArgumentsFilter;\n\n        this.selector = this.selector.eval(context);\n\n        function calcDefGroup(mixin, mixinPath) {\n            let f, p, namespace;\n\n            for (f = 0; f < 2; f++) {\n                conditionResult[f] = true;\n                defaultFunc.value(f);\n                for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\n                    namespace = mixinPath[p];\n                    if (namespace.matchCondition) {\n                        conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);\n                    }\n                }\n                if (mixin.matchCondition) {\n                    conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);\n                }\n            }\n            if (conditionResult[0] || conditionResult[1]) {\n                if (conditionResult[0] != conditionResult[1]) {\n                    return conditionResult[1] ?\n                        defTrue : defFalse;\n                }\n\n                return defNone;\n            }\n            return defFalseEitherCase;\n        }\n\n        for (i = 0; i < this.arguments.length; i++) {\n            arg = this.arguments[i];\n            argValue = arg.value.eval(context);\n            if (arg.expand && Array.isArray(argValue.value)) {\n                argValue = argValue.value;\n                for (m = 0; m < argValue.length; m++) {\n                    args.push({value: argValue[m]});\n                }\n            } else {\n                args.push({name: arg.name, value: argValue});\n            }\n        }\n\n        noArgumentsFilter = function(rule) {return rule.matchArgs(null, context);};\n\n        for (i = 0; i < context.frames.length; i++) {\n            if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {\n                isOneFound = true;\n\n                // To make `default()` function independent of definition order we have two \"subpasses\" here.\n                // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\n                // and build candidate list with corresponding flags. Then, when we know all possible matches,\n                // we make a final decision.\n\n                for (m = 0; m < mixins.length; m++) {\n                    mixin = mixins[m].rule;\n                    mixinPath = mixins[m].path;\n                    isRecursive = false;\n                    for (f = 0; f < context.frames.length; f++) {\n                        if ((!(mixin instanceof MixinDefinition)) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {\n                            isRecursive = true;\n                            break;\n                        }\n                    }\n                    if (isRecursive) {\n                        continue;\n                    }\n\n                    if (mixin.matchArgs(args, context)) {\n                        candidate = {mixin, group: calcDefGroup(mixin, mixinPath)};\n\n                        if (candidate.group !== defFalseEitherCase) {\n                            candidates.push(candidate);\n                        }\n\n                        match = true;\n                    }\n                }\n\n                defaultFunc.reset();\n\n                count = [0, 0, 0];\n                for (m = 0; m < candidates.length; m++) {\n                    count[candidates[m].group]++;\n                }\n\n                if (count[defNone] > 0) {\n                    defaultResult = defFalse;\n                } else {\n                    defaultResult = defTrue;\n                    if ((count[defTrue] + count[defFalse]) > 1) {\n                        throw { type: 'Runtime',\n                            message: `Ambiguous use of \\`default()\\` found when matching for \\`${this.format(args)}\\``,\n                            index: this.getIndex(), filename: this.fileInfo().filename };\n                    }\n                }\n\n                for (m = 0; m < candidates.length; m++) {\n                    candidate = candidates[m].group;\n                    if ((candidate === defNone) || (candidate === defaultResult)) {\n                        try {\n                            mixin = candidates[m].mixin;\n                            if (!(mixin instanceof MixinDefinition)) {\n                                originalRuleset = mixin.originalRuleset || mixin;\n                                mixin = new MixinDefinition('', [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());\n                                mixin.originalRuleset = originalRuleset;\n                            }\n                            const newRules = mixin.evalCall(context, args, this.important).rules;\n                            this._setVisibilityToReplacement(newRules);\n                            Array.prototype.push.apply(rules, newRules);\n                        } catch (e) {\n                            throw { message: e.message, index: this.getIndex(), filename: this.fileInfo().filename, stack: e.stack };\n                        }\n                    }\n                }\n\n                if (match) {\n                    return rules;\n                }\n            }\n        }\n        if (isOneFound) {\n            throw { type:    'Runtime',\n                message: `No matching definition was found for \\`${this.format(args)}\\``,\n                index:   this.getIndex(), filename: this.fileInfo().filename };\n        } else {\n            throw { type:    'Name',\n                message: `${this.selector.toCSS().trim()} is undefined`,\n                index:   this.getIndex(), filename: this.fileInfo().filename };\n        }\n    },\n\n    _setVisibilityToReplacement(replacement) {\n        let i, rule;\n        if (this.blocksVisibility()) {\n            for (i = 0; i < replacement.length; i++) {\n                rule = replacement[i];\n                rule.addVisibilityBlock();\n            }\n        }\n    },\n\n    format(args) {\n        return `${this.selector.toCSS().trim()}(${args ? args.map(function (a) {\n            let argValue = '';\n            if (a.name) {\n                argValue += `${a.name}:`;\n            }\n            if (a.value.toCSS) {\n                argValue += a.value.toCSS();\n            } else {\n                argValue += '???';\n            }\n            return argValue;\n        }).join(', ') : ''})`;\n    }\n});\n\nexport default MixinCall;\n","import Node from './node';\nimport Color from './color';\nimport AtRule from './atrule';\nimport DetachedRuleset from './detached-ruleset';\nimport Operation from './operation';\nimport Dimension from './dimension';\nimport Unit from './unit';\nimport Keyword from './keyword';\nimport Variable from './variable';\nimport Property from './property';\nimport Ruleset from './ruleset';\nimport Element from './element';\nimport Attribute from './attribute';\nimport Combinator from './combinator';\nimport Selector from './selector';\nimport Quoted from './quoted';\nimport Expression from './expression';\nimport Declaration from './declaration';\nimport Call from './call';\nimport URL from './url';\nimport Import from './import';\nimport Comment from './comment';\nimport Anonymous from './anonymous';\nimport Value from './value';\nimport JavaScript from './javascript';\nimport Assignment from './assignment';\nimport Condition from './condition';\nimport QueryInParens from './query-in-parens';\nimport Paren from './paren';\nimport Media from './media';\nimport Container from './container';\nimport Scope from './scope';\nimport UnicodeDescriptor from './unicode-descriptor';\nimport Negative from './negative';\nimport Extend from './extend';\nimport VariableCall from './variable-call';\nimport NamespaceValue from './namespace-value';\nimport StartingStyle from './starting-style';\n\n// mixins\nimport MixinCall from './mixin-call';\nimport MixinDefinition from './mixin-definition';\n\nexport default {\n    Node, Color, AtRule, DetachedRuleset, Operation,\n    Dimension, Unit, Keyword, Variable, Property,\n    Ruleset, Element, Attribute, Combinator, Selector,\n    Quoted, Expression, Declaration, Call, URL, Import,\n    Comment, Anonymous, Value, JavaScript, Assignment,\n    Condition, Paren, Media, Container, QueryInParens, \n    UnicodeDescriptor, Negative, Extend, VariableCall, \n    NamespaceValue, StartingStyle, Scope,\n    mixin: {\n        Call: MixinCall,\n        Definition: MixinDefinition\n    }\n};","class AbstractFileManager {\n    getPath(filename) {\n        let j = filename.lastIndexOf('?');\n        if (j > 0) {\n            filename = filename.slice(0, j);\n        }\n        j = filename.lastIndexOf('/');\n        if (j < 0) {\n            j = filename.lastIndexOf('\\\\');\n        }\n        if (j < 0) {\n            return '';\n        }\n        return filename.slice(0, j + 1);\n    }\n\n    tryAppendExtension(path, ext) {\n        return /(\\.[a-z]*$)|([?;].*)$/.test(path) ? path : path + ext;\n    }\n\n    tryAppendLessExtension(path) {\n        return this.tryAppendExtension(path, '.less');\n    }\n\n    supportsSync() {\n        return false;\n    }\n\n    alwaysMakePathsAbsolute() {\n        return false;\n    }\n\n    isPathAbsolute(filename) {\n        return (/^(?:[a-z-]+:|\\/|\\\\|#)/i).test(filename);\n    }\n\n    // TODO: pull out / replace?\n    join(basePath, laterPath) {\n        if (!basePath) {\n            return laterPath;\n        }\n        return basePath + laterPath;\n    }\n\n    pathDiff(url, baseUrl) {\n        // diff between two paths to create a relative path\n\n        const urlParts = this.extractUrlParts(url);\n\n        const baseUrlParts = this.extractUrlParts(baseUrl);\n        let i;\n        let max;\n        let urlDirectories;\n        let baseUrlDirectories;\n        let diff = '';\n        if (urlParts.hostPart !== baseUrlParts.hostPart) {\n            return '';\n        }\n        max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);\n        for (i = 0; i < max; i++) {\n            if (baseUrlParts.directories[i] !== urlParts.directories[i]) { break; }\n        }\n        baseUrlDirectories = baseUrlParts.directories.slice(i);\n        urlDirectories = urlParts.directories.slice(i);\n        for (i = 0; i < baseUrlDirectories.length - 1; i++) {\n            diff += '../';\n        }\n        for (i = 0; i < urlDirectories.length - 1; i++) {\n            diff += `${urlDirectories[i]}/`;\n        }\n        return diff;\n    }\n\n    /**\n     * Helper function, not part of API.\n     * This should be replaceable by newer Node / Browser APIs\n     * \n     * @param {string} url \n     * @param {string} baseUrl\n     */\n    extractUrlParts(url, baseUrl) {\n        // urlParts[1] = protocol://hostname/ OR /\n        // urlParts[2] = / if path relative to host base\n        // urlParts[3] = directories\n        // urlParts[4] = filename\n        // urlParts[5] = parameters\n\n        const urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^/?#]*\\/)|([/\\\\]))?((?:[^/\\\\?#]*[/\\\\])*)([^/\\\\?#]*)([#?].*)?$/i;\n\n        const urlParts = url.match(urlPartsRegex);\n        const returner = {};\n        let rawDirectories = [];\n        const directories = [];\n        let i;\n        let baseUrlParts;\n\n        if (!urlParts) {\n            throw new Error(`Could not parse sheet href - '${url}'`);\n        }\n\n        // Stylesheets in IE don't always return the full path\n        if (baseUrl && (!urlParts[1] || urlParts[2])) {\n            baseUrlParts = baseUrl.match(urlPartsRegex);\n            if (!baseUrlParts) {\n                throw new Error(`Could not parse page url - '${baseUrl}'`);\n            }\n            urlParts[1] = urlParts[1] || baseUrlParts[1] || '';\n            if (!urlParts[2]) {\n                urlParts[3] = baseUrlParts[3] + urlParts[3];\n            }\n        }\n\n        if (urlParts[3]) {\n            rawDirectories = urlParts[3].replace(/\\\\/g, '/').split('/');\n\n            // collapse '..' and skip '.'\n            for (i = 0; i < rawDirectories.length; i++) {\n\n                if (rawDirectories[i] === '..') {\n                    directories.pop();\n                }\n                else if (rawDirectories[i] !== '.') {\n                    directories.push(rawDirectories[i]);\n                }\n            \n            }\n        }\n\n        returner.hostPart = urlParts[1];\n        returner.directories = directories;\n        returner.rawPath = (urlParts[1] || '') + rawDirectories.join('/');\n        returner.path = (urlParts[1] || '') + directories.join('/');\n        returner.filename = urlParts[4];\n        returner.fileUrl = returner.path + (urlParts[4] || '');\n        returner.url = returner.fileUrl + (urlParts[5] || '');\n        return returner;\n    }\n}\n\nexport default AbstractFileManager;\n","import functionRegistry from '../functions/function-registry';\nimport LessError from '../less-error';\n\nclass AbstractPluginLoader {\n    constructor() {\n        // Implemented by Node.js plugin loader\n        this.require = function() {\n            return null;\n        }\n    }\n\n    evalPlugin(contents, context, imports, pluginOptions, fileInfo) {\n\n        let loader, registry, pluginObj, localModule, pluginManager, filename, result;\n\n        pluginManager = context.pluginManager;\n\n        if (fileInfo) {\n            if (typeof fileInfo === 'string') {\n                filename = fileInfo;\n            }\n            else {\n                filename = fileInfo.filename;\n            }\n        }\n        const shortname = (new this.less.FileManager()).extractUrlParts(filename).filename;\n\n        if (filename) {\n            pluginObj = pluginManager.get(filename);\n\n            if (pluginObj) {\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n                if (result) {\n                    return result;\n                }\n                try {\n                    if (pluginObj.use) {\n                        pluginObj.use.call(this.context, pluginObj);\n                    }\n                }\n                catch (e) {\n                    e.message = e.message || 'Error during @plugin call';\n                    return new LessError(e, imports, filename);\n                }\n                return pluginObj;\n            }\n        }\n        localModule = {\n            exports: {},\n            pluginManager,\n            fileInfo\n        };\n        registry = functionRegistry.create();\n\n        const registerPlugin = function(obj) {\n            pluginObj = obj;\n        };\n\n        try {\n            loader = new Function('module', 'require', 'registerPlugin', 'functions', 'tree', 'less', 'fileInfo', contents);\n            loader(localModule, this.require(filename), registerPlugin, registry, this.less.tree, this.less, fileInfo);\n        }\n        catch (e) {\n            return new LessError(e, imports, filename);\n        }\n\n        if (!pluginObj) {\n            pluginObj = localModule.exports;\n        }\n        pluginObj = this.validatePlugin(pluginObj, filename, shortname);\n\n        if (pluginObj instanceof LessError) {\n            return pluginObj;\n        }\n\n        if (pluginObj) {\n            pluginObj.imports = imports;\n            pluginObj.filename = filename;\n\n            // For < 3.x (or unspecified minVersion) - setOptions() before install()\n            if (!pluginObj.minVersion || this.compareVersion('3.0.0', pluginObj.minVersion) < 0) {\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n\n                if (result) {\n                    return result;\n                }\n            }\n\n            // Run on first load\n            pluginManager.addPlugin(pluginObj, fileInfo.filename, registry);\n            pluginObj.functions = registry.getLocalFunctions();\n\n            // Need to call setOptions again because the pluginObj might have functions\n            result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n            if (result) {\n                return result;\n            }\n\n            // Run every @plugin call\n            try {\n                if (pluginObj.use) {\n                    pluginObj.use.call(this.context, pluginObj);\n                }\n            }\n            catch (e) {\n                e.message = e.message || 'Error during @plugin call';\n                return new LessError(e, imports, filename);\n            }\n\n        }\n        else {\n            return new LessError({ message: 'Not a valid plugin' }, imports, filename);\n        }\n\n        return pluginObj;\n\n    }\n\n    trySetOptions(plugin, filename, name, options) {\n        if (options && !plugin.setOptions) {\n            return new LessError({\n                message: `Options have been provided but the plugin ${name} does not support any options.`\n            });\n        }\n        try {\n            plugin.setOptions && plugin.setOptions(options);\n        }\n        catch (e) {\n            return new LessError(e);\n        }\n    }\n\n    validatePlugin(plugin, filename, name) {\n        if (plugin) {\n            // support plugins being a function\n            // so that the plugin can be more usable programmatically\n            if (typeof plugin === 'function') {\n                plugin = new plugin();\n            }\n\n            if (plugin.minVersion) {\n                if (this.compareVersion(plugin.minVersion, this.less.version) < 0) {\n                    return new LessError({\n                        message: `Plugin ${name} requires version ${this.versionToString(plugin.minVersion)}`\n                    });\n                }\n            }\n            return plugin;\n        }\n        return null;\n    }\n\n    compareVersion(aVersion, bVersion) {\n        if (typeof aVersion === 'string') {\n            aVersion = aVersion.match(/^(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\n            aVersion.shift();\n        }\n        for (let i = 0; i < aVersion.length; i++) {\n            if (aVersion[i] !== bVersion[i]) {\n                return parseInt(aVersion[i]) > parseInt(bVersion[i]) ? -1 : 1;\n            }\n        }\n        return 0;\n    }\n\n    versionToString(version) {\n        let versionString = '';\n        for (let i = 0; i < version.length; i++) {\n            versionString += (versionString ? '.' : '') + version[i];\n        }\n        return versionString;\n    }\n\n    printUsage(plugins) {\n        for (let i = 0; i < plugins.length; i++) {\n            const plugin = plugins[i];\n            if (plugin.printUsage) {\n                plugin.printUsage();\n            }\n        }\n    }\n}\n\nexport default AbstractPluginLoader;\n\n","import Anonymous from '../tree/anonymous';\nimport Keyword from '../tree/keyword';\n\nfunction boolean(condition) {\n    return condition ? Keyword.True : Keyword.False;\n}\n\n/**\n * Functions with evalArgs set to false are sent context\n * as the first argument.\n */\nfunction If(context, condition, trueValue, falseValue) {\n    return condition.eval(context) ? trueValue.eval(context)\n        : (falseValue ? falseValue.eval(context) : new Anonymous);\n}\nIf.evalArgs = false;\n\nfunction isdefined(context, variable) {\n    try {\n        variable.eval(context);\n        return Keyword.True;\n    } catch (e) {\n        return Keyword.False;\n    }\n}\n\nisdefined.evalArgs = false;\n\nexport default { isdefined, boolean, 'if': If };\n","import Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nimport Expression from '../tree/expression';\nimport Operation from '../tree/operation';\nlet colorFunctions;\n\nfunction clamp(val) {\n    return Math.min(1, Math.max(0, val));\n}\nfunction hsla(origColor, hsl) {\n    const color = colorFunctions.hsla(hsl.h, hsl.s, hsl.l, hsl.a);\n    if (color) {\n        if (origColor.value && \n            /^(rgb|hsl)/.test(origColor.value)) {\n            color.value = origColor.value;\n        } else {\n            color.value = 'rgb';\n        }\n        return color;\n    }\n}\nfunction toHSL(color) {\n    if (color.toHSL) {\n        return color.toHSL();\n    } else {\n        throw new Error('Argument cannot be evaluated to a color');\n    }\n}\n\nfunction toHSV(color) {\n    if (color.toHSV) {\n        return color.toHSV();\n    } else {\n        throw new Error('Argument cannot be evaluated to a color');\n    }\n}\n\nfunction number(n) {\n    if (n instanceof Dimension) {\n        return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);\n    } else if (typeof n === 'number') {\n        return n;\n    } else {\n        throw {\n            type: 'Argument',\n            message: 'color functions take numbers as parameters'\n        };\n    }\n}\nfunction scaled(n, size) {\n    if (n instanceof Dimension && n.unit.is('%')) {\n        return parseFloat(n.value * size / 100);\n    } else {\n        return number(n);\n    }\n}\ncolorFunctions = {\n    rgb: function (r, g, b) {\n        let a = 1\n        /**\n         * Comma-less syntax\n         *   e.g. rgb(0 128 255 / 50%)\n         */\n        if (r instanceof Expression) {\n            const val = r.value\n            r = val[0]\n            g = val[1]\n            b = val[2]\n            /** \n             * @todo - should this be normalized in\n             *   function caller? Or parsed differently?\n             */\n            if (b instanceof Operation) {\n                const op = b\n                b = op.operands[0]\n                a = op.operands[1]\n            }\n        }\n        const color = colorFunctions.rgba(r, g, b, a);\n        if (color) {\n            color.value = 'rgb';\n            return color;\n        }\n    },\n    rgba: function (r, g, b, a) {\n        try {\n            if (r instanceof Color) {\n                if (g) {\n                    a = number(g);\n                } else {\n                    a = r.alpha;\n                }\n                return new Color(r.rgb, a, 'rgba');\n            }\n            const rgb = [r, g, b].map(c => scaled(c, 255));\n            a = number(a);\n            return new Color(rgb, a, 'rgba');\n        }\n        catch (e) {}\n    },\n    hsl: function (h, s, l) {\n        let a = 1\n        if (h instanceof Expression) {\n            const val = h.value\n            h = val[0]\n            s = val[1]\n            l = val[2]\n\n            if (l instanceof Operation) {\n                const op = l\n                l = op.operands[0]\n                a = op.operands[1]\n            }\n        }\n        const color = colorFunctions.hsla(h, s, l, a);\n        if (color) {\n            color.value = 'hsl';\n            return color;\n        }\n    },\n    hsla: function (h, s, l, a) {\n        let m1;\n        let m2;\n\n        function hue(h) {\n            h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\n            if (h * 6 < 1) {\n                return m1 + (m2 - m1) * h * 6;\n            }\n            else if (h * 2 < 1) {\n                return m2;\n            }\n            else if (h * 3 < 2) {\n                return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n            }\n            else {\n                return m1;\n            }\n        }\n\n        try {\n            if (h instanceof Color) {\n                if (s) {\n                    a = number(s);\n                } else {\n                    a = h.alpha;\n                }\n                return new Color(h.rgb, a, 'hsla');\n            }\n\n            h = (number(h) % 360) / 360;\n            s = clamp(number(s));l = clamp(number(l));a = clamp(number(a));\n\n            m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n            m1 = l * 2 - m2;\n\n            const rgb = [\n                hue(h + 1 / 3) * 255,\n                hue(h)       * 255,\n                hue(h - 1 / 3) * 255\n            ];\n            a = number(a);\n            return new Color(rgb, a, 'hsla');\n        }\n        catch (e) {}\n    },\n\n    hsv: function(h, s, v) {\n        return colorFunctions.hsva(h, s, v, 1.0);\n    },\n\n    hsva: function(h, s, v, a) {\n        h = ((number(h) % 360) / 360) * 360;\n        s = number(s);v = number(v);a = number(a);\n\n        let i;\n        let f;\n        i = Math.floor((h / 60) % 6);\n        f = (h / 60) - i;\n\n        const vs = [v,\n            v * (1 - s),\n            v * (1 - f * s),\n            v * (1 - (1 - f) * s)];\n        const perm = [[0, 3, 1],\n            [2, 0, 1],\n            [1, 0, 3],\n            [1, 2, 0],\n            [3, 1, 0],\n            [0, 1, 2]];\n\n        return colorFunctions.rgba(vs[perm[i][0]] * 255,\n            vs[perm[i][1]] * 255,\n            vs[perm[i][2]] * 255,\n            a);\n    },\n\n    hue: function (color) {\n        return new Dimension(toHSL(color).h);\n    },\n    saturation: function (color) {\n        return new Dimension(toHSL(color).s * 100, '%');\n    },\n    lightness: function (color) {\n        return new Dimension(toHSL(color).l * 100, '%');\n    },\n    hsvhue: function(color) {\n        return new Dimension(toHSV(color).h);\n    },\n    hsvsaturation: function (color) {\n        return new Dimension(toHSV(color).s * 100, '%');\n    },\n    hsvvalue: function (color) {\n        return new Dimension(toHSV(color).v * 100, '%');\n    },\n    red: function (color) {\n        return new Dimension(color.rgb[0]);\n    },\n    green: function (color) {\n        return new Dimension(color.rgb[1]);\n    },\n    blue: function (color) {\n        return new Dimension(color.rgb[2]);\n    },\n    alpha: function (color) {\n        return new Dimension(toHSL(color).a);\n    },\n    luma: function (color) {\n        return new Dimension(color.luma() * color.alpha * 100, '%');\n    },\n    luminance: function (color) {\n        const luminance =\n            (0.2126 * color.rgb[0] / 255) +\n                (0.7152 * color.rgb[1] / 255) +\n                (0.0722 * color.rgb[2] / 255);\n\n        return new Dimension(luminance * color.alpha * 100, '%');\n    },\n    saturate: function (color, amount, method) {\n        // filter: saturate(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s +=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s += amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    desaturate: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s -=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s -= amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    lighten: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l +=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l += amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    darken: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l -=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l -= amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    fadein: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a +=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a += amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fadeout: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a -=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a -= amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fade: function (color, amount) {\n        const hsl = toHSL(color);\n\n        hsl.a = amount.value / 100;\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    spin: function (color, amount) {\n        const hsl = toHSL(color);\n        const hue = (hsl.h + amount.value) % 360;\n\n        hsl.h = hue < 0 ? 360 + hue : hue;\n\n        return hsla(color, hsl);\n    },\n    //\n    // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\n    // http://sass-lang.com\n    //\n    mix: function (color1, color2, weight) {\n        if (!weight) {\n            weight = new Dimension(50);\n        }\n        const p = weight.value / 100.0;\n        const w = p * 2 - 1;\n        const a = toHSL(color1).a - toHSL(color2).a;\n\n        const w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        const w2 = 1 - w1;\n\n        const rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n            color1.rgb[1] * w1 + color2.rgb[1] * w2,\n            color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\n        const alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new Color(rgb, alpha);\n    },\n    greyscale: function (color) {\n        return colorFunctions.desaturate(color, new Dimension(100));\n    },\n    contrast: function (color, dark, light, threshold) {\n        // filter: contrast(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        if (typeof light === 'undefined') {\n            light = colorFunctions.rgba(255, 255, 255, 1.0);\n        }\n        if (typeof dark === 'undefined') {\n            dark = colorFunctions.rgba(0, 0, 0, 1.0);\n        }\n        // Figure out which is actually light and dark:\n        if (dark.luma() > light.luma()) {\n            const t = light;\n            light = dark;\n            dark = t;\n        }\n        if (typeof threshold === 'undefined') {\n            threshold = 0.43;\n        } else {\n            threshold = number(threshold);\n        }\n        if (color.luma() < threshold) {\n            return light;\n        } else {\n            return dark;\n        }\n    },\n    // Changes made in 2.7.0 - Reverted in 3.0.0\n    // contrast: function (color, color1, color2, threshold) {\n    //     // Return which of `color1` and `color2` has the greatest contrast with `color`\n    //     // according to the standard WCAG contrast ratio calculation.\n    //     // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n    //     // The threshold param is no longer used, in line with SASS.\n    //     // filter: contrast(3.2);\n    //     // should be kept as is, so check for color\n    //     if (!color.rgb) {\n    //         return null;\n    //     }\n    //     if (typeof color1 === 'undefined') {\n    //         color1 = colorFunctions.rgba(0, 0, 0, 1.0);\n    //     }\n    //     if (typeof color2 === 'undefined') {\n    //         color2 = colorFunctions.rgba(255, 255, 255, 1.0);\n    //     }\n    //     var contrast1, contrast2;\n    //     var luma = color.luma();\n    //     var luma1 = color1.luma();\n    //     var luma2 = color2.luma();\n    //     // Calculate contrast ratios for each color\n    //     if (luma > luma1) {\n    //         contrast1 = (luma + 0.05) / (luma1 + 0.05);\n    //     } else {\n    //         contrast1 = (luma1 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (luma > luma2) {\n    //         contrast2 = (luma + 0.05) / (luma2 + 0.05);\n    //     } else {\n    //         contrast2 = (luma2 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (contrast1 > contrast2) {\n    //         return color1;\n    //     } else {\n    //         return color2;\n    //     }\n    // },\n    argb: function (color) {\n        return new Anonymous(color.toARGB());\n    },\n    color: function(c) {\n        if ((c instanceof Quoted) &&\n            (/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})$/i.test(c.value))) {\n            const val = c.value.slice(1);\n            return new Color(val, undefined, `#${val}`);\n        }\n        if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {\n            c.value = undefined;\n            return c;\n        }\n        throw {\n            type:    'Argument',\n            message: 'argument must be a color keyword or 3|4|6|8 digit hex e.g. #FFF'\n        };\n    },\n    tint: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);\n    },\n    shade: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);\n    }\n};\n\nexport default colorFunctions;\n","import Color from '../tree/color';\n\n// Color Blending\n// ref: http://www.w3.org/TR/compositing-1\n\nfunction colorBlend(mode, color1, color2) {\n    const ab = color1.alpha;        // result\n\n    let // backdrop\n        cb;\n\n    const as = color2.alpha;\n\n    let // source\n        cs;\n\n    let ar;\n    let cr;\n    const r = [];\n\n    ar = as + ab * (1 - as);\n    for (let i = 0; i < 3; i++) {\n        cb = color1.rgb[i] / 255;\n        cs = color2.rgb[i] / 255;\n        cr = mode(cb, cs);\n        if (ar) {\n            cr = (as * cs + ab * (cb -\n                  as * (cb + cs - cr))) / ar;\n        }\n        r[i] = cr * 255;\n    }\n\n    return new Color(r, ar);\n}\n\nconst colorBlendModeFunctions = {\n    multiply: function(cb, cs) {\n        return cb * cs;\n    },\n    screen: function(cb, cs) {\n        return cb + cs - cb * cs;\n    },\n    overlay: function(cb, cs) {\n        cb *= 2;\n        return (cb <= 1) ?\n            colorBlendModeFunctions.multiply(cb, cs) :\n            colorBlendModeFunctions.screen(cb - 1, cs);\n    },\n    softlight: function(cb, cs) {\n        let d = 1;\n        let e = cb;\n        if (cs > 0.5) {\n            e = 1;\n            d = (cb > 0.25) ? Math.sqrt(cb)\n                : ((16 * cb - 12) * cb + 4) * cb;\n        }\n        return cb - (1 - 2 * cs) * e * (d - cb);\n    },\n    hardlight: function(cb, cs) {\n        return colorBlendModeFunctions.overlay(cs, cb);\n    },\n    difference: function(cb, cs) {\n        return Math.abs(cb - cs);\n    },\n    exclusion: function(cb, cs) {\n        return cb + cs - 2 * cb * cs;\n    },\n\n    // non-w3c functions:\n    average: function(cb, cs) {\n        return (cb + cs) / 2;\n    },\n    negation: function(cb, cs) {\n        return 1 - Math.abs(cb + cs - 1);\n    }\n};\n\nfor (const f in colorBlendModeFunctions) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (colorBlendModeFunctions.hasOwnProperty(f)) {\n        colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);\n    }\n}\n\nexport default colorBlend;\n","import Quoted from '../tree/quoted';\nimport URL from '../tree/url';\nimport * as utils from '../utils';\nimport logger from '../logger';\n\nexport default environment => {\n    \n    const fallback = (functionThis, node) => new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context);    \n\n    return { 'data-uri': function(mimetypeNode, filePathNode) {\n\n        if (!filePathNode) {\n            filePathNode = mimetypeNode;\n            mimetypeNode = null;\n        }\n\n        let mimetype = mimetypeNode && mimetypeNode.value;\n        let filePath = filePathNode.value;\n        const currentFileInfo = this.currentFileInfo;\n        const currentDirectory = currentFileInfo.rewriteUrls ?\n            currentFileInfo.currentDirectory : currentFileInfo.entryPath;\n\n        const fragmentStart = filePath.indexOf('#');\n        let fragment = '';\n        if (fragmentStart !== -1) {\n            fragment = filePath.slice(fragmentStart);\n            filePath = filePath.slice(0, fragmentStart);\n        }\n        const context = utils.clone(this.context);\n        context.rawBuffer = true;\n\n        const fileManager = environment.getFileManager(filePath, currentDirectory, context, environment, true);\n\n        if (!fileManager) {\n            return fallback(this, filePathNode);\n        }\n\n        let useBase64 = false;\n\n        // detect the mimetype if not given\n        if (!mimetypeNode) {\n\n            mimetype = environment.mimeLookup(filePath);\n\n            if (mimetype === 'image/svg+xml') {\n                useBase64 = false;\n            } else {\n                // use base 64 unless it's an ASCII or UTF-8 format\n                const charset = environment.charsetLookup(mimetype);\n                useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;\n            }\n            if (useBase64) { mimetype += ';base64'; }\n        }\n        else {\n            useBase64 = /;base64$/.test(mimetype);\n        }\n\n        const fileSync = fileManager.loadFileSync(filePath, currentDirectory, context, environment);\n        if (!fileSync.contents) {\n            logger.warn(`Skipped data-uri embedding of ${filePath} because file not found`);\n            return fallback(this, filePathNode || mimetypeNode);\n        }\n        let buf = fileSync.contents;\n        if (useBase64 && !environment.encodeBase64) {\n            return fallback(this, filePathNode);\n        }\n\n        buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);\n\n        const uri = `data:${mimetype},${buf}${fragment}`;\n\n        return new URL(new Quoted(`\"${uri}\"`, uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    }};\n};\n","import Comment from '../tree/comment';\nimport Node from '../tree/node';\nimport Dimension from '../tree/dimension';\nimport Declaration from '../tree/declaration';\nimport Expression from '../tree/expression';\nimport Ruleset from '../tree/ruleset';\nimport Selector from '../tree/selector';\nimport Element from '../tree/element';\nimport Quote from '../tree/quoted';\nimport Value from '../tree/value';\n\nconst getItemsFromNode = node => {\n    // handle non-array values as an array of length 1\n    // return 'undefined' if index is invalid\n    const items = Array.isArray(node.value) ?\n        node.value : Array(node);\n\n    return items;\n};\n\nexport default {\n    _SELF: function(n) {\n        return n;\n    },\n    '~': function(...expr) {\n        if (expr.length === 1) {\n            return expr[0];\n        }\n        return new Value(expr);\n    },\n    extract: function(values, index) {\n        // (1-based index)\n        index = index.value - 1;\n\n        return getItemsFromNode(values)[index];\n    },\n    length: function(values) {\n        return new Dimension(getItemsFromNode(values).length);\n    },\n    /**\n     * Creates a Less list of incremental values.\n     * Modeled after Lodash's range function, also exists natively in PHP\n     * \n     * @param {Dimension} [start=1]\n     * @param {Dimension} end  - e.g. 10 or 10px - unit is added to output\n     * @param {Dimension} [step=1] \n     */\n    range: function(start, end, step) {\n        let from;\n        let to;\n        let stepValue = 1;\n        const list = [];\n        if (end) {\n            to = end;\n            from = start.value;\n            if (step) {\n                stepValue = step.value;\n            }\n        }\n        else {\n            from = 1;\n            to = start;\n        }\n\n        for (let i = from; i <= to.value; i += stepValue) {\n            list.push(new Dimension(i, to.unit));\n        }\n\n        return new Expression(list);\n    },\n    each: function(list, rs) {\n        const rules = [];\n        let newRules;\n        let iterator;\n\n        const tryEval = val => {\n            if (val instanceof Node) {\n                return val.eval(this.context);\n            }\n            return val;\n        };\n\n        if (list.value && !(list instanceof Quote)) {\n            if (Array.isArray(list.value)) {\n                iterator = list.value.map(tryEval);\n            } else {\n                iterator = [tryEval(list.value)];\n            }\n        } else if (list.ruleset) {\n            iterator = tryEval(list.ruleset).rules;\n        } else if (list.rules) {\n            iterator = list.rules.map(tryEval);\n        } else if (Array.isArray(list)) {\n            iterator = list.map(tryEval);\n        } else {\n            iterator = [tryEval(list)];\n        }\n\n        let valueName = '@value';\n        let keyName = '@key';\n        let indexName = '@index';\n\n        if (rs.params) {\n            valueName = rs.params[0] && rs.params[0].name;\n            keyName = rs.params[1] && rs.params[1].name;\n            indexName = rs.params[2] && rs.params[2].name;\n            rs = rs.rules;\n        } else {\n            rs = rs.ruleset;\n        }\n\n        for (let i = 0; i < iterator.length; i++) {\n            let key;\n            let value;\n            const item = iterator[i];\n            if (item instanceof Declaration) {\n                key = typeof item.name === 'string' ? item.name : item.name[0].value;\n                value = item.value;\n            } else {\n                key = new Dimension(i + 1);\n                value = item;\n            }\n\n            if (item instanceof Comment) {\n                continue;\n            }\n\n            newRules = rs.rules.slice(0);\n            if (valueName) {\n                newRules.push(new Declaration(valueName,\n                    value,\n                    false, false, this.index, this.currentFileInfo));\n            }\n            if (indexName) {\n                newRules.push(new Declaration(indexName,\n                    new Dimension(i + 1),\n                    false, false, this.index, this.currentFileInfo));\n            }\n            if (keyName) {\n                newRules.push(new Declaration(keyName,\n                    key,\n                    false, false, this.index, this.currentFileInfo));\n            }\n\n            rules.push(new Ruleset([ new(Selector)([ new Element('', '&') ]) ],\n                newRules,\n                rs.strictImports,\n                rs.visibilityInfo()\n            ));\n        }\n\n        return new Ruleset([ new(Selector)([ new Element('', '&') ]) ],\n            rules,\n            rs.strictImports,\n            rs.visibilityInfo()\n        ).eval(this.context);\n    }\n};\n","import Dimension from '../tree/dimension';\n\nconst MathHelper = (fn, unit, n) => {\n    if (!(n instanceof Dimension)) {\n        throw { type: 'Argument', message: 'argument must be a number' };\n    }\n    if (unit === null) {\n        unit = n.unit;\n    } else {\n        n = n.unify();\n    }\n    return new Dimension(fn(parseFloat(n.value)), unit);\n};\n\nexport default MathHelper;","import mathHelper from './math-helper.js';\n\nconst mathFunctions = {\n    // name,  unit\n    ceil:  null,\n    floor: null,\n    sqrt:  null,\n    abs:   null,\n    tan:   '',\n    sin:   '',\n    cos:   '',\n    atan:  'rad',\n    asin:  'rad',\n    acos:  'rad'\n};\n\nfor (const f in mathFunctions) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (mathFunctions.hasOwnProperty(f)) {\n        mathFunctions[f] = mathHelper.bind(null, Math[f], mathFunctions[f]);\n    }\n}\n\nmathFunctions.round = (n, f) => {\n    const fraction = typeof f === 'undefined' ? 0 : f.value;\n    return mathHelper(num => num.toFixed(fraction), null, n);\n};\n\nexport default mathFunctions;\n","import Dimension from '../tree/dimension';\nimport Anonymous from '../tree/anonymous';\nimport mathHelper from './math-helper.js';\n\nconst minMax = function (isMin, args) {\n    args = Array.prototype.slice.call(args);\n    switch (args.length) {\n        case 0: throw { type: 'Argument', message: 'one or more arguments required' };\n    }\n    let i; // key is the unit.toString() for unified Dimension values,\n    let j;\n    let current;\n    let currentUnified;\n    let referenceUnified;\n    let unit;\n    let unitStatic;\n    let unitClone;\n\n    const // elems only contains original argument values.\n        order  = [];\n\n    const values = {};\n    // value is the index into the order array.\n    for (i = 0; i < args.length; i++) {\n        current = args[i];\n        if (!(current instanceof Dimension)) {\n            if (Array.isArray(args[i].value)) {\n                Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));\n                continue;\n            } else {\n                throw { type: 'Argument', message: 'incompatible types' };\n            }\n        }\n        currentUnified = current.unit.toString() === '' && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();\n        unit = currentUnified.unit.toString() === '' && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();\n        unitStatic = unit !== '' && unitStatic === undefined || unit !== '' && order[0].unify().unit.toString() === '' ? unit : unitStatic;\n        unitClone = unit !== '' && unitClone === undefined ? current.unit.toString() : unitClone;\n        j = values[''] !== undefined && unit !== '' && unit === unitStatic ? values[''] : values[unit];\n        if (j === undefined) {\n            if (unitStatic !== undefined && unit !== unitStatic) {\n                throw { type: 'Argument', message: 'incompatible types' };\n            }\n            values[unit] = order.length;\n            order.push(current);\n            continue;\n        }\n        referenceUnified = order[j].unit.toString() === '' && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();\n        if ( isMin && currentUnified.value < referenceUnified.value ||\n            !isMin && currentUnified.value > referenceUnified.value) {\n            order[j] = current;\n        }\n    }\n    if (order.length == 1) {\n        return order[0];\n    }\n    args = order.map(a => { return a.toCSS(this.context); }).join(this.context.compress ? ',' : ', ');\n    return new Anonymous(`${isMin ? 'min' : 'max'}(${args})`);\n};\n\nexport default {\n    min: function(...args) {\n        try {\n            return minMax.call(this, true, args);\n        } catch (e) {}\n    },\n    max: function(...args) {\n        try {\n            return minMax.call(this, false, args);\n        } catch (e) {}\n    },\n    convert: function (val, unit) {\n        return val.convertTo(unit.value);\n    },\n    pi: function () {\n        return new Dimension(Math.PI);\n    },\n    mod: function(a, b) {\n        return new Dimension(a.value % b.value, a.unit);\n    },\n    pow: function(x, y) {\n        if (typeof x === 'number' && typeof y === 'number') {\n            x = new Dimension(x);\n            y = new Dimension(y);\n        } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\n            throw { type: 'Argument', message: 'arguments must be numbers' };\n        }\n\n        return new Dimension(Math.pow(x.value, y.value), x.unit);\n    },\n    percentage: function (n) {\n        const result = mathHelper(num => num * 100, '%', n);\n\n        return result;\n    }\n};\n","import Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nimport JavaScript from '../tree/javascript';\n\nexport default {\n    e: function (str) {\n        return new Quoted('\"', str instanceof JavaScript ? str.evaluated : str.value, true);\n    },\n    escape: function (str) {\n        return new Anonymous(\n            encodeURI(str.value).replace(/=/g, '%3D').replace(/:/g, '%3A').replace(/#/g, '%23').replace(/;/g, '%3B')\n                .replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\n    },\n    replace: function (string, pattern, replacement, flags) {\n        let result = string.value;\n        replacement = (replacement.type === 'Quoted') ?\n            replacement.value : replacement.toCSS();\n        result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);\n        return new Quoted(string.quote || '', result, string.escaped);\n    },\n    '%': function (string /* arg, arg, ... */) {\n        const args = Array.prototype.slice.call(arguments, 1);\n        let result = string.value;\n\n        for (let i = 0; i < args.length; i++) {\n            /* jshint loopfunc:true */\n            result = result.replace(/%[sda]/i, token => {\n                const value = ((args[i].type === 'Quoted') &&\n                    token.match(/s/i)) ? args[i].value : args[i].toCSS();\n                return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\n            });\n        }\n        result = result.replace(/%%/g, '%');\n        return new Quoted(string.quote || '', result, string.escaped);\n    }\n};\n","import Keyword from '../tree/keyword';\nimport DetachedRuleset from '../tree/detached-ruleset';\nimport Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nimport URL from '../tree/url';\nimport Operation from '../tree/operation';\n\nconst isa = (n, Type) => (n instanceof Type) ? Keyword.True : Keyword.False;\nconst isunit = (n, unit) => {\n    if (unit === undefined) {\n        throw { type: 'Argument', message: 'missing the required second argument to isunit.' };\n    }\n    unit = typeof unit.value === 'string' ? unit.value : unit;\n    if (typeof unit !== 'string') {\n        throw { type: 'Argument', message: 'Second argument to isunit should be a unit or a string.' };\n    }\n    return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;\n};\n\nexport default {\n    isruleset: function (n) {\n        return isa(n, DetachedRuleset);\n    },\n    iscolor: function (n) {\n        return isa(n, Color);\n    },\n    isnumber: function (n) {\n        return isa(n, Dimension);\n    },\n    isstring: function (n) {\n        return isa(n, Quoted);\n    },\n    iskeyword: function (n) {\n        return isa(n, Keyword);\n    },\n    isurl: function (n) {\n        return isa(n, URL);\n    },\n    ispixel: function (n) {\n        return isunit(n, 'px');\n    },\n    ispercentage: function (n) {\n        return isunit(n, '%');\n    },\n    isem: function (n) {\n        return isunit(n, 'em');\n    },\n    isunit,\n    unit: function (val, unit) {\n        if (!(val instanceof Dimension)) {\n            throw { type: 'Argument',\n                message: `the first argument to unit must be a number${val instanceof Operation ? '. Have you forgotten parenthesis?' : ''}` };\n        }\n        if (unit) {\n            if (unit instanceof Keyword) {\n                unit = unit.value;\n            } else {\n                unit = unit.toCSS();\n            }\n        } else {\n            unit = '';\n        }\n        return new Dimension(val.value, unit);\n    },\n    'get-unit': function (n) {\n        return new Anonymous(n.unit);\n    }\n};\n","import Variable from '../tree/variable';\nimport Anonymous from '../tree/variable';\n\nconst styleExpression = function (args) {\n    args = Array.prototype.slice.call(args);\n    switch (args.length) {\n        case 0: throw { type: 'Argument', message: 'one or more arguments required' };\n    }\n    \n    const entityList = [new Variable(args[0].value, this.index, this.currentFileInfo).eval(this.context)];\n       \n    args = entityList.map(a => { return a.toCSS(this.context); }).join(this.context.compress ? ',' : ', ');\n    \n    return new Anonymous(`style(${args})`);\n};\n\nexport default {\n    style: function(...args) {\n        try {\n            return styleExpression.call(this, args);\n        } catch (e) {}\n    },\n};\n","import functionRegistry from './function-registry';\nimport functionCaller from './function-caller';\n\nimport boolean from './boolean';\nimport defaultFunc from './default';\nimport color from './color';\nimport colorBlending from './color-blending';\nimport dataUri from './data-uri';\nimport list from './list';\nimport math from './math';\nimport number from './number';\nimport string from './string';\nimport svg from './svg';\nimport types from './types';\nimport style from './style';\n\nexport default environment => {\n    const functions = { functionRegistry, functionCaller };\n\n    // register functions\n    functionRegistry.addMultiple(boolean);\n    functionRegistry.add('default', defaultFunc.eval.bind(defaultFunc));\n    functionRegistry.addMultiple(color);\n    functionRegistry.addMultiple(colorBlending);\n    functionRegistry.addMultiple(dataUri(environment));\n    functionRegistry.addMultiple(list);\n    functionRegistry.addMultiple(math);\n    functionRegistry.addMultiple(number);\n    functionRegistry.addMultiple(string);\n    functionRegistry.addMultiple(svg(environment));\n    functionRegistry.addMultiple(types);\n    functionRegistry.addMultiple(style);\n\n    return functions;\n};\n","import Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Expression from '../tree/expression';\nimport Quoted from '../tree/quoted';\nimport URL from '../tree/url';\n\nexport default () => {\n    return { 'svg-gradient': function(direction) {\n        let stops;\n        let gradientDirectionSvg;\n        let gradientType = 'linear';\n        let rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"';\n        const renderEnv = {compress: false};\n        let returner;\n        const directionValue = direction.toCSS(renderEnv);\n        let i;\n        let color;\n        let position;\n        let positionValue;\n        let alpha;\n\n        function throwArgumentDescriptor() {\n            throw { type: 'Argument',\n                message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' +\n                            ' end_color [end_position] or direction, color list' };\n        }\n\n        if (arguments.length == 2) {\n            if (arguments[1].value.length < 2) {\n                throwArgumentDescriptor();\n            }\n            stops = arguments[1].value;\n        } else if (arguments.length < 3) {\n            throwArgumentDescriptor();\n        } else {\n            stops = Array.prototype.slice.call(arguments, 1);\n        }\n\n        switch (directionValue) {\n            case 'to bottom':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\n                break;\n            case 'to right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case 'to bottom right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\n                break;\n            case 'to top right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case 'ellipse':\n            case 'ellipse at center':\n                gradientType = 'radial';\n                gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\n                rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\n                break;\n            default:\n                throw { type: 'Argument', message: 'svg-gradient direction must be \\'to bottom\\', \\'to right\\',' +\n                    ' \\'to bottom right\\', \\'to top right\\' or \\'ellipse at center\\'' };\n        }\n        returner = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1 1\"><${gradientType}Gradient id=\"g\" ${gradientDirectionSvg}>`;\n\n        for (i = 0; i < stops.length; i += 1) {\n            if (stops[i] instanceof Expression) {\n                color = stops[i].value[0];\n                position = stops[i].value[1];\n            } else {\n                color = stops[i];\n                position = undefined;\n            }\n\n            if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {\n                throwArgumentDescriptor();\n            }\n            positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';\n            alpha = color.alpha;\n            returner += `<stop offset=\"${positionValue}\" stop-color=\"${color.toRGB()}\"${alpha < 1 ? ` stop-opacity=\"${alpha}\"` : ''}/>`;\n        }\n        returner += `</${gradientType}Gradient><rect ${rectangleDimension} fill=\"url(#g)\" /></svg>`;\n\n        returner = encodeURIComponent(returner);\n\n        returner = `data:image/svg+xml,${returner}`;\n        return new URL(new Quoted(`'${returner}'`, returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    }};\n};\n","import contexts from './contexts';\nimport visitor from './visitors';\nimport tree from './tree';\n\nexport default function(root, options) {\n    options = options || {};\n    let evaldRoot;\n    let variables = options.variables;\n    const evalEnv = new contexts.Eval(options);\n\n    //\n    // Allows setting variables with a hash, so:\n    //\n    //   `{ color: new tree.Color('#f01') }` will become:\n    //\n    //   new tree.Declaration('@color',\n    //     new tree.Value([\n    //       new tree.Expression([\n    //         new tree.Color('#f01')\n    //       ])\n    //     ])\n    //   )\n    //\n    if (typeof variables === 'object' && !Array.isArray(variables)) {\n        variables = Object.keys(variables).map(function (k) {\n            let value = variables[k];\n\n            if (!(value instanceof tree.Value)) {\n                if (!(value instanceof tree.Expression)) {\n                    value = new tree.Expression([value]);\n                }\n                value = new tree.Value([value]);\n            }\n            return new tree.Declaration(`@${k}`, value, false, null, 0);\n        });\n        evalEnv.frames = [new tree.Ruleset(null, variables)];\n    }\n\n    const visitors = [\n        new visitor.JoinSelectorVisitor(),\n        new visitor.MarkVisibleSelectorsVisitor(true),\n        new visitor.ExtendVisitor(),\n        new visitor.ToCSSVisitor({compress: Boolean(options.compress)})\n    ];\n\n    const preEvalVisitors = [];\n    let v;\n    let visitorIterator;\n\n    /**\n     * first() / get() allows visitors to be added while visiting\n     * \n     * @todo Add scoping for visitors just like functions for @plugin; right now they're global\n     */\n    if (options.pluginManager) {\n        visitorIterator = options.pluginManager.visitor();\n        for (let i = 0; i < 2; i++) {\n            visitorIterator.first();\n            while ((v = visitorIterator.get())) {\n                if (v.isPreEvalVisitor) {\n                    if (i === 0 || preEvalVisitors.indexOf(v) === -1) {\n                        preEvalVisitors.push(v);\n                        v.run(root);\n                    }\n                }\n                else {\n                    if (i === 0 || visitors.indexOf(v) === -1) {\n                        if (v.isPreVisitor) {\n                            visitors.unshift(v);\n                        }\n                        else {\n                            visitors.push(v);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    evaldRoot = root.eval(evalEnv);\n\n    for (let i = 0; i < visitors.length; i++) {\n        visitors[i].run(evaldRoot);\n    }\n\n    // Run any remaining visitors added after eval pass\n    if (options.pluginManager) {\n        visitorIterator.first();\n        while ((v = visitorIterator.get())) {\n            if (visitors.indexOf(v) === -1 && preEvalVisitors.indexOf(v) === -1) {\n                v.run(evaldRoot);\n            }\n        }\n    }\n\n    return evaldRoot;\n}\n","/**\n * Plugin Manager\n */\nclass PluginManager {\n    constructor(less) {\n        this.less = less;\n        this.visitors = [];\n        this.preProcessors = [];\n        this.postProcessors = [];\n        this.installedPlugins = [];\n        this.fileManagers = [];\n        this.iterator = -1;\n        this.pluginCache = {};\n        this.Loader = new less.PluginLoader(less);\n    }\n\n    /**\n     * Adds all the plugins in the array\n     * @param {Array} plugins\n     */\n    addPlugins(plugins) {\n        if (plugins) {\n            for (let i = 0; i < plugins.length; i++) {\n                this.addPlugin(plugins[i]);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param plugin\n     * @param {String} filename\n     */\n    addPlugin(plugin, filename, functionRegistry) {\n        this.installedPlugins.push(plugin);\n        if (filename) {\n            this.pluginCache[filename] = plugin;\n        }\n        if (plugin.install) {\n            plugin.install(this.less, this, functionRegistry || this.less.functions.functionRegistry);\n        }\n    }\n\n    /**\n     *\n     * @param filename\n     */\n    get(filename) {\n        return this.pluginCache[filename];\n    }\n\n    /**\n     * Adds a visitor. The visitor object has options on itself to determine\n     * when it should run.\n     * @param visitor\n     */\n    addVisitor(visitor) {\n        this.visitors.push(visitor);\n    }\n\n    /**\n     * Adds a pre processor object\n     * @param {object} preProcessor\n     * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\n     */\n    addPreProcessor(preProcessor, priority) {\n        let indexToInsertAt;\n        for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {\n            if (this.preProcessors[indexToInsertAt].priority >= priority) {\n                break;\n            }\n        }\n        this.preProcessors.splice(indexToInsertAt, 0, {preProcessor, priority});\n    }\n\n    /**\n     * Adds a post processor object\n     * @param {object} postProcessor\n     * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n     */\n    addPostProcessor(postProcessor, priority) {\n        let indexToInsertAt;\n        for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {\n            if (this.postProcessors[indexToInsertAt].priority >= priority) {\n                break;\n            }\n        }\n        this.postProcessors.splice(indexToInsertAt, 0, {postProcessor, priority});\n    }\n\n    /**\n     *\n     * @param manager\n     */\n    addFileManager(manager) {\n        this.fileManagers.push(manager);\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getPreProcessors() {\n        const preProcessors = [];\n        for (let i = 0; i < this.preProcessors.length; i++) {\n            preProcessors.push(this.preProcessors[i].preProcessor);\n        }\n        return preProcessors;\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getPostProcessors() {\n        const postProcessors = [];\n        for (let i = 0; i < this.postProcessors.length; i++) {\n            postProcessors.push(this.postProcessors[i].postProcessor);\n        }\n        return postProcessors;\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getVisitors() {\n        return this.visitors;\n    }\n\n    visitor() {\n        const self = this;\n        return {\n            first: function() {\n                self.iterator = -1;\n                return self.visitors[self.iterator];\n            },\n            get: function() {\n                self.iterator += 1;\n                return self.visitors[self.iterator];\n            }\n        };\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getFileManagers() {\n        return this.fileManagers;\n    }\n}\n\nlet pm;\n\nconst PluginManagerFactory = function(less, newFactory) {\n    if (newFactory || !pm) {\n        pm = new PluginManager(less);\n    }\n    return pm;\n};\n\n//\nexport default PluginManagerFactory;\n","'use strict';\n\nfunction parseNodeVersion(version) {\n  var match = version.match(/^v(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})(?:-([0-9A-Za-z-.]+))?(?:\\+([0-9A-Za-z-.]+))?$/); // eslint-disable-line max-len\n  if (!match) {\n    throw new Error('Unable to parse: ' + version);\n  }\n\n  var res = {\n    major: parseInt(match[1], 10),\n    minor: parseInt(match[2], 10),\n    patch: parseInt(match[3], 10),\n    pre: match[4] || '',\n    build: match[5] || '',\n  };\n\n  return res;\n}\n\nmodule.exports = parseNodeVersion;\n","import AbstractFileManager from '../less/environment/abstract-file-manager.js';\n\nlet options;\nlet logger;\nlet fileCache = {};\n\n// TODOS - move log somewhere. pathDiff and doing something similar in node. use pathDiff in the other browser file for the initial load\nconst FileManager = function() {}\nFileManager.prototype = Object.assign(new AbstractFileManager(), {\n    alwaysMakePathsAbsolute() {\n        return true;\n    },\n\n    join(basePath, laterPath) {\n        if (!basePath) {\n            return laterPath;\n        }\n        return this.extractUrlParts(laterPath, basePath).path;\n    },\n\n    doXHR(url, type, callback, errback) {\n        const xhr = new XMLHttpRequest();\n        const async = options.isFileProtocol ? options.fileAsync : true;\n\n        if (typeof xhr.overrideMimeType === 'function') {\n            xhr.overrideMimeType('text/css');\n        }\n        logger.debug(`XHR: Getting '${url}'`);\n        xhr.open('GET', url, async);\n        xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\n        xhr.send(null);\n\n        function handleResponse(xhr, callback, errback) {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                callback(xhr.responseText,\n                    xhr.getResponseHeader('Last-Modified'));\n            } else if (typeof errback === 'function') {\n                errback(xhr.status, url);\n            }\n        }\n\n        if (options.isFileProtocol && !options.fileAsync) {\n            if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 300)) {\n                callback(xhr.responseText);\n            } else {\n                errback(xhr.status, url);\n            }\n        } else if (async) {\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState == 4) {\n                    handleResponse(xhr, callback, errback);\n                }\n            };\n        } else {\n            handleResponse(xhr, callback, errback);\n        }\n    },\n\n    supports() {\n        return true;\n    },\n\n    clearFileCache() {\n        fileCache = {};\n    },\n\n    loadFile(filename, currentDirectory, options) {\n        // TODO: Add prefix support like less-node?\n        // What about multiple paths?\n\n        if (currentDirectory && !this.isPathAbsolute(filename)) {\n            filename = currentDirectory + filename;\n        }\n\n        filename = options.ext ? this.tryAppendExtension(filename, options.ext) : filename;\n\n        options = options || {};\n\n        // sheet may be set to the stylesheet for the initial load or a collection of properties including\n        // some context variables for imports\n        const hrefParts = this.extractUrlParts(filename, window.location.href);\n        const href      = hrefParts.url;\n        const self      = this;\n        \n        return new Promise((resolve, reject) => {\n            if (options.useFileCache && fileCache[href]) {\n                try {\n                    const lessText = fileCache[href];\n                    return resolve({ contents: lessText, filename: href, webInfo: { lastModified: new Date() }});\n                } catch (e) {\n                    return reject({ filename: href, message: `Error loading file ${href} error was ${e.message}` });\n                }\n            }\n\n            self.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\n                // per file cache\n                fileCache[href] = data;\n\n                // Use remote copy (re-parse)\n                resolve({ contents: data, filename: href, webInfo: { lastModified }});\n            }, function doXHRError(status, url) {\n                reject({ type: 'File', message: `'${url}' wasn't found (${status})`, href });\n            });\n        });\n    }\n});\n\nexport default (opts, log) => {\n    options = opts;\n    logger = log;\n    return FileManager;\n}\n","import Environment from './environment/environment';\nimport data from './data';\nimport tree from './tree';\nimport AbstractFileManager from './environment/abstract-file-manager';\nimport AbstractPluginLoader from './environment/abstract-plugin-loader';\nimport visitors from './visitors';\nimport Parser from './parser/parser';\nimport functions from './functions';\nimport contexts from './contexts';\nimport LessError from './less-error';\nimport transformTree from './transform-tree';\nimport * as utils from './utils';\nimport PluginManager from './plugin-manager';\nimport logger from './logger';\nimport SourceMapOutput from './source-map-output';\nimport SourceMapBuilder from './source-map-builder';\nimport ParseTree from './parse-tree';\nimport ImportManager from './import-manager';\nimport Parse from './parse';\nimport Render from './render';\nimport { version } from '../../package.json';\nimport parseVersion from 'parse-node-version';\n\nexport default function(environment, fileManagers) {\n    let sourceMapOutput, sourceMapBuilder, parseTree, importManager;\n\n    environment = new Environment(environment, fileManagers);\n    sourceMapOutput = SourceMapOutput(environment);\n    sourceMapBuilder = SourceMapBuilder(sourceMapOutput, environment);\n    parseTree = ParseTree(sourceMapBuilder);\n    importManager = ImportManager(environment);\n\n    const render = Render(environment, parseTree, importManager);\n    const parse = Parse(environment, parseTree, importManager);\n\n    const v = parseVersion(`v${version}`);\n    const initial = {\n        version: [v.major, v.minor, v.patch],\n        data,\n        tree,\n        Environment,\n        AbstractFileManager,\n        AbstractPluginLoader,\n        environment,\n        visitors,\n        Parser,\n        functions: functions(environment),\n        contexts,\n        SourceMapOutput: sourceMapOutput,\n        SourceMapBuilder: sourceMapBuilder,\n        ParseTree: parseTree,\n        ImportManager: importManager,\n        render,\n        parse,\n        LessError,\n        transformTree,\n        utils,\n        PluginManager,\n        logger\n    };\n\n    // Create a public API\n\n    const ctor = function(t) {\n        return function() {\n            const obj = Object.create(t.prototype);\n            t.apply(obj, Array.prototype.slice.call(arguments, 0));\n            return obj;\n        };\n    };\n    let t;\n    const api = Object.create(initial);\n    for (const n in initial.tree) {\n        /* eslint guard-for-in: 0 */\n        t = initial.tree[n];\n        if (typeof t === 'function') {\n            api[n.toLowerCase()] = ctor(t);\n        }\n        else {\n            api[n] = Object.create(null);\n            for (const o in t) {\n                /* eslint guard-for-in: 0 */\n                api[n][o.toLowerCase()] = ctor(t[o]);\n            }\n        }\n    }\n\n    /**\n     * Some of the functions assume a `this` context of the API object,\n     * which causes it to fail when wrapped for ES6 imports.\n     * \n     * An assumed `this` should be removed in the future.\n     */\n    initial.parse = initial.parse.bind(api);\n    initial.render = initial.render.bind(api);\n\n    return api;\n}\n","import LessError from './less-error';\nimport transformTree from './transform-tree';\nimport logger from './logger';\n\nexport default function(SourceMapBuilder) {\n    class ParseTree {\n        constructor(root, imports) {\n            this.root = root;\n            this.imports = imports;\n        }\n\n        toCSS(options) {\n            let evaldRoot;\n            const result = {};\n            let sourceMapBuilder;\n            try {\n                evaldRoot = transformTree(this.root, options);\n            } catch (e) {\n                throw new LessError(e, this.imports);\n            }\n\n            try {\n                const compress = Boolean(options.compress);\n                if (compress) {\n                    logger.warn('The compress option has been deprecated. ' + \n                        'We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');\n                }\n\n                const toCSSOptions = {\n                    compress,\n                    dumpLineNumbers: options.dumpLineNumbers,\n                    strictUnits: Boolean(options.strictUnits),\n                    numPrecision: 8};\n\n                if (options.sourceMap) {\n                    sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\n                    result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\n                } else {\n                    result.css = evaldRoot.toCSS(toCSSOptions);\n                }\n            } catch (e) {\n                throw new LessError(e, this.imports);\n            }\n\n            if (options.pluginManager) {\n                const postProcessors = options.pluginManager.getPostProcessors();\n                for (let i = 0; i < postProcessors.length; i++) {\n                    result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options, imports: this.imports });\n                }\n            }\n            if (options.sourceMap) {\n                result.map = sourceMapBuilder.getExternalSourceMap();\n            }\n\n            result.imports = [];\n            for (const file in this.imports.files) {\n                if (Object.prototype.hasOwnProperty.call(this.imports.files, file) && file !== this.imports.rootFilename) {\n                    result.imports.push(file);\n                }\n            }\n            return result;\n        }\n    }\n\n    return ParseTree;\n}\n","export default function (SourceMapOutput, environment) {\n    class SourceMapBuilder {\n        constructor(options) {\n            this.options = options;\n        }\n\n        toCSS(rootNode, options, imports) {\n            const sourceMapOutput = new SourceMapOutput(\n                {\n                    contentsIgnoredCharsMap: imports.contentsIgnoredChars,\n                    rootNode,\n                    contentsMap: imports.contents,\n                    sourceMapFilename: this.options.sourceMapFilename,\n                    sourceMapURL: this.options.sourceMapURL,\n                    outputFilename: this.options.sourceMapOutputFilename,\n                    sourceMapBasepath: this.options.sourceMapBasepath,\n                    sourceMapRootpath: this.options.sourceMapRootpath,\n                    outputSourceFiles: this.options.outputSourceFiles,\n                    sourceMapGenerator: this.options.sourceMapGenerator,\n                    sourceMapFileInline: this.options.sourceMapFileInline,    \n                    disableSourcemapAnnotation: this.options.disableSourcemapAnnotation\n                });\n\n            const css = sourceMapOutput.toCSS(options);\n            this.sourceMap = sourceMapOutput.sourceMap;\n            this.sourceMapURL = sourceMapOutput.sourceMapURL;\n            if (this.options.sourceMapInputFilename) {\n                this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);\n            }\n            if (this.options.sourceMapBasepath !== undefined && this.sourceMapURL !== undefined) {\n                this.sourceMapURL = sourceMapOutput.removeBasepath(this.sourceMapURL);\n            }\n            return css + this.getCSSAppendage();\n        }\n\n        getCSSAppendage() {\n\n            let sourceMapURL = this.sourceMapURL;\n            if (this.options.sourceMapFileInline) {\n                if (this.sourceMap === undefined) {\n                    return '';\n                }\n                sourceMapURL = `data:application/json;base64,${environment.encodeBase64(this.sourceMap)}`;\n            }\n\n            if (this.options.disableSourcemapAnnotation) {\n                return '';\n            }\n\n            if (sourceMapURL) {\n                return `/*# sourceMappingURL=${sourceMapURL} */`;\n            }\n            return '';\n        }\n\n        getExternalSourceMap() {\n            return this.sourceMap;\n        }\n\n        setExternalSourceMap(sourceMap) {\n            this.sourceMap = sourceMap;\n        }\n\n        isInline() {\n            return this.options.sourceMapFileInline;\n        }\n\n        getSourceMapURL() {\n            return this.sourceMapURL;\n        }\n\n        getOutputFilename() {\n            return this.options.sourceMapOutputFilename;\n        }\n\n        getInputFilename() {\n            return this.sourceMapInputFilename;\n        }\n    }\n\n    return SourceMapBuilder;\n}\n","export default function (environment) {\n    class SourceMapOutput {\n        constructor(options) {\n            this._css = [];\n            this._rootNode = options.rootNode;\n            this._contentsMap = options.contentsMap;\n            this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\n            if (options.sourceMapFilename) {\n                this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\n            }\n            this._outputFilename = options.outputFilename;\n            this.sourceMapURL = options.sourceMapURL;\n            if (options.sourceMapBasepath) {\n                this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\n            }\n            if (options.sourceMapRootpath) {\n                this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\n                if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\n                    this._sourceMapRootpath += '/';\n                }\n            } else {\n                this._sourceMapRootpath = '';\n            }\n            this._outputSourceFiles = options.outputSourceFiles;\n            this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\n\n            this._lineNumber = 0;\n            this._column = 0;\n        }\n\n        removeBasepath(path) {\n            if (this._sourceMapBasepath && path.indexOf(this._sourceMapBasepath) === 0) {\n                path = path.substring(this._sourceMapBasepath.length);\n                if (path.charAt(0) === '\\\\' || path.charAt(0) === '/') {\n                    path = path.substring(1);\n                }\n            }\n\n            return path;\n        }\n\n        normalizeFilename(filename) {\n            filename = filename.replace(/\\\\/g, '/');\n            filename = this.removeBasepath(filename);\n            return (this._sourceMapRootpath || '') + filename;\n        }\n\n        add(chunk, fileInfo, index, mapLines) {\n\n            // ignore adding empty strings\n            if (!chunk) {\n                return;\n            }\n\n            let lines, sourceLines, columns, sourceColumns, i;\n\n            if (fileInfo && fileInfo.filename) {\n                let inputSource = this._contentsMap[fileInfo.filename];\n\n                // remove vars/banner added to the top of the file\n                if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n                    // adjust the index\n                    index -= this._contentsIgnoredCharsMap[fileInfo.filename];\n                    if (index < 0) { index = 0; }\n                    // adjust the source\n                    inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\n                }\n\n                /** \n                 * ignore empty content, or failsafe\n                 * if contents map is incorrect\n                 */\n                if (inputSource === undefined) {\n                    this._css.push(chunk);\n                    return;\n                }\n\n                inputSource = inputSource.substring(0, index);\n                sourceLines = inputSource.split('\\n');\n                sourceColumns = sourceLines[sourceLines.length - 1];\n            }\n\n            lines = chunk.split('\\n');\n            columns = lines[lines.length - 1];\n\n            if (fileInfo && fileInfo.filename) {\n                if (!mapLines) {\n                    this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + 1, column: this._column},\n                        original: { line: sourceLines.length, column: sourceColumns.length},\n                        source: this.normalizeFilename(fileInfo.filename)});\n                } else {\n                    for (i = 0; i < lines.length; i++) {\n                        this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + i + 1, column: i === 0 ? this._column : 0},\n                            original: { line: sourceLines.length + i, column: i === 0 ? sourceColumns.length : 0},\n                            source: this.normalizeFilename(fileInfo.filename)});\n                    }\n                }\n            }\n\n            if (lines.length === 1) {\n                this._column += columns.length;\n            } else {\n                this._lineNumber += lines.length - 1;\n                this._column = columns.length;\n            }\n\n            this._css.push(chunk);\n        }\n\n        isEmpty() {\n            return this._css.length === 0;\n        }\n\n        toCSS(context) {\n            this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({ file: this._outputFilename, sourceRoot: null });\n\n            if (this._outputSourceFiles) {\n                for (const filename in this._contentsMap) {\n                    // eslint-disable-next-line no-prototype-builtins\n                    if (this._contentsMap.hasOwnProperty(filename)) {\n                        let source = this._contentsMap[filename];\n                        if (this._contentsIgnoredCharsMap[filename]) {\n                            source = source.slice(this._contentsIgnoredCharsMap[filename]);\n                        }\n                        this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\n                    }\n                }\n            }\n\n            this._rootNode.genCSS(context, this);\n\n            if (this._css.length > 0) {\n                let sourceMapURL;\n                const sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\n\n                if (this.sourceMapURL) {\n                    sourceMapURL = this.sourceMapURL;\n                } else if (this._sourceMapFilename) {\n                    sourceMapURL = this._sourceMapFilename;\n                }\n                this.sourceMapURL = sourceMapURL;\n\n                this.sourceMap = sourceMapContent;\n            }\n\n            return this._css.join('');\n        }\n    }\n\n    return SourceMapOutput;\n}\n","import contexts from './contexts';\nimport Parser from './parser/parser';\nimport LessError from './less-error';\nimport * as utils from './utils';\nimport logger from './logger';\n\nexport default function(environment) {\n    // FileInfo = {\n    //  'rewriteUrls' - option - whether to adjust URL's to be relative\n    //  'filename' - full resolved filename of current file\n    //  'rootpath' - path to append to normal URLs for this node\n    //  'currentDirectory' - path to the current file, absolute\n    //  'rootFilename' - filename of the base file\n    //  'entryPath' - absolute path to the entry file\n    //  'reference' - whether the file should not be output and only output parts that are referenced\n\n    class ImportManager {\n        constructor(less, context, rootFileInfo) {\n            this.less = less;\n            this.rootFilename = rootFileInfo.filename;\n            this.paths = context.paths || [];  // Search paths, when importing\n            this.contents = {};             // map - filename to contents of all the files\n            this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\n            this.mime = context.mime;\n            this.error = null;\n            this.context = context;\n            // Deprecated? Unused outside of here, could be useful.\n            this.queue = [];        // Files which haven't been imported yet\n            this.files = {};        // Holds the imported parse trees.\n        }\n\n        /**\n         * Add an import to be imported\n         * @param path - the raw path\n         * @param tryAppendExtension - whether to try appending a file extension (.less or .js if the path has no extension)\n         * @param currentFileInfo - the current file info (used for instance to work out relative paths)\n         * @param importOptions - import options\n         * @param callback - callback for when it is imported\n         */\n        push(path, tryAppendExtension, currentFileInfo, importOptions, callback) {\n            const importManager = this, pluginLoader = this.context.pluginManager.Loader;\n\n            this.queue.push(path);\n\n            const fileParsedFunc = function (e, root, fullPath) {\n                importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\n\n                const importedEqualsRoot = fullPath === importManager.rootFilename;\n                if (importOptions.optional && e) {\n                    callback(null, {rules:[]}, false, null);\n                    logger.info(`The file ${fullPath} was skipped because it was not found and the import was marked optional.`);\n                }\n                else {\n                    // Inline imports aren't cached here.\n                    // If we start to cache them, please make sure they won't conflict with non-inline imports of the\n                    // same name as they used to do before this comment and the condition below have been added.\n                    if (!importManager.files[fullPath] && !importOptions.inline) {\n                        importManager.files[fullPath] = { root, options: importOptions };\n                    }\n                    if (e && !importManager.error) { importManager.error = e; }\n                    callback(e, root, importedEqualsRoot, fullPath);\n                }\n            };\n\n            const newFileInfo = {\n                rewriteUrls: this.context.rewriteUrls,\n                entryPath: currentFileInfo.entryPath,\n                rootpath: currentFileInfo.rootpath,\n                rootFilename: currentFileInfo.rootFilename\n            };\n\n            const fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\n\n            if (!fileManager) {\n                fileParsedFunc({ message: `Could not find a file-manager for ${path}` });\n                return;\n            }\n\n            const loadFileCallback = function(loadedFile) {\n                let plugin;\n                const resolvedFilename = loadedFile.filename;\n                const contents = loadedFile.contents.replace(/^\\uFEFF/, '');\n\n                // Pass on an updated rootpath if path of imported file is relative and file\n                // is in a (sub|sup) directory\n                //\n                // Examples:\n                // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\n                //   then rootpath should become 'less/module/nav/'\n                // - If path of imported file is '../mixins.less' and rootpath is 'less/',\n                //   then rootpath should become 'less/../'\n                newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\n                if (newFileInfo.rewriteUrls) {\n                    newFileInfo.rootpath = fileManager.join(\n                        (importManager.context.rootpath || ''),\n                        fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\n\n                    if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\n                        newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\n                    }\n                }\n                newFileInfo.filename = resolvedFilename;\n\n                const newEnv = new contexts.Parse(importManager.context);\n\n                newEnv.processImports = false;\n                importManager.contents[resolvedFilename] = contents;\n\n                if (currentFileInfo.reference || importOptions.reference) {\n                    newFileInfo.reference = true;\n                }\n\n                if (importOptions.isPlugin) {\n                    plugin = pluginLoader.evalPlugin(contents, newEnv, importManager, importOptions.pluginArgs, newFileInfo);\n                    if (plugin instanceof LessError) {\n                        fileParsedFunc(plugin, null, resolvedFilename);\n                    }\n                    else {\n                        fileParsedFunc(null, plugin, resolvedFilename);\n                    }\n                } else if (importOptions.inline) {\n                    fileParsedFunc(null, contents, resolvedFilename);\n                } else {\n                    // import (multiple) parse trees apparently get altered and can't be cached.\n                    // TODO: investigate why this is\n                    if (importManager.files[resolvedFilename]\n                        && !importManager.files[resolvedFilename].options.multiple\n                        && !importOptions.multiple) {\n\n                        fileParsedFunc(null, importManager.files[resolvedFilename].root, resolvedFilename);\n                    }\n                    else {\n                        new Parser(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {\n                            fileParsedFunc(e, root, resolvedFilename);\n                        });\n                    }\n                }\n            };\n            let loadedFile;\n            let promise;\n            const context = utils.clone(this.context);\n\n            if (tryAppendExtension) {\n                context.ext = importOptions.isPlugin ? '.js' : '.less';\n            }\n\n            if (importOptions.isPlugin) {\n                context.mime = 'application/javascript';\n\n                if (context.syncImport) {\n                    loadedFile = pluginLoader.loadPluginSync(path, currentFileInfo.currentDirectory, context, environment, fileManager);\n                } else {\n                    promise = pluginLoader.loadPlugin(path, currentFileInfo.currentDirectory, context, environment, fileManager);\n                }\n            }\n            else {\n                if (context.syncImport) {\n                    loadedFile = fileManager.loadFileSync(path, currentFileInfo.currentDirectory, context, environment);\n                } else {\n                    promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, context, environment,\n                        (err, loadedFile) => {\n                            if (err) {\n                                fileParsedFunc(err);\n                            } else {\n                                loadFileCallback(loadedFile);\n                            }\n                        });\n                }\n            }\n            if (loadedFile) {\n                if (!loadedFile.filename) {\n                    fileParsedFunc(loadedFile);\n                } else {\n                    loadFileCallback(loadedFile);\n                }\n            } else if (promise) {\n                promise.then(loadFileCallback, fileParsedFunc);\n            }\n        }\n    }\n\n    return ImportManager;\n}\n","import * as utils from './utils';\n\nexport default function(environment, ParseTree) {\n    const render = function (input, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = utils.copyOptions(this.options, {});\n        }\n        else {\n            options = utils.copyOptions(this.options, options || {});\n        }\n\n        if (!callback) {\n            const self = this;\n            return new Promise(function (resolve, reject) {\n                render.call(self, input, options, function(err, output) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            this.parse(input, options, function(err, root, imports, options) {\n                if (err) { return callback(err); }\n\n                let result;\n                try {\n                    const parseTree = new ParseTree(root, imports);\n                    result = parseTree.toCSS(options);\n                }\n                catch (err) { return callback(err); }\n\n                callback(null, result);\n            });\n        }\n    };\n\n    return render;\n}\n","import contexts from './contexts';\nimport Parser from './parser/parser';\nimport PluginManager from './plugin-manager';\nimport LessError from './less-error';\nimport * as utils from './utils';\n\nexport default function(environment, ParseTree, ImportManager) {\n    const parse = function (input, options, callback) {\n\n        if (typeof options === 'function') {\n            callback = options;\n            options = utils.copyOptions(this.options, {});\n        }\n        else {\n            options = utils.copyOptions(this.options, options || {});\n        }\n\n        if (!callback) {\n            const self = this;\n            return new Promise(function (resolve, reject) {\n                parse.call(self, input, options, function(err, output) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            let context;\n            let rootFileInfo;\n            const pluginManager = new PluginManager(this, !options.reUsePluginManager);\n\n            options.pluginManager = pluginManager;\n\n            context = new contexts.Parse(options);\n\n            if (options.rootFileInfo) {\n                rootFileInfo = options.rootFileInfo;\n            } else {\n                const filename = options.filename || 'input';\n                const entryPath = filename.replace(/[^/\\\\]*$/, '');\n                rootFileInfo = {\n                    filename,\n                    rewriteUrls: context.rewriteUrls,\n                    rootpath: context.rootpath || '',\n                    currentDirectory: entryPath,\n                    entryPath,\n                    rootFilename: filename\n                };\n                // add in a missing trailing slash\n                if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\n                    rootFileInfo.rootpath += '/';\n                }\n            }\n\n            const imports = new ImportManager(this, context, rootFileInfo);\n            this.importManager = imports;\n\n            // TODO: allow the plugins to be just a list of paths or names\n            // Do an async plugin queue like lessc\n\n            if (options.plugins) {\n                options.plugins.forEach(function(plugin) {\n                    let evalResult, contents;\n                    if (plugin.fileContent) {\n                        contents = plugin.fileContent.replace(/^\\uFEFF/, '');\n                        evalResult = pluginManager.Loader.evalPlugin(contents, context, imports, plugin.options, plugin.filename);\n                        if (evalResult instanceof LessError) {\n                            return callback(evalResult);\n                        }\n                    }\n                    else {\n                        pluginManager.addPlugin(plugin);\n                    }\n                });\n            }\n\n            new Parser(context, imports, rootFileInfo)\n                .parse(input, function (e, root) {\n                    if (e) { return callback(e); }\n                    callback(null, root, imports, options);\n                }, options);\n        }\n    };\n    return parse;\n}\n","/**\n * @todo Add tests for browser `@plugin`\n */\nimport AbstractPluginLoader from '../less/environment/abstract-plugin-loader.js';\n\n/**\n * Browser Plugin Loader\n */\nconst PluginLoader = function(less) {\n    this.less = less;\n    // Should we shim this.require for browser? Probably not?\n};\n\nPluginLoader.prototype = Object.assign(new AbstractPluginLoader(), {\n    loadPlugin(filename, basePath, context, environment, fileManager) {\n        return new Promise((fulfill, reject) => {\n            fileManager.loadFile(filename, basePath, context, environment)\n                .then(fulfill).catch(reject);\n        });\n    }\n});\n\nexport default PluginLoader;\n\n","export default (less, options) => {\n    const logLevel_debug = 4;\n    const logLevel_info = 3;\n    const logLevel_warn = 2;\n    const logLevel_error = 1;\n\n    // The amount of logging in the javascript console.\n    // 3 - Debug, information and errors\n    // 2 - Information and errors\n    // 1 - Errors\n    // 0 - None\n    // Defaults to 2\n    options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : (options.env === 'development' ?  logLevel_info : logLevel_error);\n\n    if (!options.loggers) {\n        options.loggers = [{\n            debug: function(msg) {\n                if (options.logLevel >= logLevel_debug) {\n                    console.log(msg);\n                }\n            },\n            info: function(msg) {\n                if (options.logLevel >= logLevel_info) {\n                    console.log(msg);\n                }\n            },\n            warn: function(msg) {\n                if (options.logLevel >= logLevel_warn) {\n                    console.warn(msg);\n                }\n            },\n            error: function(msg) {\n                if (options.logLevel >= logLevel_error) {\n                    console.error(msg);\n                }\n            }\n        }];\n    }\n    for (let i = 0; i < options.loggers.length; i++) {\n        less.logger.addListener(options.loggers[i]);\n    }\n};\n","import * as utils from './utils';\nimport browser from './browser';\n\nexport default (window, less, options) => {\n\n    function errorHTML(e, rootHref) {\n        const id = `less-error-message:${utils.extractId(rootHref || '')}`;\n        const template = '<li><label>{line}</label><pre class=\"{class}\">{content}</pre></li>';\n        const elem = window.document.createElement('div');\n        let timer;\n        let content;\n        const errors = [];\n        const filename = e.filename || rootHref;\n        const filenameNoPath = filename.match(/([^/]+(\\?.*)?)$/)[1];\n\n        elem.id        = id;\n        elem.className = 'less-error-message';\n\n        content = `<h3>${e.type || 'Syntax'}Error: ${e.message || 'There is an error in your .less file'}` + \n            `</h3><p>in <a href=\"${filename}\">${filenameNoPath}</a> `;\n\n        const errorline = (e, i, classname) => {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.line) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += `on line ${e.line}, column ${e.column + 1}:</p><ul>${errors.join('')}</ul>`;\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += `<br/>Stack Trace</br />${e.stack.split('\\n').slice(1).join('<br/>')}`;\n        }\n        elem.innerHTML = content;\n\n        // CSS for error messages\n        browser.createCSS(window.document, [\n            '.less-error-message ul, .less-error-message li {',\n            'list-style-type: none;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message label {',\n            'font-size: 12px;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'color: #cc7777;',\n            '}',\n            '.less-error-message pre {',\n            'color: #dd6666;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            'display: inline-block;',\n            '}',\n            '.less-error-message pre.line {',\n            'color: #ff0000;',\n            '}',\n            '.less-error-message h3 {',\n            'font-size: 20px;',\n            'font-weight: bold;',\n            'padding: 15px 0 5px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message a {',\n            'color: #10a',\n            '}',\n            '.less-error-message .error {',\n            'color: red;',\n            'font-weight: bold;',\n            'padding-bottom: 2px;',\n            'border-bottom: 1px dashed red;',\n            '}'\n        ].join('\\n'), { title: 'error-message' });\n\n        elem.style.cssText = [\n            'font-family: Arial, sans-serif',\n            'border: 1px solid #e00',\n            'background-color: #eee',\n            'border-radius: 5px',\n            '-webkit-border-radius: 5px',\n            '-moz-border-radius: 5px',\n            'color: #e00',\n            'padding: 15px',\n            'margin-bottom: 15px'\n        ].join(';');\n\n        if (options.env === 'development') {\n            timer = setInterval(() => {\n                const document = window.document;\n                const body = document.body;\n                if (body) {\n                    if (document.getElementById(id)) {\n                        body.replaceChild(elem, document.getElementById(id));\n                    } else {\n                        body.insertBefore(elem, body.firstChild);\n                    }\n                    clearInterval(timer);\n                }\n            }, 10);\n        }\n    }\n\n    function removeErrorHTML(path) {\n        const node = window.document.getElementById(`less-error-message:${utils.extractId(path)}`);\n        if (node) {\n            node.parentNode.removeChild(node);\n        }\n    }\n\n    function removeErrorConsole() {\n        // no action\n    }\n\n    function removeError(path) {\n        if (!options.errorReporting || options.errorReporting === 'html') {\n            removeErrorHTML(path);\n        } else if (options.errorReporting === 'console') {\n            removeErrorConsole(path);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting('remove', path);\n        }\n    }\n\n    function errorConsole(e, rootHref) {\n        const template = '{line} {content}';\n        const filename = e.filename || rootHref;\n        const errors = [];\n        let content = `${e.type || 'Syntax'}Error: ${e.message || 'There is an error in your .less file'} in ${filename}`;\n\n        const errorline = (e, i, classname) => {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.line) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += ` on line ${e.line}, column ${e.column + 1}:\\n${errors.join('\\n')}`;\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += `\\nStack Trace\\n${e.stack}`;\n        }\n        less.logger.error(content);\n    }\n\n    function error(e, rootHref) {\n        if (!options.errorReporting || options.errorReporting === 'html') {\n            errorHTML(e, rootHref);\n        } else if (options.errorReporting === 'console') {\n            errorConsole(e, rootHref);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting('add', e, rootHref);\n        }\n    }\n\n    return {\n        add: error,\n        remove: removeError\n    };\n};\n","/**\n * Kicks off less and compiles any stylesheets\n * used in the browser distributed version of less\n * to kick-start less using the browser api\n */\nimport defaultOptions from '../less/default-options';\nimport addDefaultOptions from './add-default-options';\nimport root from './index';\n\nconst options = defaultOptions();\n\nif (window.less) {\n    for (const key in window.less) {\n        if (Object.prototype.hasOwnProperty.call(window.less, key)) {\n            options[key] = window.less[key];\n        }\n    }\n}\naddDefaultOptions(window, options);\n\noptions.plugins = options.plugins || [];\n\nif (window.LESS_PLUGINS) {\n    options.plugins = options.plugins.concat(window.LESS_PLUGINS);\n}\n\nconst less = root(window, options);\nexport default less;\n\nwindow.less = less;\n\nlet css;\nlet head;\nlet style;\n\n// Always restore page visibility\nfunction resolveOrReject(data) {\n    if (data.filename) {\n        console.warn(data);\n    }\n    if (!options.async) {\n        head.removeChild(style);\n    }\n}\n\nif (options.onReady) {\n    if (/!watch/.test(window.location.hash)) {\n        less.watch();\n    }\n    // Simulate synchronous stylesheet loading by hiding page rendering\n    if (!options.async) {\n        css = 'body { display: none !important }';\n        head = document.head || document.getElementsByTagName('head')[0];\n        style = document.createElement('style');\n\n        style.type = 'text/css';\n        if (style.styleSheet) {\n            style.styleSheet.cssText = css;\n        } else {\n            style.appendChild(document.createTextNode(css));\n        }\n\n        head.appendChild(style);\n    }\n    less.registerStylesheetsImmediately();\n    less.pageLoadFinished = less.refresh(less.env === 'development').then(resolveOrReject, resolveOrReject);\n}\n","// Export a new default each time\nexport default function() {\n    return {\n        /* Inline Javascript - @plugin still allowed */\n        javascriptEnabled: false,\n\n        /* Outputs a makefile import dependency list to stdout. */\n        depends: false,\n\n        /* (DEPRECATED) Compress using less built-in compression. \n         * This does an okay job but does not utilise all the tricks of \n         * dedicated css compression. */\n        compress: false,\n\n        /* Runs the less parser and just reports errors without any output. */\n        lint: false,\n\n        /* Sets available include paths.\n         * If the file in an @import rule does not exist at that exact location, \n         * less will look for it at the location(s) passed to this option. \n         * You might use this for instance to specify a path to a library which \n         * you want to be referenced simply and relatively in the less files. */\n        paths: [],\n\n        /* color output in the terminal */\n        color: true,\n\n        /* The strictImports controls whether the compiler will allow an @import inside of either \n         * @media blocks or (a later addition) other selector blocks.\n         * See: https://github.com/less/less.js/issues/656 */\n        strictImports: false,\n\n        /* Allow Imports from Insecure HTTPS Hosts */\n        insecure: false,\n\n        /* Allows you to add a path to every generated import and url in your css. \n         * This does not affect less import statements that are processed, just ones \n         * that are left in the output css. */\n        rootpath: '',\n\n        /* By default URLs are kept as-is, so if you import a file in a sub-directory \n         * that references an image, exactly the same URL will be output in the css. \n         * This option allows you to re-write URL's in imported files so that the \n         * URL is always relative to the base imported file */\n        rewriteUrls: false,\n\n        /* How to process math \n         *   0 always           - eagerly try to solve all operations\n         *   1 parens-division  - require parens for division \"/\"\n         *   2 parens | strict  - require parens for all operations\n         *   3 strict-legacy    - legacy strict behavior (super-strict)\n         */\n        math: 1,\n\n        /* Without this option, less attempts to guess at the output unit when it does maths. */\n        strictUnits: false,\n\n        /* Effectively the declaration is put at the top of your base Less file, \n         * meaning it can be used but it also can be overridden if this variable \n         * is defined in the file. */\n        globalVars: null,\n\n        /* As opposed to the global variable option, this puts the declaration at the\n         * end of your base file, meaning it will override anything defined in your Less file. */\n        modifyVars: null,\n\n        /* This option allows you to specify a argument to go on to every URL.  */\n        urlArgs: ''\n    }\n}","import {addDataAttr} from './utils';\nimport browser from './browser';\n\nexport default (window, options) => {\n\n    // use options from the current script tag data attribues\n    addDataAttr(options, browser.currentScript(window));\n\n    if (options.isFileProtocol === undefined) {\n        options.isFileProtocol = /^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(window.location.protocol);\n    }\n\n    // Load styles asynchronously (default: false)\n    //\n    // This is set to `false` by default, so that the body\n    // doesn't start loading before the stylesheets are parsed.\n    // Setting this to `true` can result in flickering.\n    //\n    options.async = options.async || false;\n    options.fileAsync = options.fileAsync || false;\n\n    // Interval between watch polls\n    options.poll = options.poll || (options.isFileProtocol ? 1000 : 1500);\n\n    options.env = options.env || (window.location.hostname == '127.0.0.1' ||\n        window.location.hostname == '0.0.0.0'   ||\n        window.location.hostname == 'localhost' ||\n        (window.location.port &&\n            window.location.port.length > 0)      ||\n        options.isFileProtocol                   ? 'development'\n        : 'production');\n\n    const dumpLineNumbers = /!dumpLineNumbers:(comments|mediaquery|all)/.exec(window.location.hash);\n    if (dumpLineNumbers) {\n        options.dumpLineNumbers = dumpLineNumbers[1];\n    }\n\n    if (options.useFileCache === undefined) {\n        options.useFileCache = true;\n    }\n\n    if (options.onReady === undefined) {\n        options.onReady = true;\n    }\n\n    if (options.relativeUrls) {\n        options.rewriteUrls = 'all';\n    }\n};\n","//\n// index.js\n// Should expose the additional browser functions on to the less object\n//\nimport {addDataAttr} from './utils';\nimport lessRoot from '../less';\nimport browser from './browser';\nimport FM from './file-manager';\nimport PluginLoader from './plugin-loader';\nimport LogListener from './log-listener';\nimport ErrorReporting from './error-reporting';\nimport Cache from './cache';\nimport ImageSize from './image-size';\n\nexport default (window, options) => {\n    const document = window.document;\n    const less = lessRoot();\n\n    less.options = options;\n    const environment = less.environment;\n    const FileManager = FM(options, less.logger);\n    const fileManager = new FileManager();\n    environment.addFileManager(fileManager);\n    less.FileManager = FileManager;\n    less.PluginLoader = PluginLoader;\n\n    LogListener(less, options);\n    const errors = ErrorReporting(window, less, options);\n    const cache = less.cache = options.cache || Cache(window, options, less.logger);\n    ImageSize(less.environment);\n\n    // Setup user functions - Deprecate?\n    if (options.functions) {\n        less.functions.functionRegistry.addMultiple(options.functions);\n    }\n\n    const typePattern = /^text\\/(x-)?less$/;\n\n    function clone(obj) {\n        const cloned = {};\n        for (const prop in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n                cloned[prop] = obj[prop];\n            }\n        }\n        return cloned;\n    }\n\n    // only really needed for phantom\n    function bind(func, thisArg) {\n        const curryArgs = Array.prototype.slice.call(arguments, 2);\n        return function() {\n            const args = curryArgs.concat(Array.prototype.slice.call(arguments, 0));\n            return func.apply(thisArg, args);\n        };\n    }\n\n    function loadStyles(modifyVars) {\n        const styles = document.getElementsByTagName('style');\n        let style;\n\n        for (let i = 0; i < styles.length; i++) {\n            style = styles[i];\n            if (style.type.match(typePattern)) {\n                const instanceOptions = clone(options);\n                instanceOptions.modifyVars = modifyVars;\n                const lessText = style.innerHTML || '';\n                instanceOptions.filename = document.location.href.replace(/#.*$/, '');\n\n                /* jshint loopfunc:true */\n                // use closure to store current style\n                less.render(lessText, instanceOptions,\n                    bind((style, e, result) => {\n                        if (e) {\n                            errors.add(e, 'inline');\n                        } else {\n                            style.type = 'text/css';\n                            if (style.styleSheet) {\n                                style.styleSheet.cssText = result.css;\n                            } else {\n                                style.innerHTML = result.css;\n                            }\n                        }\n                    }, null, style));\n            }\n        }\n    }\n\n    function loadStyleSheet(sheet, callback, reload, remaining, modifyVars) {\n\n        const instanceOptions = clone(options);\n        addDataAttr(instanceOptions, sheet);\n        instanceOptions.mime = sheet.type;\n\n        if (modifyVars) {\n            instanceOptions.modifyVars = modifyVars;\n        }\n\n        function loadInitialFileCallback(loadedFile) {\n            const data = loadedFile.contents;\n            const path = loadedFile.filename;\n            const webInfo = loadedFile.webInfo;\n\n            const newFileInfo = {\n                currentDirectory: fileManager.getPath(path),\n                filename: path,\n                rootFilename: path,\n                rewriteUrls: instanceOptions.rewriteUrls\n            };\n\n            newFileInfo.entryPath = newFileInfo.currentDirectory;\n            newFileInfo.rootpath = instanceOptions.rootpath || newFileInfo.currentDirectory;\n\n            if (webInfo) {\n                webInfo.remaining = remaining;\n\n                const css = cache.getCSS(path, webInfo, instanceOptions.modifyVars);\n                if (!reload && css) {\n                    webInfo.local = true;\n                    callback(null, css, data, sheet, webInfo, path);\n                    return;\n                }\n\n            }\n\n            // TODO add tests around how this behaves when reloading\n            errors.remove(path);\n\n            instanceOptions.rootFileInfo = newFileInfo;\n            less.render(data, instanceOptions, (e, result) => {\n                if (e) {\n                    e.href = path;\n                    callback(e);\n                } else {\n                    cache.setCSS(sheet.href, webInfo.lastModified, instanceOptions.modifyVars, result.css);\n                    callback(null, result.css, data, sheet, webInfo, path);\n                }\n            });\n        }\n\n        fileManager.loadFile(sheet.href, null, instanceOptions, environment)\n            .then(loadedFile => {\n                loadInitialFileCallback(loadedFile);\n            }).catch(err => {\n                console.log(err);\n                callback(err);\n            });\n\n    }\n\n    function loadStyleSheets(callback, reload, modifyVars) {\n        for (let i = 0; i < less.sheets.length; i++) {\n            loadStyleSheet(less.sheets[i], callback, reload, less.sheets.length - (i + 1), modifyVars);\n        }\n    }\n\n    function initRunningMode() {\n        if (less.env === 'development') {\n            less.watchTimer = setInterval(() => {\n                if (less.watchMode) {\n                    fileManager.clearFileCache();\n                    /**\n                     * @todo remove when this is typed with JSDoc\n                     */\n                    // eslint-disable-next-line no-unused-vars\n                    loadStyleSheets((e, css, _, sheet, webInfo) => {\n                        if (e) {\n                            errors.add(e, e.href || sheet.href);\n                        } else if (css) {\n                            browser.createCSS(window.document, css, sheet);\n                        }\n                    });\n                }\n            }, options.poll);\n        }\n    }\n\n    //\n    // Watch mode\n    //\n    less.watch = function () {\n        if (!less.watchMode ) {\n            less.env = 'development';\n            initRunningMode();\n        }\n        this.watchMode = true;\n        return true;\n    };\n\n    less.unwatch = function () {clearInterval(less.watchTimer); this.watchMode = false; return false; };\n\n    //\n    // Synchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\".\n    //\n    less.registerStylesheetsImmediately = () => {\n        const links = document.getElementsByTagName('link');\n        less.sheets = [];\n\n        for (let i = 0; i < links.length; i++) {\n            if (links[i].rel === 'stylesheet/less' || (links[i].rel.match(/stylesheet/) &&\n                (links[i].type.match(typePattern)))) {\n                less.sheets.push(links[i]);\n            }\n        }\n    };\n\n    //\n    // Asynchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\", returning a Promise.\n    //\n    less.registerStylesheets = () => new Promise((resolve) => {\n        less.registerStylesheetsImmediately();\n        resolve();\n    });\n\n    //\n    // With this function, it's possible to alter variables and re-render\n    // CSS without reloading less-files\n    //\n    less.modifyVars = record => less.refresh(true, record, false);\n\n    less.refresh = (reload, modifyVars, clearFileCache) => {\n        if ((reload || clearFileCache) && clearFileCache !== false) {\n            fileManager.clearFileCache();\n        }\n        return new Promise((resolve, reject) => {\n            let startTime;\n            let endTime;\n            let totalMilliseconds;\n            let remainingSheets;\n            startTime = endTime = new Date();\n\n            // Set counter for remaining unprocessed sheets\n            remainingSheets = less.sheets.length;\n\n            if (remainingSheets === 0) {\n\n                endTime = new Date();\n                totalMilliseconds = endTime - startTime;\n                less.logger.info('Less has finished and no sheets were loaded.');\n                resolve({\n                    startTime,\n                    endTime,\n                    totalMilliseconds,\n                    sheets: less.sheets.length\n                });\n\n            } else {\n                // Relies on less.sheets array, callback seems to be guaranteed to be called for every element of the array\n                loadStyleSheets((e, css, _, sheet, webInfo) => {\n                    if (e) {\n                        errors.add(e, e.href || sheet.href);\n                        reject(e);\n                        return;\n                    }\n                    if (webInfo.local) {\n                        less.logger.info(`Loading ${sheet.href} from cache.`);\n                    } else {\n                        less.logger.info(`Rendered ${sheet.href} successfully.`);\n                    }\n                    browser.createCSS(window.document, css, sheet);\n                    less.logger.info(`CSS for ${sheet.href} generated in ${new Date() - endTime}ms`);\n\n                    // Count completed sheet\n                    remainingSheets--;\n\n                    // Check if the last remaining sheet was processed and then call the promise\n                    if (remainingSheets === 0) {\n                        totalMilliseconds = new Date() - startTime;\n                        less.logger.info(`Less has finished. CSS generated in ${totalMilliseconds}ms`);\n                        resolve({\n                            startTime,\n                            endTime,\n                            totalMilliseconds,\n                            sheets: less.sheets.length\n                        });\n                    }\n                    endTime = new Date();\n                }, reload, modifyVars);\n            }\n\n            loadStyles(modifyVars);\n        });\n    };\n\n    less.refreshStyles = loadStyles;\n    return less;\n};\n","// Cache system is a bit outdated and could do with work\n\nexport default (window, options, logger) => {\n    let cache = null;\n    if (options.env !== 'development') {\n        try {\n            cache = (typeof window.localStorage === 'undefined') ? null : window.localStorage;\n        } catch (_) {}\n    }\n    return {\n        setCSS: function(path, lastModified, modifyVars, styles) {\n            if (cache) {\n                logger.info(`saving ${path} to cache.`);\n                try {\n                    cache.setItem(path, styles);\n                    cache.setItem(`${path}:timestamp`, lastModified);\n                    if (modifyVars) {\n                        cache.setItem(`${path}:vars`, JSON.stringify(modifyVars));\n                    }\n                } catch (e) {\n                    // TODO - could do with adding more robust error handling\n                    logger.error(`failed to save \"${path}\" to local storage for caching.`);\n                }\n            }\n        },\n        getCSS: function(path, webInfo, modifyVars) {\n            const css       = cache && cache.getItem(path);\n            const timestamp = cache && cache.getItem(`${path}:timestamp`);\n            let vars      = cache && cache.getItem(`${path}:vars`);\n\n            modifyVars = modifyVars || {};\n            vars = vars || '{}'; // if not set, treat as the JSON representation of an empty object\n\n            if (timestamp && webInfo.lastModified &&\n                (new Date(webInfo.lastModified).valueOf() ===\n                    new Date(timestamp).valueOf()) &&\n                JSON.stringify(modifyVars) === vars) {\n                // Use local copy\n                return css;\n            }\n        }\n    };\n};\n","\nimport functionRegistry from './../less/functions/function-registry';\n\nexport default () => {\n    function imageSize() {\n        throw {\n            type: 'Runtime',\n            message: 'Image size functions are not supported in browser version of less'\n        };\n    }\n\n    const imageFunctions = {\n        'image-size': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        'image-width': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        'image-height': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        }\n    };\n\n    functionRegistry.addMultiple(imageFunctions);\n};\n"],"names":["extractId","href","replace","addDataAttr","options","tag","opt","dataset","Object","prototype","hasOwnProperty","call","JSON","parse","_","browser","document","styles","sheet","id","concat","title","utils.extractId","oldStyleNode","getElementById","keepOldStyleNode","styleNode","createElement","setAttribute","media","styleSheet","appendChild","createTextNode","childNodes","length","firstChild","nodeValue","head","getElementsByTagName","nextEl","nextSibling","parentNode","insertBefore","removeChild","cssText","e","Error","window","scripts","currentScript","logger$1","error","msg","this","_fireEvent","warn","info","debug","addListener","listener","_listeners","push","removeListener","i_1","splice","type","i_2","logFunction","Environment","externalEnvironment","fileManagers","requiredFunctions","functions","propName","environmentFunc","bind","getFileManager","filename","currentDirectory","environment","isSync","logger","undefined","pluginManager","getFileManagers","fileManager","addFileManager","clearFileManagers","colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","unitConversions","m","cm","mm","in","px","pt","pc","duration","s","ms","angle","rad","Math","PI","deg","grad","turn","data","Node","parent","visibilityBlocks","nodeVisible","rootNode","parsed","defineProperty","get","fileInfo","getIndex","setParent","nodes","set","node","Array","isArray","forEach","_index","_fileInfo","isRulesetLike","toCSS","context","strs","genCSS","add","chunk","index","isEmpty","join","output","value","accept","visitor","visit","eval","_operate","op","a","b","fround","precision","numPrecision","Number","toFixed","compare","numericCompare","blocksVisibility","addVisibilityBlock","removeVisibilityBlock","ensureVisibility","ensureInvisibility","isVisible","visibilityInfo","copyVisibilityInfo","Color","rgb","originalForm","self","match","map","c","i","parseInt","alpha","split","clamp","v","max","min","toHex","round","toString","assign","luma","r","g","pow","doNotCompress","color","colorFunction","compress","args","indexOf","toHSL","h","l","toRGB","splitcolor","operate","other","d","toHSV","toARGB","x","fromKeyword","keyword","key","toLowerCase","slice","Paren","_noSpaceCombinators"," ","|","Combinator","emptyOrWhitespace","trim","spaceOrEmpty","Element","combinator","isVariable","currentFileInfo","clone","firstSelector","charAt","ALWAYS","PARENS_DIVISION","PARENS","RewriteUrls","__assign","t","n","arguments","p","apply","__spreadArray","to","from","pack","ar","getType","payload","copy","target","item","constructor","getPrototypeOf","props","getOwnPropertyNames","symbols","getOwnPropertySymbols","reduce","carry","includes","newVal","originalObject","includeNonenumerable","propType","propertyIsEnumerable","enumerable","writable","configurable","assignProp","nonenumerable","getLocation","inputStream","line","column","copyArray","arr","obj","cloned","prop","defaults","obj1","obj2","newObj","_defaults","defaults_1","copyOptions","opts","strictMath","math","Constants.Math","relativeUrls","rewriteUrls","Constants.RewriteUrls","flattenArray","result","length_1","isNullOrUndefined","val","SuppressedError","anonymousFunc","LessError","fileContentMap","currentFilename","message","stack","input","contents","loc","utils.getLocation","col","callLine","lines","found","func","Function","lineAdjust","callExtract","extract","create","F","stylize","str","errorTxt","substr","_visitArgs","visitDeeper","_hasIndexed","_noop","Visitor","implementation","_implementation","_visitInCache","_visitOutCache","indexNodeTypes","ticker","child","typeIndex","tree","syntaxOptions","nodeTypeIndex","fnName","impl","funcOut","visitArgs","newNode","isReplacing","cnt","visitArray","nonReplacing","out","evald","flatten","nestedCnt","j","nestedItem","contexts","copyFromOriginal","original","destination","propertiesToCopy","parseCopyProperties","Parse","paths","evalCopyProperties","isPathRelative","path","test","isPathLocalRelative","Eval","frames","importantScope","enterCalc","calcStack","inCalc","exitCalc","pop","inParenthesis","parensStack","outOfParenthesis","mathOn","isMathOn","pathRequiresRewrite","rewritePath","rootpath","newPath","normalizePath","segment","segments","reverse","ImportSequencer","onSequencerEmpty","imports","variableImports","_onSequencerEmpty","_currentDepth","addImport","callback","importSequencer","importItem","isReady","tryRun","addVariableImport","variableImport","ImportVisitor","importer","finish","_visitor","_importer","_finish","importCount","onceFileDetectionMap","recursionDetector","_sequencer","run","root","isFinished","visitImport","importNode","inlineCSS","inline","css","utils.copyArray","importParent","isVariableImport","processImportNode","evaldImportNode","evalForImport","multiple","importMultiple","tryAppendLessExtension","rules","onImported","sequencedOnImported","getPath","importedAtRoot","fullPath","importVisitor","isPlugin","isOptional","optional","duplicateImport","skip","importedFilename","oldContext","visitDeclaration","declNode","unshift","visitDeclarationOut","shift","visitAtRule","atRuleNode","visitAtRuleOut","visitMixinDefinition","mixinDefinitionNode","visitMixinDefinitionOut","visitRuleset","rulesetNode","visitRulesetOut","visitMedia","mediaNode","visitMediaOut","visitStartingStyle","declarations","visitStartingStyleOut","SetTreeVisibilityVisitor","visible","ExtendFinderVisitor","allExtendsStack","allExtends","extend","extendList","allSelectorsExtendList","ruleCnt","Extend","extendOnEveryPath","selectorPath","selExtendList","allSelectorsExtend","foundExtends","findSelfSelectors","ruleset","firstExtendOnThisSelectorPath","selectors","ProcessExtendsVisitor","extendFinder","extendIndices","doExtendChaining","newRoot","checkExtendsForNonMatched","indices","filter","hasFoundMatches","parent_ids","selector","extendsList","extendsListTarget","iterationCount","extendIndex","targetExtendIndex","matches","newSelector","targetExtend","newExtend","extendsToAdd","extendVisitor","object_id","selfSelectors","findMatch","selfSelector","extendSelector","option","extendChainCount","selectorOne","selectorTwo","ruleNode","visitSelector","selectorNode","pathIndex","selectorsToAdd","extendedSelectors","haystackSelectorPath","haystackSelectorIndex","hackstackSelector","hackstackElementIndex","haystackElement","targetCombinator","potentialMatch","needleElements","elements","potentialMatches","allowBefore","matched","initialCombinator","isElementValuesEqual","finished","allowAfter","endPathIndex","endPathElementIndex","elementValue1","elementValue2","Attribute","Selector","replacementSelector","matchIndex","firstElement","newElements","currentSelectorPathIndex","currentSelectorPathElementIndex","currentValue","derived","createDerived","newAllExtends","lastIndex","JoinSelectorVisitor","getIsOutput","joinSelectors","multiMedia","isRooted","CSSVisitorUtils","_context","containsSilentNonBlockedChild","bodyRules","rule","isSilent","keepOnlyVisibleChilds","owner","thing","hasVisibleSelector","resolveVisibility","compiledRulesBody","isVisibleRuleset","firstRoot","ToCSSVisitor","utils","variable","mixinNode","visitExtend","extendNode","visitComment","commentNode","originalRules","visitAtRuleWithBody","visitAtRuleWithoutBody","visitAnonymous","anonymousNode","nodeRules","hasFakeRuleset","getBodyRules","_mergeRules","name","charset","debugInfo","comment","Comment","checkValidNodes","isRoot","Declaration","Call","allowRoot","rulesets","_compileRulesetPaths","nodeRuleCnt","_removeDuplicateRules","ruleList","ruleCache","ruleCSS","groups","groupsArr","i_3","merge","group","result_1","space_1","comma_1","Expression","important","Value","visitors","MarkVisibleSelectorsVisitor","ExtendVisitor","getParserInput","furthest","furthestPossibleErrorMessage","chunks","current","currentPos","saveStack","parserInput","skipWhitespace","nextChar","oldi","oldj","curr","endIndex","mem","inp","charCodeAt","autoCommentAbsorb","isLineComment","nextNewLine","text","commentStore","nextStarSlash","save","restore","possibleErrorMessage","state","forget","isWhitespace","offset","pos","code","$re","tok","exec","$char","$peekChar","$str","tokLength","$quoted","startChar","currentPosition","$parseUntil","testChar","quote","returnVal","inComment","blockDepth","blockStack","parseGroups","startPos","lastPos","loop","char","expected","peek","peekChar","currentChar","prevChar","getInput","peekNotNumeric","start","chunkInput","failFunction","fail","lastOpening","lastOpeningParen","lastMultiComment","lastMultiCommentEndBrace","chunkerCurrentIndex","currentChunkStartIndex","cc","cc2","len","level","parenLevel","emitFrom","emitChunk","force","String","fromCharCode","chunker","end","furthestReachedEnd","furthestChar","functionRegistry","makeRegistry","base","_data","addMultiple","_this","keys","getLocalFunctions","inherit","MediaSyntaxOptions","queryInParens","ContainerSyntaxOptions","StartingStyleSyntaxOptions","ScopeSyntaxOptions","scopeAtRule","Parser","currentIndex","parsers","expect","arg","expectChar","getDebugInfo","lineNumber","fileName","parseNode","parseList","returnNodes","parser","additionalData","globalVars","modifyVars","ignored","err","preText","disablePluginRule","plugin","serializeVars","preProcessors","getPreProcessors","process","banner","contentsIgnoredChars","Ruleset","primary","endInfo","processImports","mixin","extendRule","definition","declaration","variableCall","entities","atrule","foundSemiColon","mixinLookup","quoted","forceEscaped","isEscaped","k","customFuncCall","stop","declarationCall","validCall","substring","ruleProperty","f","ieAlpha","boolean","condition","if","prevArgs","isSemiColonSeparated","argsComma","argsSemiColon","detachedRuleset","assignment","expression","literal","dimension","unicodeDescriptor","entity","url","property","Variable","Property","ch","variableCurly","curly","propertyCurly","colorKeyword","ud","javascript","js","escape","Boolean","parsedName","lookups","inValue","ruleLookups","VariableCall","NamespaceValue","isRule","element","getLookup","hasParens","elem","elemIndex","re","isCall","expressionContainsNamed","nameLoop","expand","returner","variadic","expressions","hasSep","throwAwayComments","cond","params","argInfo","conditions","block","lookupValue","Quoted","attribute","slashedCombinator","isLess","when","cif","content","blockRuleset","Definition","DetachedRuleset","dumpLineNumbers","strictImports","hasDR","permissiveValue","anonymousValue","untilTokens","done","testCurrentChar","Anonymous","variableRegex","propRegex","import","features","dir","importOptions","mediaFeatures","o","optionName","importOption","mediaFeature","rangeP","atomicCondition","rvalue","lvalue","prepareStartingStyleAtRule","prepareAndGetNestableAtRule","StartingStyle","atRule","treeType","nestableAtRule","Media","Container","Scope","pluginArgs","nonVendorSpecificName","hasIdentifier","hasExpression","hasUnknown","hasBlock","sub","addition","parens","multiplication","operation","isSpaced","operand","parensInOp","needsParens","logical","next","conditionAnd","negatedCondition","parenthesisCondition","negate","body","me","tryConditionFollowedByParenthesis","preparsedCond","delim","simpleProperty","vars","name_1","evaldCondition","getElements","mixinElements_","utils.isNullOrUndefined","mediaEmpty","els","importManager","createEmptySelectors","el","sels","olen","mixinElements","isJustParentSelector","Keyword","True","False","mapLines","rulesetLike","MATH","asComment","ctx","asMediaQuery","filenameWithProtocol","lineSeparator","lastRule","prevMath","evaldValue","mathBypass","evalName","importantResult","makeImportant","isCompressed","defaultFunc","value_","error_","reset","_lookups","_variables","_properties","isRuleset","selCnt","hasVariable","hasOnePassingSelector","toParseSelectors","startingIndex","selectorFileInfo","utils.flattenArray","subRule","originalRuleset","allowImports","globalFunctionRegistry","ctxFrames","ctxSelectors","evalImports","rsRules","evalFirst","mediaBlockCount","mediaBlocks","resetCache","bubbleSelectors","importRules","matchArgs","matchCondition","lastSelector","_rulesets","variables","hash","properties","name_2","decl","parseValue","lastDeclaration","toParse","transformDeclaration","nodes_1","filtRules","prependRule","find","foundMixins","ruleNodes","tabLevel","sep","tabRuleStr","tabSetStr","charsetNodeIndex","importNodeIndex","isCharset","pathCnt","pathSubCnt","appendedAmp","currentLastRule","joinSelector","createParenthesis","elementsToPak","originalElement","replacementParen","insideParent","createSelector","containedElement","addReplacementIntoPath","beginningPath","addPath","replacedElement","originalSelector","newSelectorPath","newJoinedSelector","parentEl","restOfPath","addAllReplacementsIntoPath","addPaths","mergeElementsOnToSelectors","sel","deriveSelector","deriveFrom","newPaths","replaceParentSelector","inSelector","currentElements","newSelectors","selectorsMultiplied","maybeSelector","hadParentSelector","nestedSelector","replaced","nestedPaths","replacedNewSelectors","preserve","concatenated","AtRule","outputRuleset","mediaPathBackup","mediaBlocksBackup","mediaPath","callEval","Unit","numerator","denominator","backupUnit","sort","strictUnits","returnStr","is","unitString","toUpperCase","isLength","RegExp","isSingular","usedUnits","mapUnit","groupName","atomicUnit","cancel","counter","count","Dimension","unit","parseFloat","isNaN","toColor","strValue","convertTo","unify","conversions","targetUnit","applyUnit","derivedConversions","Operation","operands","noSpacing","returnValue","doubleParen","functionCaller","isValid","evalArgs","commentFilter","subNodes","calc","currentMathContext","funcCaller","FunctionCaller","columnNumber","evaluating","frame","fun","mergeRules","less","vArr","escaped","containsVariables","that","iterativeReplace","regexp","replacementFnc","evaluatedValue","URL","isEvald","urlArgs","NestableAtRulePrototype","evalTop","evalNested","permute","fragment","rest","Import","pathValue","reference","evalPath","doEval","registry","newImport","JsEvalNode","evaluateJavaScript","evalContext","javascriptEnabled","jsify","toJS","JavaScript","string","Assignment","Condition","QueryInParens","op2","mvalue","getNestedElementValue","pathNode","tmp","startsWith","endsWith","fromCss","toCss","buildTo","UnicodeDescriptor","Negative","next_id","selectorElements","selfElements","ruleCall","simpleBlock","evalNestedBlock","arity","optionalParameters","required","evalParams","mixinEnv","evaldArguments","varargs","isNamedFound","argIndex","argsLength","evalCall","_arguments","mixinFrames","allArgsCnt","requiredArgsCnt","MixinCall","mixins","mixinPath","argValue","isRecursive","isOneFound","candidate","defaultResult","noArgumentsFilter","candidates","conditionResult","calcDefGroup","namespace","MixinDefinition","format","newRules","_setVisibilityToReplacement","replacement","AbstractFileManager","lastIndexOf","tryAppendExtension","ext","supportsSync","alwaysMakePathsAbsolute","isPathAbsolute","basePath","laterPath","pathDiff","baseUrl","urlDirectories","baseUrlDirectories","urlParts","extractUrlParts","baseUrlParts","diff","hostPart","directories","urlPartsRegex","rawDirectories","rawPath","fileUrl","AbstractPluginLoader","require","evalPlugin","pluginOptions","pluginObj","localModule","shortname","FileManager","trySetOptions","use","exports","loader","validatePlugin","minVersion","compareVersion","addPlugin","setOptions","version","versionToString","aVersion","bVersion","versionString","printUsage","plugins","If","trueValue","falseValue","isdefined","colorFunctions","boolean$1","hsla","origColor","hsl","number","rgba","size","m1","m2","hue","hsv","hsva","vs","floor","perm","saturation","lightness","hsvhue","hsvsaturation","hsvvalue","luminance","saturate","amount","method","desaturate","lighten","darken","fadein","fadeout","fade","spin","mix","color1","color2","weight","w","w1","w2","greyscale","contrast","dark","light","threshold","argb","tint","shade","colorBlend","mode","cb","cs","cr","ab","as","colorBlendModeFunctions","multiply","screen","overlay","softlight","sqrt","hardlight","difference","abs","exclusion","average","negation","getItemsFromNode","list","_SELF","~","expr","_i","values","range","step","stepValue","each","rs","iterator","tryEval","Quote","valueName","keyName","indexName","MathHelper","fn","mathFunctions","ceil","sin","cos","atan","asin","acos","mathHelper","fraction","num","minMax","isMin","currentUnified","referenceUnified","unitStatic","unitClone","order","convert","pi","mod","y","percentage","evaluated","encodeURI","pattern","flags","%","token","encodeURIComponent","isa","Type","isunit","types","isruleset","iscolor","isnumber","isstring","iskeyword","isurl","ispixel","ispercentage","isem","get-unit","styleExpression","style$1","style","colorBlending","fallback","functionThis","data-uri","mimetypeNode","filePathNode","mimetype","filePath","entryPath","fragmentStart","utils.clone","rawBuffer","useBase64","mimeLookup","charsetLookup","fileSync","loadFileSync","buf","encodeBase64","uri","dataUri","svg-gradient","direction","stops","gradientDirectionSvg","position","positionValue","gradientType","rectangleDimension","renderEnv","directionValue","throwArgumentDescriptor","transformTree","evaldRoot","evalEnv","visitorIterator","preEvalVisitors","first","isPreEvalVisitor","isPreVisitor","pm","PluginManager","postProcessors","installedPlugins","pluginCache","Loader","PluginLoader","addPlugins","install","addVisitor","addPreProcessor","preProcessor","priority","indexToInsertAt","addPostProcessor","postProcessor","manager","getPostProcessors","getVisitors","PluginManagerFactory","newFactory","parseNodeVersion_1","major","minor","patch","pre","build","lessRoot","sourceMapOutput","sourceMapBuilder","parseTree","SourceMapBuilder","ParseTree","toCSSOptions","sourceMap","file_1","getExternalSourceMap","files","rootFilename","SourceMapOutput","contentsIgnoredCharsMap","contentsMap","sourceMapFilename","sourceMapURL","outputFilename","sourceMapOutputFilename","sourceMapBasepath","sourceMapRootpath","outputSourceFiles","sourceMapGenerator","sourceMapFileInline","disableSourcemapAnnotation","sourceMapInputFilename","normalizeFilename","removeBasepath","getCSSAppendage","setExternalSourceMap","isInline","getSourceMapURL","getOutputFilename","getInputFilename","_css","_rootNode","_contentsMap","_contentsIgnoredCharsMap","_sourceMapFilename","_outputFilename","_sourceMapBasepath","_sourceMapRootpath","_outputSourceFiles","_sourceMapGeneratorConstructor","getSourceMapGenerator","_lineNumber","_column","sourceLines","columns","sourceColumns","inputSource","_sourceMapGenerator","addMapping","generated","source","file","sourceRoot","setSourceContent","sourceMapContent","stringify","toJSON","ImportManager","rootFileInfo","mime","queue","pluginLoader","fileParsedFunc","importedEqualsRoot","newFileInfo","loadedFile","promise","loadFileCallback","resolvedFilename","newEnv","syncImport","loadPluginSync","loadPlugin","loadFile","then","render","utils.copyOptions","self_1","Promise","resolve","reject","Render","context_1","pluginManager_1","reUsePluginManager","imports_1","evalResult","fileContent","parseVersion","initial","ctor","api","fileCache","doXHR","errback","xhr","XMLHttpRequest","async","isFileProtocol","fileAsync","handleResponse","status","responseText","getResponseHeader","overrideMimeType","open","setRequestHeader","send","onreadystatechange","readyState","supports","clearFileCache","location","useFileCache","lessText_1","webInfo","lastModified","Date","FM","log","fulfill","catch","ErrorReporting","rootHref","errorReporting","errors","errorline","classname","logLevel","errorConsole","timer","filenameNoPath","className","innerHTML","env","setInterval","replaceChild","clearInterval","errorHTML","remove","removeErrorHTML","depends","lint","insecure","protocol","poll","hostname","port","onReady","addDefaultOptions","LESS_PLUGINS","loggers","console","LogListener","cache","localStorage","setCSS","setItem","getCSS","getItem","timestamp","valueOf","Cache","imageSize","imageFunctions","image-size","image-width","image-height","ImageSize","typePattern","thisArg","curryArgs","loadStyles","instanceOptions","loadStyleSheet","reload","remaining","local","loadInitialFileCallback","loadStyleSheets","sheets","watch","watchMode","watchTimer","unwatch","registerStylesheetsImmediately","links","rel","registerStylesheets","record","refresh","startTime","endTime","totalMilliseconds","remainingSheets","refreshStyles","resolveOrReject","pageLoadFinished"],"mappings":"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"}